// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stream,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.730000,HLS_SYN_LAT=643,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=311,HLS_SYN_LUT=969}" *)

module stream (
        ap_clk,
        ap_rst_n,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        dst_TDATA,
        dst_TVALID,
        dst_TREADY,
        dst_TKEEP,
        dst_TSTRB,
        dst_TUSER,
        dst_TLAST,
        dst_TID,
        dst_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
input  [3:0] src_TKEEP;
input  [3:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
output  [31:0] dst_TDATA;
output   dst_TVALID;
input   dst_TREADY;
output  [3:0] dst_TKEEP;
output  [3:0] dst_TSTRB;
output  [0:0] dst_TUSER;
output  [0:0] dst_TLAST;
output  [0:0] dst_TID;
output  [0:0] dst_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg    ap_rst_n_inv;
wire    src_V_data_V_0_vld_in;
wire    src_V_data_V_0_vld_out;
reg    src_V_data_V_0_ack_out;
reg   [1:0] src_V_data_V_0_state;
reg   [0:0] src_V_user_V_0_data_out;
wire    src_V_user_V_0_vld_in;
wire    src_V_user_V_0_vld_out;
wire    src_V_user_V_0_ack_in;
reg    src_V_user_V_0_ack_out;
reg   [0:0] src_V_user_V_0_payload_A;
reg   [0:0] src_V_user_V_0_payload_B;
reg    src_V_user_V_0_sel_rd;
reg    src_V_user_V_0_sel_wr;
wire    src_V_user_V_0_sel;
wire    src_V_user_V_0_load_A;
wire    src_V_user_V_0_load_B;
reg   [1:0] src_V_user_V_0_state;
wire    src_V_user_V_0_state_cmp_full;
reg   [0:0] src_V_last_V_0_data_out;
wire    src_V_last_V_0_vld_in;
wire    src_V_last_V_0_vld_out;
wire    src_V_last_V_0_ack_in;
reg    src_V_last_V_0_ack_out;
reg   [0:0] src_V_last_V_0_payload_A;
reg   [0:0] src_V_last_V_0_payload_B;
reg    src_V_last_V_0_sel_rd;
reg    src_V_last_V_0_sel_wr;
wire    src_V_last_V_0_sel;
wire    src_V_last_V_0_load_A;
wire    src_V_last_V_0_load_B;
reg   [1:0] src_V_last_V_0_state;
wire    src_V_last_V_0_state_cmp_full;
wire    src_V_dest_V_0_vld_in;
reg    src_V_dest_V_0_ack_out;
reg   [1:0] src_V_dest_V_0_state;
reg   [31:0] dst_V_data_V_1_data_out;
reg    dst_V_data_V_1_vld_in;
wire    dst_V_data_V_1_vld_out;
wire    dst_V_data_V_1_ack_in;
wire    dst_V_data_V_1_ack_out;
reg   [31:0] dst_V_data_V_1_payload_A;
reg   [31:0] dst_V_data_V_1_payload_B;
reg    dst_V_data_V_1_sel_rd;
reg    dst_V_data_V_1_sel_wr;
wire    dst_V_data_V_1_sel;
wire    dst_V_data_V_1_load_A;
wire    dst_V_data_V_1_load_B;
reg   [1:0] dst_V_data_V_1_state;
wire    dst_V_data_V_1_state_cmp_full;
reg   [3:0] dst_V_keep_V_1_data_out;
reg    dst_V_keep_V_1_vld_in;
wire    dst_V_keep_V_1_vld_out;
wire    dst_V_keep_V_1_ack_in;
wire    dst_V_keep_V_1_ack_out;
reg   [3:0] dst_V_keep_V_1_payload_A;
reg   [3:0] dst_V_keep_V_1_payload_B;
reg    dst_V_keep_V_1_sel_rd;
reg    dst_V_keep_V_1_sel_wr;
wire    dst_V_keep_V_1_sel;
wire    dst_V_keep_V_1_load_A;
wire    dst_V_keep_V_1_load_B;
reg   [1:0] dst_V_keep_V_1_state;
wire    dst_V_keep_V_1_state_cmp_full;
reg   [3:0] dst_V_strb_V_1_data_out;
reg    dst_V_strb_V_1_vld_in;
wire    dst_V_strb_V_1_vld_out;
wire    dst_V_strb_V_1_ack_in;
wire    dst_V_strb_V_1_ack_out;
reg   [3:0] dst_V_strb_V_1_payload_A;
reg   [3:0] dst_V_strb_V_1_payload_B;
reg    dst_V_strb_V_1_sel_rd;
reg    dst_V_strb_V_1_sel_wr;
wire    dst_V_strb_V_1_sel;
wire    dst_V_strb_V_1_load_A;
wire    dst_V_strb_V_1_load_B;
reg   [1:0] dst_V_strb_V_1_state;
wire    dst_V_strb_V_1_state_cmp_full;
reg   [0:0] dst_V_user_V_1_data_out;
reg    dst_V_user_V_1_vld_in;
wire    dst_V_user_V_1_vld_out;
wire    dst_V_user_V_1_ack_in;
wire    dst_V_user_V_1_ack_out;
reg   [0:0] dst_V_user_V_1_payload_A;
reg   [0:0] dst_V_user_V_1_payload_B;
reg    dst_V_user_V_1_sel_rd;
reg    dst_V_user_V_1_sel_wr;
wire    dst_V_user_V_1_sel;
wire    dst_V_user_V_1_load_A;
wire    dst_V_user_V_1_load_B;
reg   [1:0] dst_V_user_V_1_state;
wire    dst_V_user_V_1_state_cmp_full;
reg   [0:0] dst_V_last_V_1_data_out;
reg    dst_V_last_V_1_vld_in;
wire    dst_V_last_V_1_vld_out;
wire    dst_V_last_V_1_ack_in;
wire    dst_V_last_V_1_ack_out;
reg   [0:0] dst_V_last_V_1_payload_A;
reg   [0:0] dst_V_last_V_1_payload_B;
reg    dst_V_last_V_1_sel_rd;
reg    dst_V_last_V_1_sel_wr;
wire    dst_V_last_V_1_sel;
wire    dst_V_last_V_1_load_A;
wire    dst_V_last_V_1_load_B;
reg   [1:0] dst_V_last_V_1_state;
wire    dst_V_last_V_1_state_cmp_full;
reg   [0:0] dst_V_id_V_1_data_out;
reg    dst_V_id_V_1_vld_in;
wire    dst_V_id_V_1_vld_out;
wire    dst_V_id_V_1_ack_in;
wire    dst_V_id_V_1_ack_out;
reg   [0:0] dst_V_id_V_1_payload_A;
reg   [0:0] dst_V_id_V_1_payload_B;
reg    dst_V_id_V_1_sel_rd;
reg    dst_V_id_V_1_sel_wr;
wire    dst_V_id_V_1_sel;
wire    dst_V_id_V_1_load_A;
wire    dst_V_id_V_1_load_B;
reg   [1:0] dst_V_id_V_1_state;
wire    dst_V_id_V_1_state_cmp_full;
reg   [0:0] dst_V_dest_V_1_data_out;
reg    dst_V_dest_V_1_vld_in;
wire    dst_V_dest_V_1_vld_out;
wire    dst_V_dest_V_1_ack_in;
wire    dst_V_dest_V_1_ack_out;
reg   [0:0] dst_V_dest_V_1_payload_A;
reg   [0:0] dst_V_dest_V_1_payload_B;
reg    dst_V_dest_V_1_sel_rd;
reg    dst_V_dest_V_1_sel_wr;
wire    dst_V_dest_V_1_sel;
wire    dst_V_dest_V_1_load_A;
wire    dst_V_dest_V_1_load_B;
reg   [1:0] dst_V_dest_V_1_state;
wire    dst_V_dest_V_1_state_cmp_full;
wire   [7:0] l;
wire   [7:0] c;
wire   [7:0] r;
reg   [15:0] y;
reg   [15:0] x;
reg    src_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    dst_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_reg_475;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_475;
reg   [10:0] col_assign_reg_300;
wire   [31:0] lb_val_2_data_V_q0;
wire    ap_block_state4_pp0_stage1_iter0;
reg    ap_block_state4_io;
wire    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] lb_val_2_keep_V_q0;
wire   [3:0] lb_val_2_strb_V_q0;
reg   [0:0] tmp_user_V_reg_447;
reg   [0:0] tmp_last_V_reg_453;
reg   [15:0] x_load_reg_461;
wire   [15:0] p_y_load_fu_342_p3;
reg   [15:0] p_y_load_reg_466;
wire   [0:0] tmp_4_fu_350_p2;
wire   [0:0] exitcond_fu_356_p2;
wire   [10:0] i_s_fu_373_p2;
reg   [10:0] i_s_reg_514;
wire   [10:0] i_1_fu_379_p2;
reg   [10:0] i_1_reg_519;
wire   [0:0] lb_val_2_user_V_q0;
wire   [0:0] lb_val_2_last_V_q0;
wire   [0:0] lb_val_2_id_V_q0;
wire   [0:0] lb_val_2_dest_V_q0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage1_subdone;
reg   [10:0] lb_val_2_data_V_address0;
reg    lb_val_2_data_V_ce0;
reg   [10:0] lb_val_2_keep_V_address0;
reg    lb_val_2_keep_V_ce0;
reg   [10:0] lb_val_2_strb_V_address0;
reg    lb_val_2_strb_V_ce0;
reg   [10:0] lb_val_2_user_V_address0;
reg    lb_val_2_user_V_ce0;
reg   [10:0] lb_val_2_last_V_address0;
reg    lb_val_2_last_V_ce0;
reg   [10:0] lb_val_2_id_V_address0;
reg    lb_val_2_id_V_ce0;
reg   [10:0] lb_val_2_dest_V_address0;
reg    lb_val_2_dest_V_ce0;
reg   [10:0] ap_phi_mux_col_assign_phi_fu_304_p4;
wire   [63:0] tmp_8_fu_362_p1;
wire   [63:0] tmp_8_1_fu_385_p1;
wire   [15:0] y_new_1_fu_409_p3;
wire    ap_CS_fsm_state7;
reg    ap_block_state7;
wire   [0:0] y_flag_1_fu_405_p2;
wire   [15:0] x_new_fu_427_p3;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_9_fu_395_p2;
wire   [0:0] tmp_2_fu_423_p2;
wire   [15:0] tmp_1_fu_416_p3;
wire   [15:0] x_load_op_fu_400_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 src_V_data_V_0_state = 2'd0;
#0 src_V_user_V_0_sel_rd = 1'b0;
#0 src_V_user_V_0_sel_wr = 1'b0;
#0 src_V_user_V_0_state = 2'd0;
#0 src_V_last_V_0_sel_rd = 1'b0;
#0 src_V_last_V_0_sel_wr = 1'b0;
#0 src_V_last_V_0_state = 2'd0;
#0 src_V_dest_V_0_state = 2'd0;
#0 dst_V_data_V_1_sel_rd = 1'b0;
#0 dst_V_data_V_1_sel_wr = 1'b0;
#0 dst_V_data_V_1_state = 2'd0;
#0 dst_V_keep_V_1_sel_rd = 1'b0;
#0 dst_V_keep_V_1_sel_wr = 1'b0;
#0 dst_V_keep_V_1_state = 2'd0;
#0 dst_V_strb_V_1_sel_rd = 1'b0;
#0 dst_V_strb_V_1_sel_wr = 1'b0;
#0 dst_V_strb_V_1_state = 2'd0;
#0 dst_V_user_V_1_sel_rd = 1'b0;
#0 dst_V_user_V_1_sel_wr = 1'b0;
#0 dst_V_user_V_1_state = 2'd0;
#0 dst_V_last_V_1_sel_rd = 1'b0;
#0 dst_V_last_V_1_sel_wr = 1'b0;
#0 dst_V_last_V_1_state = 2'd0;
#0 dst_V_id_V_1_sel_rd = 1'b0;
#0 dst_V_id_V_1_sel_wr = 1'b0;
#0 dst_V_id_V_1_state = 2'd0;
#0 dst_V_dest_V_1_sel_rd = 1'b0;
#0 dst_V_dest_V_1_sel_wr = 1'b0;
#0 dst_V_dest_V_1_state = 2'd0;
#0 y = 16'd0;
#0 x = 16'd0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

stream_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
stream_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .l(l),
    .c(c),
    .r(r)
);

stream_lb_val_2_dbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_2_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_2_data_V_address0),
    .ce0(lb_val_2_data_V_ce0),
    .q0(lb_val_2_data_V_q0)
);

stream_lb_val_2_kcud #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_2_keep_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_2_keep_V_address0),
    .ce0(lb_val_2_keep_V_ce0),
    .q0(lb_val_2_keep_V_q0)
);

stream_lb_val_2_kcud #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_2_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_2_strb_V_address0),
    .ce0(lb_val_2_strb_V_ce0),
    .q0(lb_val_2_strb_V_q0)
);

stream_lb_val_2_ueOg #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_2_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_2_user_V_address0),
    .ce0(lb_val_2_user_V_ce0),
    .q0(lb_val_2_user_V_q0)
);

stream_lb_val_2_ueOg #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_2_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_2_last_V_address0),
    .ce0(lb_val_2_last_V_ce0),
    .q0(lb_val_2_last_V_q0)
);

stream_lb_val_2_ueOg #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_2_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_2_id_V_address0),
    .ce0(lb_val_2_id_V_ce0),
    .q0(lb_val_2_id_V_q0)
);

stream_lb_val_2_ueOg #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_2_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_2_dest_V_address0),
    .ce0(lb_val_2_dest_V_ce0),
    .q0(lb_val_2_dest_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (ap_block_pp0_stage0_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'd1 == tmp_4_fu_350_p2) & (src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'd1 == tmp_4_fu_350_p2) & (src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_data_V_1_ack_out) & (1'b1 == dst_V_data_V_1_vld_out))) begin
            dst_V_data_V_1_sel_rd <= ~dst_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_data_V_1_ack_in) & (1'b1 == dst_V_data_V_1_vld_in))) begin
            dst_V_data_V_1_sel_wr <= ~dst_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_data_V_1_state) & (1'b0 == dst_V_data_V_1_vld_in)) | ((2'd3 == dst_V_data_V_1_state) & (1'b0 == dst_V_data_V_1_vld_in) & (1'b1 == dst_V_data_V_1_ack_out)))) begin
            dst_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_data_V_1_state) & (1'b0 == dst_V_data_V_1_ack_out)) | ((2'd3 == dst_V_data_V_1_state) & (1'b0 == dst_V_data_V_1_ack_out) & (1'b1 == dst_V_data_V_1_vld_in)))) begin
            dst_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_data_V_1_vld_in) & (1'b1 == dst_V_data_V_1_ack_out)) & ~((1'b0 == dst_V_data_V_1_ack_out) & (1'b1 == dst_V_data_V_1_vld_in)) & (2'd3 == dst_V_data_V_1_state)) | ((2'd1 == dst_V_data_V_1_state) & (1'b1 == dst_V_data_V_1_ack_out)) | ((2'd2 == dst_V_data_V_1_state) & (1'b1 == dst_V_data_V_1_vld_in)))) begin
            dst_V_data_V_1_state <= 2'd3;
        end else begin
            dst_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_dest_V_1_ack_out) & (1'b1 == dst_V_dest_V_1_vld_out))) begin
            dst_V_dest_V_1_sel_rd <= ~dst_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_dest_V_1_ack_in) & (1'b1 == dst_V_dest_V_1_vld_in))) begin
            dst_V_dest_V_1_sel_wr <= ~dst_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_dest_V_1_state) & (1'b0 == dst_V_dest_V_1_vld_in)) | ((2'd3 == dst_V_dest_V_1_state) & (1'b0 == dst_V_dest_V_1_vld_in) & (1'b1 == dst_V_dest_V_1_ack_out)))) begin
            dst_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_dest_V_1_state) & (1'b0 == dst_V_dest_V_1_ack_out)) | ((2'd3 == dst_V_dest_V_1_state) & (1'b0 == dst_V_dest_V_1_ack_out) & (1'b1 == dst_V_dest_V_1_vld_in)))) begin
            dst_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_dest_V_1_vld_in) & (1'b1 == dst_V_dest_V_1_ack_out)) & ~((1'b0 == dst_V_dest_V_1_ack_out) & (1'b1 == dst_V_dest_V_1_vld_in)) & (2'd3 == dst_V_dest_V_1_state)) | ((2'd1 == dst_V_dest_V_1_state) & (1'b1 == dst_V_dest_V_1_ack_out)) | ((2'd2 == dst_V_dest_V_1_state) & (1'b1 == dst_V_dest_V_1_vld_in)))) begin
            dst_V_dest_V_1_state <= 2'd3;
        end else begin
            dst_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_id_V_1_ack_out) & (1'b1 == dst_V_id_V_1_vld_out))) begin
            dst_V_id_V_1_sel_rd <= ~dst_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_id_V_1_ack_in) & (1'b1 == dst_V_id_V_1_vld_in))) begin
            dst_V_id_V_1_sel_wr <= ~dst_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_id_V_1_state) & (1'b0 == dst_V_id_V_1_vld_in)) | ((2'd3 == dst_V_id_V_1_state) & (1'b0 == dst_V_id_V_1_vld_in) & (1'b1 == dst_V_id_V_1_ack_out)))) begin
            dst_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_id_V_1_state) & (1'b0 == dst_V_id_V_1_ack_out)) | ((2'd3 == dst_V_id_V_1_state) & (1'b0 == dst_V_id_V_1_ack_out) & (1'b1 == dst_V_id_V_1_vld_in)))) begin
            dst_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_id_V_1_vld_in) & (1'b1 == dst_V_id_V_1_ack_out)) & ~((1'b0 == dst_V_id_V_1_ack_out) & (1'b1 == dst_V_id_V_1_vld_in)) & (2'd3 == dst_V_id_V_1_state)) | ((2'd1 == dst_V_id_V_1_state) & (1'b1 == dst_V_id_V_1_ack_out)) | ((2'd2 == dst_V_id_V_1_state) & (1'b1 == dst_V_id_V_1_vld_in)))) begin
            dst_V_id_V_1_state <= 2'd3;
        end else begin
            dst_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_keep_V_1_ack_out) & (1'b1 == dst_V_keep_V_1_vld_out))) begin
            dst_V_keep_V_1_sel_rd <= ~dst_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_keep_V_1_ack_in) & (1'b1 == dst_V_keep_V_1_vld_in))) begin
            dst_V_keep_V_1_sel_wr <= ~dst_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_keep_V_1_state) & (1'b0 == dst_V_keep_V_1_vld_in)) | ((2'd3 == dst_V_keep_V_1_state) & (1'b0 == dst_V_keep_V_1_vld_in) & (1'b1 == dst_V_keep_V_1_ack_out)))) begin
            dst_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_keep_V_1_state) & (1'b0 == dst_V_keep_V_1_ack_out)) | ((2'd3 == dst_V_keep_V_1_state) & (1'b0 == dst_V_keep_V_1_ack_out) & (1'b1 == dst_V_keep_V_1_vld_in)))) begin
            dst_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_keep_V_1_vld_in) & (1'b1 == dst_V_keep_V_1_ack_out)) & ~((1'b0 == dst_V_keep_V_1_ack_out) & (1'b1 == dst_V_keep_V_1_vld_in)) & (2'd3 == dst_V_keep_V_1_state)) | ((2'd1 == dst_V_keep_V_1_state) & (1'b1 == dst_V_keep_V_1_ack_out)) | ((2'd2 == dst_V_keep_V_1_state) & (1'b1 == dst_V_keep_V_1_vld_in)))) begin
            dst_V_keep_V_1_state <= 2'd3;
        end else begin
            dst_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_last_V_1_ack_out) & (1'b1 == dst_V_last_V_1_vld_out))) begin
            dst_V_last_V_1_sel_rd <= ~dst_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_last_V_1_ack_in) & (1'b1 == dst_V_last_V_1_vld_in))) begin
            dst_V_last_V_1_sel_wr <= ~dst_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_last_V_1_state) & (1'b0 == dst_V_last_V_1_vld_in)) | ((2'd3 == dst_V_last_V_1_state) & (1'b0 == dst_V_last_V_1_vld_in) & (1'b1 == dst_V_last_V_1_ack_out)))) begin
            dst_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_last_V_1_state) & (1'b0 == dst_V_last_V_1_ack_out)) | ((2'd3 == dst_V_last_V_1_state) & (1'b0 == dst_V_last_V_1_ack_out) & (1'b1 == dst_V_last_V_1_vld_in)))) begin
            dst_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_last_V_1_vld_in) & (1'b1 == dst_V_last_V_1_ack_out)) & ~((1'b0 == dst_V_last_V_1_ack_out) & (1'b1 == dst_V_last_V_1_vld_in)) & (2'd3 == dst_V_last_V_1_state)) | ((2'd1 == dst_V_last_V_1_state) & (1'b1 == dst_V_last_V_1_ack_out)) | ((2'd2 == dst_V_last_V_1_state) & (1'b1 == dst_V_last_V_1_vld_in)))) begin
            dst_V_last_V_1_state <= 2'd3;
        end else begin
            dst_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_strb_V_1_ack_out) & (1'b1 == dst_V_strb_V_1_vld_out))) begin
            dst_V_strb_V_1_sel_rd <= ~dst_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_strb_V_1_ack_in) & (1'b1 == dst_V_strb_V_1_vld_in))) begin
            dst_V_strb_V_1_sel_wr <= ~dst_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_strb_V_1_state) & (1'b0 == dst_V_strb_V_1_vld_in)) | ((2'd3 == dst_V_strb_V_1_state) & (1'b0 == dst_V_strb_V_1_vld_in) & (1'b1 == dst_V_strb_V_1_ack_out)))) begin
            dst_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_strb_V_1_state) & (1'b0 == dst_V_strb_V_1_ack_out)) | ((2'd3 == dst_V_strb_V_1_state) & (1'b0 == dst_V_strb_V_1_ack_out) & (1'b1 == dst_V_strb_V_1_vld_in)))) begin
            dst_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_strb_V_1_vld_in) & (1'b1 == dst_V_strb_V_1_ack_out)) & ~((1'b0 == dst_V_strb_V_1_ack_out) & (1'b1 == dst_V_strb_V_1_vld_in)) & (2'd3 == dst_V_strb_V_1_state)) | ((2'd1 == dst_V_strb_V_1_state) & (1'b1 == dst_V_strb_V_1_ack_out)) | ((2'd2 == dst_V_strb_V_1_state) & (1'b1 == dst_V_strb_V_1_vld_in)))) begin
            dst_V_strb_V_1_state <= 2'd3;
        end else begin
            dst_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_user_V_1_ack_out) & (1'b1 == dst_V_user_V_1_vld_out))) begin
            dst_V_user_V_1_sel_rd <= ~dst_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_user_V_1_ack_in) & (1'b1 == dst_V_user_V_1_vld_in))) begin
            dst_V_user_V_1_sel_wr <= ~dst_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_user_V_1_state) & (1'b0 == dst_V_user_V_1_vld_in)) | ((2'd3 == dst_V_user_V_1_state) & (1'b0 == dst_V_user_V_1_vld_in) & (1'b1 == dst_V_user_V_1_ack_out)))) begin
            dst_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_user_V_1_state) & (1'b0 == dst_V_user_V_1_ack_out)) | ((2'd3 == dst_V_user_V_1_state) & (1'b0 == dst_V_user_V_1_ack_out) & (1'b1 == dst_V_user_V_1_vld_in)))) begin
            dst_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_user_V_1_vld_in) & (1'b1 == dst_V_user_V_1_ack_out)) & ~((1'b0 == dst_V_user_V_1_ack_out) & (1'b1 == dst_V_user_V_1_vld_in)) & (2'd3 == dst_V_user_V_1_state)) | ((2'd1 == dst_V_user_V_1_state) & (1'b1 == dst_V_user_V_1_ack_out)) | ((2'd2 == dst_V_user_V_1_state) & (1'b1 == dst_V_user_V_1_vld_in)))) begin
            dst_V_user_V_1_state <= 2'd3;
        end else begin
            dst_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_data_V_0_state == 2'd2) & (1'b0 == src_V_data_V_0_vld_in)) | ((src_V_data_V_0_state == 2'd3) & (1'b0 == src_V_data_V_0_vld_in) & (1'b1 == src_V_data_V_0_ack_out)))) begin
            src_V_data_V_0_state <= 2'd2;
        end else if ((((src_V_data_V_0_state == 2'd1) & (1'b0 == src_V_data_V_0_ack_out)) | ((src_V_data_V_0_state == 2'd3) & (1'b0 == src_V_data_V_0_ack_out) & (1'b1 == src_V_data_V_0_vld_in)))) begin
            src_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_data_V_0_vld_in) & (1'b1 == src_V_data_V_0_ack_out)) & ~((1'b0 == src_V_data_V_0_ack_out) & (1'b1 == src_V_data_V_0_vld_in)) & (src_V_data_V_0_state == 2'd3)) | ((src_V_data_V_0_state == 2'd1) & (1'b1 == src_V_data_V_0_ack_out)) | ((src_V_data_V_0_state == 2'd2) & (1'b1 == src_V_data_V_0_vld_in)))) begin
            src_V_data_V_0_state <= 2'd3;
        end else begin
            src_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == src_V_dest_V_0_state) & (1'b0 == src_V_dest_V_0_vld_in)) | ((2'd3 == src_V_dest_V_0_state) & (1'b0 == src_V_dest_V_0_vld_in) & (1'b1 == src_V_dest_V_0_ack_out)))) begin
            src_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == src_V_dest_V_0_state) & (1'b0 == src_V_dest_V_0_ack_out)) | ((2'd3 == src_V_dest_V_0_state) & (1'b0 == src_V_dest_V_0_ack_out) & (1'b1 == src_V_dest_V_0_vld_in)))) begin
            src_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_dest_V_0_vld_in) & (1'b1 == src_V_dest_V_0_ack_out)) & ~((1'b0 == src_V_dest_V_0_ack_out) & (1'b1 == src_V_dest_V_0_vld_in)) & (2'd3 == src_V_dest_V_0_state)) | ((2'd1 == src_V_dest_V_0_state) & (1'b1 == src_V_dest_V_0_ack_out)) | ((2'd2 == src_V_dest_V_0_state) & (1'b1 == src_V_dest_V_0_vld_in)))) begin
            src_V_dest_V_0_state <= 2'd3;
        end else begin
            src_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_V_last_V_0_ack_out) & (1'b1 == src_V_last_V_0_vld_out))) begin
            src_V_last_V_0_sel_rd <= ~src_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_V_last_V_0_ack_in) & (1'b1 == src_V_last_V_0_vld_in))) begin
            src_V_last_V_0_sel_wr <= ~src_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == src_V_last_V_0_state) & (1'b0 == src_V_last_V_0_vld_in)) | ((2'd3 == src_V_last_V_0_state) & (1'b0 == src_V_last_V_0_vld_in) & (1'b1 == src_V_last_V_0_ack_out)))) begin
            src_V_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == src_V_last_V_0_state) & (1'b0 == src_V_last_V_0_ack_out)) | ((2'd3 == src_V_last_V_0_state) & (1'b0 == src_V_last_V_0_ack_out) & (1'b1 == src_V_last_V_0_vld_in)))) begin
            src_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_last_V_0_vld_in) & (1'b1 == src_V_last_V_0_ack_out)) & ~((1'b0 == src_V_last_V_0_ack_out) & (1'b1 == src_V_last_V_0_vld_in)) & (2'd3 == src_V_last_V_0_state)) | ((2'd1 == src_V_last_V_0_state) & (1'b1 == src_V_last_V_0_ack_out)) | ((2'd2 == src_V_last_V_0_state) & (1'b1 == src_V_last_V_0_vld_in)))) begin
            src_V_last_V_0_state <= 2'd3;
        end else begin
            src_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_V_user_V_0_ack_out) & (1'b1 == src_V_user_V_0_vld_out))) begin
            src_V_user_V_0_sel_rd <= ~src_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_V_user_V_0_ack_in) & (1'b1 == src_V_user_V_0_vld_in))) begin
            src_V_user_V_0_sel_wr <= ~src_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == src_V_user_V_0_state) & (1'b0 == src_V_user_V_0_vld_in)) | ((2'd3 == src_V_user_V_0_state) & (1'b0 == src_V_user_V_0_vld_in) & (1'b1 == src_V_user_V_0_ack_out)))) begin
            src_V_user_V_0_state <= 2'd2;
        end else if ((((2'd1 == src_V_user_V_0_state) & (1'b0 == src_V_user_V_0_ack_out)) | ((2'd3 == src_V_user_V_0_state) & (1'b0 == src_V_user_V_0_ack_out) & (1'b1 == src_V_user_V_0_vld_in)))) begin
            src_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_user_V_0_vld_in) & (1'b1 == src_V_user_V_0_ack_out)) & ~((1'b0 == src_V_user_V_0_ack_out) & (1'b1 == src_V_user_V_0_vld_in)) & (2'd3 == src_V_user_V_0_state)) | ((2'd1 == src_V_user_V_0_state) & (1'b1 == src_V_user_V_0_ack_out)) | ((2'd2 == src_V_user_V_0_state) & (1'b1 == src_V_user_V_0_vld_in)))) begin
            src_V_user_V_0_state <= 2'd3;
        end else begin
            src_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_4_fu_350_p2) & (src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        col_assign_reg_300 <= 11'd0;
    end else if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        col_assign_reg_300 <= i_1_reg_519;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_reg_475 <= exitcond_reg_475;
        exitcond_reg_475 <= exitcond_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_data_V_1_load_A)) begin
        dst_V_data_V_1_payload_A <= lb_val_2_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_data_V_1_load_B)) begin
        dst_V_data_V_1_payload_B <= lb_val_2_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_dest_V_1_load_A)) begin
        dst_V_dest_V_1_payload_A <= lb_val_2_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_dest_V_1_load_B)) begin
        dst_V_dest_V_1_payload_B <= lb_val_2_dest_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_id_V_1_load_A)) begin
        dst_V_id_V_1_payload_A <= lb_val_2_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_id_V_1_load_B)) begin
        dst_V_id_V_1_payload_B <= lb_val_2_id_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_keep_V_1_load_A)) begin
        dst_V_keep_V_1_payload_A <= lb_val_2_keep_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_keep_V_1_load_B)) begin
        dst_V_keep_V_1_payload_B <= lb_val_2_keep_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_last_V_1_load_A)) begin
        dst_V_last_V_1_payload_A <= lb_val_2_last_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_last_V_1_load_B)) begin
        dst_V_last_V_1_payload_B <= lb_val_2_last_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_strb_V_1_load_A)) begin
        dst_V_strb_V_1_payload_A <= lb_val_2_strb_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_strb_V_1_load_B)) begin
        dst_V_strb_V_1_payload_B <= lb_val_2_strb_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_user_V_1_load_A)) begin
        dst_V_user_V_1_payload_A <= lb_val_2_user_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_user_V_1_load_B)) begin
        dst_V_user_V_1_payload_B <= lb_val_2_user_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_fu_356_p2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        i_1_reg_519 <= i_1_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_fu_356_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_s_reg_514[10 : 1] <= i_s_fu_373_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_y_load_reg_466 <= p_y_load_fu_342_p3;
        tmp_last_V_reg_453 <= src_V_last_V_0_data_out;
        tmp_user_V_reg_447 <= src_V_user_V_0_data_out;
        x_load_reg_461 <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_last_V_0_load_A)) begin
        src_V_last_V_0_payload_A <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_last_V_0_load_B)) begin
        src_V_last_V_0_payload_B <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_user_V_0_load_A)) begin
        src_V_user_V_0_payload_A <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_user_V_0_load_B)) begin
        src_V_user_V_0_payload_B <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == dst_V_dest_V_1_ack_in) | (1'b0 == dst_V_id_V_1_ack_in) | (1'b0 == dst_V_last_V_1_ack_in) | (1'b0 == dst_V_user_V_1_ack_in) | (1'b0 == dst_V_strb_V_1_ack_in) | (1'b0 == dst_V_keep_V_1_ack_in) | (1'b0 == dst_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state7))) begin
        x <= x_new_fu_427_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == dst_V_dest_V_1_ack_in) | (1'b0 == dst_V_id_V_1_ack_in) | (1'b0 == dst_V_last_V_1_ack_in) | (1'b0 == dst_V_user_V_1_ack_in) | (1'b0 == dst_V_strb_V_1_ack_in) | (1'b0 == dst_V_keep_V_1_ack_in) | (1'b0 == dst_V_data_V_1_ack_in)) & (1'd1 == y_flag_1_fu_405_p2) & (1'b1 == ap_CS_fsm_state7))) begin
        y <= y_new_1_fu_409_p3;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_fu_356_p2)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_col_assign_phi_fu_304_p4 = i_1_reg_519;
    end else begin
        ap_phi_mux_col_assign_phi_fu_304_p4 = col_assign_reg_300;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_block_pp0_stage1 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_TDATA_blk_n = dst_V_data_V_1_state[1'd1];
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_data_V_1_sel)) begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_B;
    end else begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_V_data_V_1_vld_in = 1'b1;
    end else begin
        dst_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_dest_V_1_sel)) begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_B;
    end else begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_V_dest_V_1_vld_in = 1'b1;
    end else begin
        dst_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_id_V_1_sel)) begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_B;
    end else begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_V_id_V_1_vld_in = 1'b1;
    end else begin
        dst_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_keep_V_1_sel)) begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_B;
    end else begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_V_keep_V_1_vld_in = 1'b1;
    end else begin
        dst_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_last_V_1_sel)) begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_B;
    end else begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_V_last_V_1_vld_in = 1'b1;
    end else begin
        dst_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_strb_V_1_sel)) begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_B;
    end else begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_V_strb_V_1_vld_in = 1'b1;
    end else begin
        dst_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_user_V_1_sel)) begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_B;
    end else begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'd0 == exitcond_reg_475) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dst_V_user_V_1_vld_in = 1'b1;
    end else begin
        dst_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((ap_block_pp0_stage1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lb_val_2_data_V_address0 = tmp_8_1_fu_385_p1;
        end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lb_val_2_data_V_address0 = tmp_8_fu_362_p1;
        end else begin
            lb_val_2_data_V_address0 = 'bx;
        end
    end else begin
        lb_val_2_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lb_val_2_data_V_ce0 = 1'b1;
    end else begin
        lb_val_2_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((ap_block_pp0_stage1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lb_val_2_dest_V_address0 = tmp_8_1_fu_385_p1;
        end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lb_val_2_dest_V_address0 = tmp_8_fu_362_p1;
        end else begin
            lb_val_2_dest_V_address0 = 'bx;
        end
    end else begin
        lb_val_2_dest_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lb_val_2_dest_V_ce0 = 1'b1;
    end else begin
        lb_val_2_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((ap_block_pp0_stage1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lb_val_2_id_V_address0 = tmp_8_1_fu_385_p1;
        end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lb_val_2_id_V_address0 = tmp_8_fu_362_p1;
        end else begin
            lb_val_2_id_V_address0 = 'bx;
        end
    end else begin
        lb_val_2_id_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lb_val_2_id_V_ce0 = 1'b1;
    end else begin
        lb_val_2_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((ap_block_pp0_stage1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lb_val_2_keep_V_address0 = tmp_8_1_fu_385_p1;
        end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lb_val_2_keep_V_address0 = tmp_8_fu_362_p1;
        end else begin
            lb_val_2_keep_V_address0 = 'bx;
        end
    end else begin
        lb_val_2_keep_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lb_val_2_keep_V_ce0 = 1'b1;
    end else begin
        lb_val_2_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((ap_block_pp0_stage1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lb_val_2_last_V_address0 = tmp_8_1_fu_385_p1;
        end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lb_val_2_last_V_address0 = tmp_8_fu_362_p1;
        end else begin
            lb_val_2_last_V_address0 = 'bx;
        end
    end else begin
        lb_val_2_last_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lb_val_2_last_V_ce0 = 1'b1;
    end else begin
        lb_val_2_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((ap_block_pp0_stage1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lb_val_2_strb_V_address0 = tmp_8_1_fu_385_p1;
        end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lb_val_2_strb_V_address0 = tmp_8_fu_362_p1;
        end else begin
            lb_val_2_strb_V_address0 = 'bx;
        end
    end else begin
        lb_val_2_strb_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lb_val_2_strb_V_ce0 = 1'b1;
    end else begin
        lb_val_2_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((ap_block_pp0_stage1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            lb_val_2_user_V_address0 = tmp_8_1_fu_385_p1;
        end else if (((ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            lb_val_2_user_V_address0 = tmp_8_fu_362_p1;
        end else begin
            lb_val_2_user_V_address0 = 'bx;
        end
    end else begin
        lb_val_2_user_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage1_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        lb_val_2_user_V_ce0 = 1'b1;
    end else begin
        lb_val_2_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_TDATA_blk_n = src_V_data_V_0_state[1'd0];
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_data_V_0_ack_out = 1'b1;
    end else begin
        src_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_dest_V_0_ack_out = 1'b1;
    end else begin
        src_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_last_V_0_ack_out = 1'b1;
    end else begin
        src_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_V_last_V_0_sel)) begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_B;
    end else begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_user_V_0_ack_out = 1'b1;
    end else begin
        src_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_V_user_V_0_sel)) begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_B;
    end else begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'd1 == tmp_4_fu_350_p2) & (src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'd0 == tmp_4_fu_350_p2) & (src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'd1 == exitcond_fu_356_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0)) & (ap_block_pp0_stage0_subdone == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'd1 == exitcond_fu_356_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_subdone == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0)) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_subdone == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((1'b0 == dst_V_dest_V_1_ack_in) | (1'b0 == dst_V_id_V_1_ack_in) | (1'b0 == dst_V_last_V_1_ack_in) | (1'b0 == dst_V_user_V_1_ack_in) | (1'b0 == dst_V_strb_V_1_ack_in) | (1'b0 == dst_V_keep_V_1_ack_in) | (1'b0 == dst_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b1 == ap_block_state5_io) & (1'b1 == ap_enable_reg_pp0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b1 == ap_block_state5_io) & (1'b1 == ap_enable_reg_pp0_iter1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state6_io) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_block_state4_io) & (1'b1 == ap_enable_reg_pp0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state6_io) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_block_state4_io) & (1'b1 == ap_enable_reg_pp0_iter0)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((1'd0 == exitcond_reg_475) & (1'b0 == dst_V_data_V_1_ack_in));
end

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((1'd0 == exitcond_reg_475) & (1'b0 == dst_V_data_V_1_ack_in));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_reg_475) & (1'b0 == dst_V_data_V_1_ack_in));
end

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7 = ((1'b0 == dst_V_dest_V_1_ack_in) | (1'b0 == dst_V_id_V_1_ack_in) | (1'b0 == dst_V_last_V_1_ack_in) | (1'b0 == dst_V_user_V_1_ack_in) | (1'b0 == dst_V_strb_V_1_ack_in) | (1'b0 == dst_V_keep_V_1_ack_in) | (1'b0 == dst_V_data_V_1_ack_in));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dst_TDATA = dst_V_data_V_1_data_out;

assign dst_TDEST = dst_V_dest_V_1_data_out;

assign dst_TID = dst_V_id_V_1_data_out;

assign dst_TKEEP = dst_V_keep_V_1_data_out;

assign dst_TLAST = dst_V_last_V_1_data_out;

assign dst_TSTRB = dst_V_strb_V_1_data_out;

assign dst_TUSER = dst_V_user_V_1_data_out;

assign dst_TVALID = dst_V_dest_V_1_state[1'd0];

assign dst_V_data_V_1_ack_in = dst_V_data_V_1_state[1'd1];

assign dst_V_data_V_1_ack_out = dst_TREADY;

assign dst_V_data_V_1_load_A = (~dst_V_data_V_1_sel_wr & dst_V_data_V_1_state_cmp_full);

assign dst_V_data_V_1_load_B = (dst_V_data_V_1_state_cmp_full & dst_V_data_V_1_sel_wr);

assign dst_V_data_V_1_sel = dst_V_data_V_1_sel_rd;

assign dst_V_data_V_1_state_cmp_full = ((dst_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_data_V_1_vld_out = dst_V_data_V_1_state[1'd0];

assign dst_V_dest_V_1_ack_in = dst_V_dest_V_1_state[1'd1];

assign dst_V_dest_V_1_ack_out = dst_TREADY;

assign dst_V_dest_V_1_load_A = (~dst_V_dest_V_1_sel_wr & dst_V_dest_V_1_state_cmp_full);

assign dst_V_dest_V_1_load_B = (dst_V_dest_V_1_state_cmp_full & dst_V_dest_V_1_sel_wr);

assign dst_V_dest_V_1_sel = dst_V_dest_V_1_sel_rd;

assign dst_V_dest_V_1_state_cmp_full = ((dst_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_dest_V_1_vld_out = dst_V_dest_V_1_state[1'd0];

assign dst_V_id_V_1_ack_in = dst_V_id_V_1_state[1'd1];

assign dst_V_id_V_1_ack_out = dst_TREADY;

assign dst_V_id_V_1_load_A = (~dst_V_id_V_1_sel_wr & dst_V_id_V_1_state_cmp_full);

assign dst_V_id_V_1_load_B = (dst_V_id_V_1_state_cmp_full & dst_V_id_V_1_sel_wr);

assign dst_V_id_V_1_sel = dst_V_id_V_1_sel_rd;

assign dst_V_id_V_1_state_cmp_full = ((dst_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_id_V_1_vld_out = dst_V_id_V_1_state[1'd0];

assign dst_V_keep_V_1_ack_in = dst_V_keep_V_1_state[1'd1];

assign dst_V_keep_V_1_ack_out = dst_TREADY;

assign dst_V_keep_V_1_load_A = (~dst_V_keep_V_1_sel_wr & dst_V_keep_V_1_state_cmp_full);

assign dst_V_keep_V_1_load_B = (dst_V_keep_V_1_state_cmp_full & dst_V_keep_V_1_sel_wr);

assign dst_V_keep_V_1_sel = dst_V_keep_V_1_sel_rd;

assign dst_V_keep_V_1_state_cmp_full = ((dst_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_keep_V_1_vld_out = dst_V_keep_V_1_state[1'd0];

assign dst_V_last_V_1_ack_in = dst_V_last_V_1_state[1'd1];

assign dst_V_last_V_1_ack_out = dst_TREADY;

assign dst_V_last_V_1_load_A = (~dst_V_last_V_1_sel_wr & dst_V_last_V_1_state_cmp_full);

assign dst_V_last_V_1_load_B = (dst_V_last_V_1_state_cmp_full & dst_V_last_V_1_sel_wr);

assign dst_V_last_V_1_sel = dst_V_last_V_1_sel_rd;

assign dst_V_last_V_1_state_cmp_full = ((dst_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_last_V_1_vld_out = dst_V_last_V_1_state[1'd0];

assign dst_V_strb_V_1_ack_in = dst_V_strb_V_1_state[1'd1];

assign dst_V_strb_V_1_ack_out = dst_TREADY;

assign dst_V_strb_V_1_load_A = (~dst_V_strb_V_1_sel_wr & dst_V_strb_V_1_state_cmp_full);

assign dst_V_strb_V_1_load_B = (dst_V_strb_V_1_state_cmp_full & dst_V_strb_V_1_sel_wr);

assign dst_V_strb_V_1_sel = dst_V_strb_V_1_sel_rd;

assign dst_V_strb_V_1_state_cmp_full = ((dst_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_strb_V_1_vld_out = dst_V_strb_V_1_state[1'd0];

assign dst_V_user_V_1_ack_in = dst_V_user_V_1_state[1'd1];

assign dst_V_user_V_1_ack_out = dst_TREADY;

assign dst_V_user_V_1_load_A = (~dst_V_user_V_1_sel_wr & dst_V_user_V_1_state_cmp_full);

assign dst_V_user_V_1_load_B = (dst_V_user_V_1_state_cmp_full & dst_V_user_V_1_sel_wr);

assign dst_V_user_V_1_sel = dst_V_user_V_1_sel_rd;

assign dst_V_user_V_1_state_cmp_full = ((dst_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_user_V_1_vld_out = dst_V_user_V_1_state[1'd0];

assign exitcond_fu_356_p2 = ((ap_phi_mux_col_assign_phi_fu_304_p4 == 11'd1280) ? 1'b1 : 1'b0);

assign i_1_fu_379_p2 = (ap_phi_mux_col_assign_phi_fu_304_p4 + 11'd2);

assign i_s_fu_373_p2 = (ap_phi_mux_col_assign_phi_fu_304_p4 | 11'd1);

assign p_y_load_fu_342_p3 = ((src_V_user_V_0_data_out[0:0] === 1'b1) ? 16'd0 : y);

assign src_TREADY = src_V_dest_V_0_state[1'd1];

assign src_V_data_V_0_vld_in = src_TVALID;

assign src_V_data_V_0_vld_out = src_V_data_V_0_state[1'd0];

assign src_V_dest_V_0_vld_in = src_TVALID;

assign src_V_last_V_0_ack_in = src_V_last_V_0_state[1'd1];

assign src_V_last_V_0_load_A = (src_V_last_V_0_state_cmp_full & ~src_V_last_V_0_sel_wr);

assign src_V_last_V_0_load_B = (src_V_last_V_0_state_cmp_full & src_V_last_V_0_sel_wr);

assign src_V_last_V_0_sel = src_V_last_V_0_sel_rd;

assign src_V_last_V_0_state_cmp_full = ((src_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_last_V_0_vld_in = src_TVALID;

assign src_V_last_V_0_vld_out = src_V_last_V_0_state[1'd0];

assign src_V_user_V_0_ack_in = src_V_user_V_0_state[1'd1];

assign src_V_user_V_0_load_A = (src_V_user_V_0_state_cmp_full & ~src_V_user_V_0_sel_wr);

assign src_V_user_V_0_load_B = (src_V_user_V_0_state_cmp_full & src_V_user_V_0_sel_wr);

assign src_V_user_V_0_sel = src_V_user_V_0_sel_rd;

assign src_V_user_V_0_state_cmp_full = ((src_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_user_V_0_vld_in = src_TVALID;

assign src_V_user_V_0_vld_out = src_V_user_V_0_state[1'd0];

assign tmp_1_fu_416_p3 = ((tmp_last_V_reg_453[0:0] === 1'b1) ? 16'd0 : 16'd1);

assign tmp_2_fu_423_p2 = (tmp_user_V_reg_447 | tmp_last_V_reg_453);

assign tmp_4_fu_350_p2 = ((p_y_load_fu_342_p3 > 16'd2) ? 1'b1 : 1'b0);

assign tmp_8_1_fu_385_p1 = i_s_reg_514;

assign tmp_8_fu_362_p1 = ap_phi_mux_col_assign_phi_fu_304_p4;

assign tmp_9_fu_395_p2 = (p_y_load_reg_466 + 16'd1);

assign x_load_op_fu_400_p2 = (x_load_reg_461 + 16'd1);

assign x_new_fu_427_p3 = ((tmp_2_fu_423_p2[0:0] === 1'b1) ? tmp_1_fu_416_p3 : x_load_op_fu_400_p2);

assign y_flag_1_fu_405_p2 = (tmp_user_V_reg_447 | tmp_last_V_reg_453);

assign y_new_1_fu_409_p3 = ((tmp_last_V_reg_453[0:0] === 1'b1) ? tmp_9_fu_395_p2 : 16'd0);

always @ (posedge ap_clk) begin
    i_s_reg_514[0] <= 1'b1;
end

endmodule //stream
