// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stream,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.994000,HLS_SYN_LAT=921608,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=8,HLS_SYN_FF=1632,HLS_SYN_LUT=1770}" *)

module stream (
        ap_clk,
        ap_rst_n,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        dst_TDATA,
        dst_TVALID,
        dst_TREADY,
        dst_TKEEP,
        dst_TSTRB,
        dst_TUSER,
        dst_TLAST,
        dst_TID,
        dst_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state10 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
input  [3:0] src_TKEEP;
input  [3:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
output  [31:0] dst_TDATA;
output   dst_TVALID;
input   dst_TREADY;
output  [3:0] dst_TKEEP;
output  [3:0] dst_TSTRB;
output  [0:0] dst_TUSER;
output  [0:0] dst_TLAST;
output  [0:0] dst_TID;
output  [0:0] dst_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] src_V_data_V_0_data_out;
wire    src_V_data_V_0_vld_in;
wire    src_V_data_V_0_vld_out;
wire    src_V_data_V_0_ack_in;
reg    src_V_data_V_0_ack_out;
reg   [31:0] src_V_data_V_0_payload_A;
reg   [31:0] src_V_data_V_0_payload_B;
reg    src_V_data_V_0_sel_rd;
reg    src_V_data_V_0_sel_wr;
wire    src_V_data_V_0_sel;
wire    src_V_data_V_0_load_A;
wire    src_V_data_V_0_load_B;
reg   [1:0] src_V_data_V_0_state;
wire    src_V_data_V_0_state_cmp_full;
reg   [3:0] src_V_keep_V_0_data_out;
wire    src_V_keep_V_0_vld_in;
wire    src_V_keep_V_0_vld_out;
wire    src_V_keep_V_0_ack_in;
reg    src_V_keep_V_0_ack_out;
reg   [3:0] src_V_keep_V_0_payload_A;
reg   [3:0] src_V_keep_V_0_payload_B;
reg    src_V_keep_V_0_sel_rd;
reg    src_V_keep_V_0_sel_wr;
wire    src_V_keep_V_0_sel;
wire    src_V_keep_V_0_load_A;
wire    src_V_keep_V_0_load_B;
reg   [1:0] src_V_keep_V_0_state;
wire    src_V_keep_V_0_state_cmp_full;
reg   [3:0] src_V_strb_V_0_data_out;
wire    src_V_strb_V_0_vld_in;
wire    src_V_strb_V_0_vld_out;
wire    src_V_strb_V_0_ack_in;
reg    src_V_strb_V_0_ack_out;
reg   [3:0] src_V_strb_V_0_payload_A;
reg   [3:0] src_V_strb_V_0_payload_B;
reg    src_V_strb_V_0_sel_rd;
reg    src_V_strb_V_0_sel_wr;
wire    src_V_strb_V_0_sel;
wire    src_V_strb_V_0_load_A;
wire    src_V_strb_V_0_load_B;
reg   [1:0] src_V_strb_V_0_state;
wire    src_V_strb_V_0_state_cmp_full;
reg   [0:0] src_V_user_V_0_data_out;
wire    src_V_user_V_0_vld_in;
wire    src_V_user_V_0_vld_out;
wire    src_V_user_V_0_ack_in;
reg    src_V_user_V_0_ack_out;
reg   [0:0] src_V_user_V_0_payload_A;
reg   [0:0] src_V_user_V_0_payload_B;
reg    src_V_user_V_0_sel_rd;
reg    src_V_user_V_0_sel_wr;
wire    src_V_user_V_0_sel;
wire    src_V_user_V_0_load_A;
wire    src_V_user_V_0_load_B;
reg   [1:0] src_V_user_V_0_state;
wire    src_V_user_V_0_state_cmp_full;
reg   [0:0] src_V_last_V_0_data_out;
wire    src_V_last_V_0_vld_in;
wire    src_V_last_V_0_vld_out;
wire    src_V_last_V_0_ack_in;
reg    src_V_last_V_0_ack_out;
reg   [0:0] src_V_last_V_0_payload_A;
reg   [0:0] src_V_last_V_0_payload_B;
reg    src_V_last_V_0_sel_rd;
reg    src_V_last_V_0_sel_wr;
wire    src_V_last_V_0_sel;
wire    src_V_last_V_0_load_A;
wire    src_V_last_V_0_load_B;
reg   [1:0] src_V_last_V_0_state;
wire    src_V_last_V_0_state_cmp_full;
reg   [0:0] src_V_id_V_0_data_out;
wire    src_V_id_V_0_vld_in;
wire    src_V_id_V_0_vld_out;
wire    src_V_id_V_0_ack_in;
reg    src_V_id_V_0_ack_out;
reg   [0:0] src_V_id_V_0_payload_A;
reg   [0:0] src_V_id_V_0_payload_B;
reg    src_V_id_V_0_sel_rd;
reg    src_V_id_V_0_sel_wr;
wire    src_V_id_V_0_sel;
wire    src_V_id_V_0_load_A;
wire    src_V_id_V_0_load_B;
reg   [1:0] src_V_id_V_0_state;
wire    src_V_id_V_0_state_cmp_full;
reg   [0:0] src_V_dest_V_0_data_out;
wire    src_V_dest_V_0_vld_in;
wire    src_V_dest_V_0_vld_out;
wire    src_V_dest_V_0_ack_in;
reg    src_V_dest_V_0_ack_out;
reg   [0:0] src_V_dest_V_0_payload_A;
reg   [0:0] src_V_dest_V_0_payload_B;
reg    src_V_dest_V_0_sel_rd;
reg    src_V_dest_V_0_sel_wr;
wire    src_V_dest_V_0_sel;
wire    src_V_dest_V_0_load_A;
wire    src_V_dest_V_0_load_B;
reg   [1:0] src_V_dest_V_0_state;
wire    src_V_dest_V_0_state_cmp_full;
reg   [31:0] dst_V_data_V_1_data_out;
reg    dst_V_data_V_1_vld_in;
wire    dst_V_data_V_1_vld_out;
wire    dst_V_data_V_1_ack_in;
wire    dst_V_data_V_1_ack_out;
reg   [31:0] dst_V_data_V_1_payload_A;
reg   [31:0] dst_V_data_V_1_payload_B;
reg    dst_V_data_V_1_sel_rd;
reg    dst_V_data_V_1_sel_wr;
wire    dst_V_data_V_1_sel;
wire    dst_V_data_V_1_load_A;
wire    dst_V_data_V_1_load_B;
reg   [1:0] dst_V_data_V_1_state;
wire    dst_V_data_V_1_state_cmp_full;
reg   [3:0] dst_V_keep_V_1_data_out;
reg    dst_V_keep_V_1_vld_in;
wire    dst_V_keep_V_1_vld_out;
wire    dst_V_keep_V_1_ack_in;
wire    dst_V_keep_V_1_ack_out;
reg   [3:0] dst_V_keep_V_1_payload_A;
reg   [3:0] dst_V_keep_V_1_payload_B;
reg    dst_V_keep_V_1_sel_rd;
reg    dst_V_keep_V_1_sel_wr;
wire    dst_V_keep_V_1_sel;
wire    dst_V_keep_V_1_load_A;
wire    dst_V_keep_V_1_load_B;
reg   [1:0] dst_V_keep_V_1_state;
wire    dst_V_keep_V_1_state_cmp_full;
reg   [3:0] dst_V_strb_V_1_data_out;
reg    dst_V_strb_V_1_vld_in;
wire    dst_V_strb_V_1_vld_out;
wire    dst_V_strb_V_1_ack_in;
wire    dst_V_strb_V_1_ack_out;
reg   [3:0] dst_V_strb_V_1_payload_A;
reg   [3:0] dst_V_strb_V_1_payload_B;
reg    dst_V_strb_V_1_sel_rd;
reg    dst_V_strb_V_1_sel_wr;
wire    dst_V_strb_V_1_sel;
wire    dst_V_strb_V_1_load_A;
wire    dst_V_strb_V_1_load_B;
reg   [1:0] dst_V_strb_V_1_state;
wire    dst_V_strb_V_1_state_cmp_full;
reg   [0:0] dst_V_user_V_1_data_out;
reg    dst_V_user_V_1_vld_in;
wire    dst_V_user_V_1_vld_out;
wire    dst_V_user_V_1_ack_in;
wire    dst_V_user_V_1_ack_out;
reg   [0:0] dst_V_user_V_1_payload_A;
reg   [0:0] dst_V_user_V_1_payload_B;
reg    dst_V_user_V_1_sel_rd;
reg    dst_V_user_V_1_sel_wr;
wire    dst_V_user_V_1_sel;
wire    dst_V_user_V_1_load_A;
wire    dst_V_user_V_1_load_B;
reg   [1:0] dst_V_user_V_1_state;
wire    dst_V_user_V_1_state_cmp_full;
reg   [0:0] dst_V_last_V_1_data_out;
reg    dst_V_last_V_1_vld_in;
wire    dst_V_last_V_1_vld_out;
wire    dst_V_last_V_1_ack_in;
wire    dst_V_last_V_1_ack_out;
reg   [0:0] dst_V_last_V_1_payload_A;
reg   [0:0] dst_V_last_V_1_payload_B;
reg    dst_V_last_V_1_sel_rd;
reg    dst_V_last_V_1_sel_wr;
wire    dst_V_last_V_1_sel;
wire    dst_V_last_V_1_load_A;
wire    dst_V_last_V_1_load_B;
reg   [1:0] dst_V_last_V_1_state;
wire    dst_V_last_V_1_state_cmp_full;
reg   [0:0] dst_V_id_V_1_data_out;
reg    dst_V_id_V_1_vld_in;
wire    dst_V_id_V_1_vld_out;
wire    dst_V_id_V_1_ack_in;
wire    dst_V_id_V_1_ack_out;
reg   [0:0] dst_V_id_V_1_payload_A;
reg   [0:0] dst_V_id_V_1_payload_B;
reg    dst_V_id_V_1_sel_rd;
reg    dst_V_id_V_1_sel_wr;
wire    dst_V_id_V_1_sel;
wire    dst_V_id_V_1_load_A;
wire    dst_V_id_V_1_load_B;
reg   [1:0] dst_V_id_V_1_state;
wire    dst_V_id_V_1_state_cmp_full;
reg   [0:0] dst_V_dest_V_1_data_out;
reg    dst_V_dest_V_1_vld_in;
wire    dst_V_dest_V_1_vld_out;
wire    dst_V_dest_V_1_ack_in;
wire    dst_V_dest_V_1_ack_out;
reg   [0:0] dst_V_dest_V_1_payload_A;
reg   [0:0] dst_V_dest_V_1_payload_B;
reg    dst_V_dest_V_1_sel_rd;
reg    dst_V_dest_V_1_sel_wr;
wire    dst_V_dest_V_1_sel;
wire    dst_V_dest_V_1_load_A;
wire    dst_V_dest_V_1_load_B;
reg   [1:0] dst_V_dest_V_1_state;
wire    dst_V_dest_V_1_state_cmp_full;
wire   [7:0] kernelchc;
wire   [7:0] normalfactor;
wire   [7:0] channelselector;
reg    src_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_2_reg_748;
reg    dst_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] ap_reg_pp0_iter5_tmp_2_reg_748;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] ap_reg_pp0_iter6_tmp_2_reg_748;
reg   [15:0] rows_reg_429;
reg   [15:0] cols_reg_441;
reg   [19:0] pixels_reg_453;
wire   [0:0] tmp_3_fu_464_p2;
reg   [0:0] tmp_3_reg_713;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_4_fu_470_p2;
reg   [0:0] tmp_4_reg_718;
wire   [0:0] tmp_5_fu_476_p2;
reg   [0:0] tmp_5_reg_723;
wire   [0:0] tmp_8_fu_482_p2;
reg   [0:0] tmp_8_reg_728;
wire   [0:0] tmp_9_fu_488_p2;
reg   [0:0] tmp_9_reg_733;
wire   [0:0] tmp_s_fu_494_p2;
reg   [0:0] tmp_s_reg_738;
wire   [0:0] tmp_1_fu_500_p2;
reg   [0:0] tmp_1_reg_743;
wire   [0:0] tmp_2_fu_506_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
reg    ap_block_state8_io;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_tmp_2_reg_748;
reg   [0:0] ap_reg_pp0_iter2_tmp_2_reg_748;
reg   [0:0] ap_reg_pp0_iter3_tmp_2_reg_748;
reg   [0:0] ap_reg_pp0_iter4_tmp_2_reg_748;
wire   [19:0] pixels_1_fu_512_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] tmp_data_V_4_reg_757;
reg   [3:0] tmp_keep_V_reg_763;
reg   [3:0] ap_reg_pp0_iter2_tmp_keep_V_reg_763;
reg   [3:0] ap_reg_pp0_iter3_tmp_keep_V_reg_763;
reg   [3:0] ap_reg_pp0_iter4_tmp_keep_V_reg_763;
reg   [3:0] ap_reg_pp0_iter5_tmp_keep_V_reg_763;
reg   [3:0] tmp_strb_V_reg_769;
reg   [3:0] ap_reg_pp0_iter2_tmp_strb_V_reg_769;
reg   [3:0] ap_reg_pp0_iter3_tmp_strb_V_reg_769;
reg   [3:0] ap_reg_pp0_iter4_tmp_strb_V_reg_769;
reg   [3:0] ap_reg_pp0_iter5_tmp_strb_V_reg_769;
reg   [0:0] tmp_user_V_reg_775;
reg   [0:0] ap_reg_pp0_iter2_tmp_user_V_reg_775;
reg   [0:0] ap_reg_pp0_iter3_tmp_user_V_reg_775;
reg   [0:0] ap_reg_pp0_iter4_tmp_user_V_reg_775;
reg   [0:0] ap_reg_pp0_iter5_tmp_user_V_reg_775;
reg   [0:0] tmp_last_V_reg_781;
reg   [0:0] ap_reg_pp0_iter2_tmp_last_V_reg_781;
reg   [0:0] ap_reg_pp0_iter3_tmp_last_V_reg_781;
reg   [0:0] ap_reg_pp0_iter4_tmp_last_V_reg_781;
reg   [0:0] ap_reg_pp0_iter5_tmp_last_V_reg_781;
reg   [0:0] tmp_id_V_reg_787;
reg   [0:0] ap_reg_pp0_iter2_tmp_id_V_reg_787;
reg   [0:0] ap_reg_pp0_iter3_tmp_id_V_reg_787;
reg   [0:0] ap_reg_pp0_iter4_tmp_id_V_reg_787;
reg   [0:0] ap_reg_pp0_iter5_tmp_id_V_reg_787;
reg   [0:0] tmp_dest_V_reg_793;
reg   [0:0] ap_reg_pp0_iter2_tmp_dest_V_reg_793;
reg   [0:0] ap_reg_pp0_iter3_tmp_dest_V_reg_793;
reg   [0:0] ap_reg_pp0_iter4_tmp_dest_V_reg_793;
reg   [0:0] ap_reg_pp0_iter5_tmp_dest_V_reg_793;
wire   [63:0] tmp_6_fu_546_p1;
reg   [63:0] tmp_6_reg_799;
reg   [63:0] ap_reg_pp0_iter2_tmp_6_reg_799;
reg   [10:0] lb_val_1_data_V_add_reg_809;
reg   [10:0] ap_reg_pp0_iter2_lb_val_1_data_V_add_reg_809;
reg   [10:0] lb_val_0_data_V_add_reg_815;
reg   [10:0] lb_val_0_keep_V_add_reg_821;
reg   [10:0] lb_val_0_strb_V_add_reg_827;
reg   [10:0] lb_val_0_user_V_add_reg_833;
reg   [10:0] lb_val_0_last_V_add_reg_839;
reg   [10:0] lb_val_0_id_V_addr_reg_845;
reg   [10:0] lb_val_0_dest_V_add_reg_851;
wire   [0:0] icmp_fu_568_p2;
reg   [0:0] icmp_reg_857;
wire   [0:0] icmp5_fu_584_p2;
reg   [0:0] icmp5_reg_862;
wire   [15:0] rows_1_fu_602_p3;
reg   [15:0] rows_1_reg_867;
wire   [15:0] cols_1_fu_610_p3;
reg   [15:0] cols_1_reg_872;
wire   [31:0] lb_val_0_data_V_q0;
reg   [31:0] blurVal_data_V_2_reg_877;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] lb_val_0_keep_V_q0;
reg   [3:0] blurVal_keep_V_1_reg_882;
wire   [3:0] lb_val_0_strb_V_q0;
reg   [3:0] blurVal_strb_V_1_reg_887;
wire   [0:0] lb_val_0_user_V_q0;
reg   [0:0] blurVal_user_V_1_reg_892;
wire   [0:0] lb_val_0_last_V_q0;
reg   [0:0] blurVal_last_V_1_reg_897;
wire   [0:0] lb_val_0_id_V_q0;
reg   [0:0] blurVal_id_V_1_reg_902;
wire   [0:0] lb_val_0_dest_V_q0;
reg   [0:0] blurVal_dest_V_1_reg_907;
wire  signed [31:0] streamOut_data_V_3_fu_645_p3;
reg  signed [31:0] streamOut_data_V_3_reg_912;
reg  signed [31:0] ap_reg_pp0_iter3_streamOut_data_V_3_reg_912;
reg  signed [31:0] ap_reg_pp0_iter4_streamOut_data_V_3_reg_912;
reg  signed [31:0] ap_reg_pp0_iter5_streamOut_data_V_3_reg_912;
wire   [31:0] grp_fu_658_p2;
reg   [31:0] streamOut_data_V_reg_919;
wire   [31:0] grp_fu_663_p2;
reg   [31:0] streamOut_data_V_1_reg_925;
wire   [31:0] tmp_data_V_2_fu_689_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire   [10:0] lb_val_0_data_V_address0;
reg    lb_val_0_data_V_ce0;
reg    lb_val_0_data_V_ce1;
reg    lb_val_0_data_V_we1;
wire   [10:0] lb_val_1_data_V_address0;
reg    lb_val_1_data_V_ce0;
wire   [31:0] lb_val_1_data_V_q0;
reg    lb_val_1_data_V_ce1;
reg    lb_val_1_data_V_we1;
wire   [10:0] lb_val_0_keep_V_address0;
reg    lb_val_0_keep_V_ce0;
reg    lb_val_0_keep_V_ce1;
reg    lb_val_0_keep_V_we1;
wire   [10:0] lb_val_1_keep_V_address1;
reg    lb_val_1_keep_V_ce1;
reg    lb_val_1_keep_V_we1;
wire   [10:0] lb_val_0_strb_V_address0;
reg    lb_val_0_strb_V_ce0;
reg    lb_val_0_strb_V_ce1;
reg    lb_val_0_strb_V_we1;
wire   [10:0] lb_val_1_strb_V_address1;
reg    lb_val_1_strb_V_ce1;
reg    lb_val_1_strb_V_we1;
wire   [10:0] lb_val_0_user_V_address0;
reg    lb_val_0_user_V_ce0;
reg    lb_val_0_user_V_ce1;
reg    lb_val_0_user_V_we1;
wire   [10:0] lb_val_1_user_V_address1;
reg    lb_val_1_user_V_ce1;
reg    lb_val_1_user_V_we1;
wire   [10:0] lb_val_0_last_V_address0;
reg    lb_val_0_last_V_ce0;
reg    lb_val_0_last_V_ce1;
reg    lb_val_0_last_V_we1;
wire   [10:0] lb_val_1_last_V_address1;
reg    lb_val_1_last_V_ce1;
reg    lb_val_1_last_V_we1;
wire   [10:0] lb_val_0_id_V_address0;
reg    lb_val_0_id_V_ce0;
reg    lb_val_0_id_V_ce1;
reg    lb_val_0_id_V_we1;
wire   [10:0] lb_val_1_id_V_address1;
reg    lb_val_1_id_V_ce1;
reg    lb_val_1_id_V_we1;
wire   [10:0] lb_val_0_dest_V_address0;
reg    lb_val_0_dest_V_ce0;
reg    lb_val_0_dest_V_ce1;
reg    lb_val_0_dest_V_we1;
wire   [10:0] lb_val_1_dest_V_address1;
reg    lb_val_1_dest_V_ce1;
reg    lb_val_1_dest_V_we1;
reg   [15:0] ap_phi_mux_rows_phi_fu_433_p4;
reg   [15:0] ap_phi_mux_cols_phi_fu_445_p4;
reg   [31:0] tmp_data_V_fu_114;
reg   [31:0] outputPxl_fu_118;
reg    ap_block_pp0_stage0_01001;
wire   [14:0] tmp_7_fu_558_p4;
wire   [14:0] tmp_10_fu_574_p4;
wire   [15:0] rows_2_fu_590_p2;
wire   [15:0] cols_2_fu_596_p2;
wire   [31:0] blurVal_data_V_blurV_fu_625_p3;
wire   [31:0] blurVal_data_V_1_blu_fu_631_p3;
wire   [0:0] or_cond_fu_621_p2;
wire   [31:0] sel_SEBB_fu_638_p3;
wire   [25:0] grp_fu_658_p1;
wire   [17:0] grp_fu_663_p1;
wire   [31:0] p_012_0_1_fu_671_p3;
wire   [31:0] p_012_0_2_fu_677_p3;
wire   [31:0] p_012_0_3_fu_683_p3;
reg    grp_fu_658_ce;
reg    grp_fu_663_ce;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state10;
reg    ap_block_state10;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 src_V_data_V_0_sel_rd = 1'b0;
#0 src_V_data_V_0_sel_wr = 1'b0;
#0 src_V_data_V_0_state = 2'd0;
#0 src_V_keep_V_0_sel_rd = 1'b0;
#0 src_V_keep_V_0_sel_wr = 1'b0;
#0 src_V_keep_V_0_state = 2'd0;
#0 src_V_strb_V_0_sel_rd = 1'b0;
#0 src_V_strb_V_0_sel_wr = 1'b0;
#0 src_V_strb_V_0_state = 2'd0;
#0 src_V_user_V_0_sel_rd = 1'b0;
#0 src_V_user_V_0_sel_wr = 1'b0;
#0 src_V_user_V_0_state = 2'd0;
#0 src_V_last_V_0_sel_rd = 1'b0;
#0 src_V_last_V_0_sel_wr = 1'b0;
#0 src_V_last_V_0_state = 2'd0;
#0 src_V_id_V_0_sel_rd = 1'b0;
#0 src_V_id_V_0_sel_wr = 1'b0;
#0 src_V_id_V_0_state = 2'd0;
#0 src_V_dest_V_0_sel_rd = 1'b0;
#0 src_V_dest_V_0_sel_wr = 1'b0;
#0 src_V_dest_V_0_state = 2'd0;
#0 dst_V_data_V_1_sel_rd = 1'b0;
#0 dst_V_data_V_1_sel_wr = 1'b0;
#0 dst_V_data_V_1_state = 2'd0;
#0 dst_V_keep_V_1_sel_rd = 1'b0;
#0 dst_V_keep_V_1_sel_wr = 1'b0;
#0 dst_V_keep_V_1_state = 2'd0;
#0 dst_V_strb_V_1_sel_rd = 1'b0;
#0 dst_V_strb_V_1_sel_wr = 1'b0;
#0 dst_V_strb_V_1_state = 2'd0;
#0 dst_V_user_V_1_sel_rd = 1'b0;
#0 dst_V_user_V_1_sel_wr = 1'b0;
#0 dst_V_user_V_1_state = 2'd0;
#0 dst_V_last_V_1_sel_rd = 1'b0;
#0 dst_V_last_V_1_sel_wr = 1'b0;
#0 dst_V_last_V_1_state = 2'd0;
#0 dst_V_id_V_1_sel_rd = 1'b0;
#0 dst_V_id_V_1_sel_wr = 1'b0;
#0 dst_V_id_V_1_state = 2'd0;
#0 dst_V_dest_V_1_sel_rd = 1'b0;
#0 dst_V_dest_V_1_sel_wr = 1'b0;
#0 dst_V_dest_V_1_state = 2'd0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

stream_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
stream_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .kernelchc(kernelchc),
    .normalfactor(normalfactor),
    .channelselector(channelselector)
);

stream_lb_val_0_dbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_0_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_0_data_V_address0),
    .ce0(lb_val_0_data_V_ce0),
    .q0(lb_val_0_data_V_q0),
    .address1(lb_val_0_data_V_add_reg_815),
    .ce1(lb_val_0_data_V_ce1),
    .we1(lb_val_0_data_V_we1),
    .d1(tmp_data_V_4_reg_757)
);

stream_lb_val_0_dbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_1_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_1_data_V_address0),
    .ce0(lb_val_1_data_V_ce0),
    .q0(lb_val_1_data_V_q0),
    .address1(ap_reg_pp0_iter2_lb_val_1_data_V_add_reg_809),
    .ce1(lb_val_1_data_V_ce1),
    .we1(lb_val_1_data_V_we1),
    .d1(blurVal_data_V_2_reg_877)
);

stream_lb_val_0_kdEe #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_0_keep_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_0_keep_V_address0),
    .ce0(lb_val_0_keep_V_ce0),
    .q0(lb_val_0_keep_V_q0),
    .address1(lb_val_0_keep_V_add_reg_821),
    .ce1(lb_val_0_keep_V_ce1),
    .we1(lb_val_0_keep_V_we1),
    .d1(tmp_keep_V_reg_763)
);

stream_lb_val_1_keOg #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_1_keep_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address1(lb_val_1_keep_V_address1),
    .ce1(lb_val_1_keep_V_ce1),
    .we1(lb_val_1_keep_V_we1),
    .d1(blurVal_keep_V_1_reg_882)
);

stream_lb_val_0_kdEe #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_0_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_0_strb_V_address0),
    .ce0(lb_val_0_strb_V_ce0),
    .q0(lb_val_0_strb_V_q0),
    .address1(lb_val_0_strb_V_add_reg_827),
    .ce1(lb_val_0_strb_V_ce1),
    .we1(lb_val_0_strb_V_we1),
    .d1(tmp_strb_V_reg_769)
);

stream_lb_val_1_keOg #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_1_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address1(lb_val_1_strb_V_address1),
    .ce1(lb_val_1_strb_V_ce1),
    .we1(lb_val_1_strb_V_we1),
    .d1(blurVal_strb_V_1_reg_887)
);

stream_lb_val_0_uhbi #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_0_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_0_user_V_address0),
    .ce0(lb_val_0_user_V_ce0),
    .q0(lb_val_0_user_V_q0),
    .address1(lb_val_0_user_V_add_reg_833),
    .ce1(lb_val_0_user_V_ce1),
    .we1(lb_val_0_user_V_we1),
    .d1(tmp_user_V_reg_775)
);

stream_lb_val_1_uibs #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_1_user_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address1(lb_val_1_user_V_address1),
    .ce1(lb_val_1_user_V_ce1),
    .we1(lb_val_1_user_V_we1),
    .d1(blurVal_user_V_1_reg_892)
);

stream_lb_val_0_uhbi #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_0_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_0_last_V_address0),
    .ce0(lb_val_0_last_V_ce0),
    .q0(lb_val_0_last_V_q0),
    .address1(lb_val_0_last_V_add_reg_839),
    .ce1(lb_val_0_last_V_ce1),
    .we1(lb_val_0_last_V_we1),
    .d1(tmp_last_V_reg_781)
);

stream_lb_val_1_uibs #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_1_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address1(lb_val_1_last_V_address1),
    .ce1(lb_val_1_last_V_ce1),
    .we1(lb_val_1_last_V_we1),
    .d1(blurVal_last_V_1_reg_897)
);

stream_lb_val_0_uhbi #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_0_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_0_id_V_address0),
    .ce0(lb_val_0_id_V_ce0),
    .q0(lb_val_0_id_V_q0),
    .address1(lb_val_0_id_V_addr_reg_845),
    .ce1(lb_val_0_id_V_ce1),
    .we1(lb_val_0_id_V_we1),
    .d1(tmp_id_V_reg_787)
);

stream_lb_val_1_uibs #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_1_id_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address1(lb_val_1_id_V_address1),
    .ce1(lb_val_1_id_V_ce1),
    .we1(lb_val_1_id_V_we1),
    .d1(blurVal_id_V_1_reg_902)
);

stream_lb_val_0_uhbi #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_0_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(lb_val_0_dest_V_address0),
    .ce0(lb_val_0_dest_V_ce0),
    .q0(lb_val_0_dest_V_q0),
    .address1(lb_val_0_dest_V_add_reg_851),
    .ce1(lb_val_0_dest_V_ce1),
    .we1(lb_val_0_dest_V_we1),
    .d1(tmp_dest_V_reg_793)
);

stream_lb_val_1_uibs #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
lb_val_1_dest_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address1(lb_val_1_dest_V_address1),
    .ce1(lb_val_1_dest_V_ce1),
    .we1(lb_val_1_dest_V_we1),
    .d1(blurVal_dest_V_1_reg_907)
);

stream_mul_32s_26pcA #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 26 ),
    .dout_WIDTH( 32 ))
stream_mul_32s_26pcA_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(streamOut_data_V_3_reg_912),
    .din1(grp_fu_658_p1),
    .ce(grp_fu_658_ce),
    .dout(grp_fu_658_p2)
);

stream_mul_32s_18qcK #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 32 ))
stream_mul_32s_18qcK_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(streamOut_data_V_3_reg_912),
    .din1(grp_fu_663_p1),
    .ce(grp_fu_663_ce),
    .dout(grp_fu_663_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_data_V_1_ack_out == 1'b1) & (dst_V_data_V_1_vld_out == 1'b1))) begin
            dst_V_data_V_1_sel_rd <= ~dst_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_data_V_1_ack_in == 1'b1) & (dst_V_data_V_1_vld_in == 1'b1))) begin
            dst_V_data_V_1_sel_wr <= ~dst_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_data_V_1_state == 2'd2) & (dst_V_data_V_1_vld_in == 1'b0)) | ((dst_V_data_V_1_state == 2'd3) & (dst_V_data_V_1_vld_in == 1'b0) & (dst_V_data_V_1_ack_out == 1'b1)))) begin
            dst_V_data_V_1_state <= 2'd2;
        end else if ((((dst_V_data_V_1_state == 2'd1) & (dst_V_data_V_1_ack_out == 1'b0)) | ((dst_V_data_V_1_state == 2'd3) & (dst_V_data_V_1_ack_out == 1'b0) & (dst_V_data_V_1_vld_in == 1'b1)))) begin
            dst_V_data_V_1_state <= 2'd1;
        end else if (((~((dst_V_data_V_1_vld_in == 1'b0) & (dst_V_data_V_1_ack_out == 1'b1)) & ~((dst_V_data_V_1_ack_out == 1'b0) & (dst_V_data_V_1_vld_in == 1'b1)) & (dst_V_data_V_1_state == 2'd3)) | ((dst_V_data_V_1_state == 2'd1) & (dst_V_data_V_1_ack_out == 1'b1)) | ((dst_V_data_V_1_state == 2'd2) & (dst_V_data_V_1_vld_in == 1'b1)))) begin
            dst_V_data_V_1_state <= 2'd3;
        end else begin
            dst_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_dest_V_1_ack_out == 1'b1) & (dst_V_dest_V_1_vld_out == 1'b1))) begin
            dst_V_dest_V_1_sel_rd <= ~dst_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_dest_V_1_ack_in == 1'b1) & (dst_V_dest_V_1_vld_in == 1'b1))) begin
            dst_V_dest_V_1_sel_wr <= ~dst_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_dest_V_1_state == 2'd2) & (dst_V_dest_V_1_vld_in == 1'b0)) | ((dst_V_dest_V_1_state == 2'd3) & (dst_V_dest_V_1_vld_in == 1'b0) & (dst_V_dest_V_1_ack_out == 1'b1)))) begin
            dst_V_dest_V_1_state <= 2'd2;
        end else if ((((dst_V_dest_V_1_state == 2'd1) & (dst_V_dest_V_1_ack_out == 1'b0)) | ((dst_V_dest_V_1_state == 2'd3) & (dst_V_dest_V_1_ack_out == 1'b0) & (dst_V_dest_V_1_vld_in == 1'b1)))) begin
            dst_V_dest_V_1_state <= 2'd1;
        end else if (((~((dst_V_dest_V_1_vld_in == 1'b0) & (dst_V_dest_V_1_ack_out == 1'b1)) & ~((dst_V_dest_V_1_ack_out == 1'b0) & (dst_V_dest_V_1_vld_in == 1'b1)) & (dst_V_dest_V_1_state == 2'd3)) | ((dst_V_dest_V_1_state == 2'd1) & (dst_V_dest_V_1_ack_out == 1'b1)) | ((dst_V_dest_V_1_state == 2'd2) & (dst_V_dest_V_1_vld_in == 1'b1)))) begin
            dst_V_dest_V_1_state <= 2'd3;
        end else begin
            dst_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_id_V_1_ack_out == 1'b1) & (dst_V_id_V_1_vld_out == 1'b1))) begin
            dst_V_id_V_1_sel_rd <= ~dst_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_id_V_1_ack_in == 1'b1) & (dst_V_id_V_1_vld_in == 1'b1))) begin
            dst_V_id_V_1_sel_wr <= ~dst_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_id_V_1_state == 2'd2) & (dst_V_id_V_1_vld_in == 1'b0)) | ((dst_V_id_V_1_state == 2'd3) & (dst_V_id_V_1_vld_in == 1'b0) & (dst_V_id_V_1_ack_out == 1'b1)))) begin
            dst_V_id_V_1_state <= 2'd2;
        end else if ((((dst_V_id_V_1_state == 2'd1) & (dst_V_id_V_1_ack_out == 1'b0)) | ((dst_V_id_V_1_state == 2'd3) & (dst_V_id_V_1_ack_out == 1'b0) & (dst_V_id_V_1_vld_in == 1'b1)))) begin
            dst_V_id_V_1_state <= 2'd1;
        end else if (((~((dst_V_id_V_1_vld_in == 1'b0) & (dst_V_id_V_1_ack_out == 1'b1)) & ~((dst_V_id_V_1_ack_out == 1'b0) & (dst_V_id_V_1_vld_in == 1'b1)) & (dst_V_id_V_1_state == 2'd3)) | ((dst_V_id_V_1_state == 2'd1) & (dst_V_id_V_1_ack_out == 1'b1)) | ((dst_V_id_V_1_state == 2'd2) & (dst_V_id_V_1_vld_in == 1'b1)))) begin
            dst_V_id_V_1_state <= 2'd3;
        end else begin
            dst_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_keep_V_1_ack_out == 1'b1) & (dst_V_keep_V_1_vld_out == 1'b1))) begin
            dst_V_keep_V_1_sel_rd <= ~dst_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_keep_V_1_ack_in == 1'b1) & (dst_V_keep_V_1_vld_in == 1'b1))) begin
            dst_V_keep_V_1_sel_wr <= ~dst_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_keep_V_1_state == 2'd2) & (dst_V_keep_V_1_vld_in == 1'b0)) | ((dst_V_keep_V_1_state == 2'd3) & (dst_V_keep_V_1_vld_in == 1'b0) & (dst_V_keep_V_1_ack_out == 1'b1)))) begin
            dst_V_keep_V_1_state <= 2'd2;
        end else if ((((dst_V_keep_V_1_state == 2'd1) & (dst_V_keep_V_1_ack_out == 1'b0)) | ((dst_V_keep_V_1_state == 2'd3) & (dst_V_keep_V_1_ack_out == 1'b0) & (dst_V_keep_V_1_vld_in == 1'b1)))) begin
            dst_V_keep_V_1_state <= 2'd1;
        end else if (((~((dst_V_keep_V_1_vld_in == 1'b0) & (dst_V_keep_V_1_ack_out == 1'b1)) & ~((dst_V_keep_V_1_ack_out == 1'b0) & (dst_V_keep_V_1_vld_in == 1'b1)) & (dst_V_keep_V_1_state == 2'd3)) | ((dst_V_keep_V_1_state == 2'd1) & (dst_V_keep_V_1_ack_out == 1'b1)) | ((dst_V_keep_V_1_state == 2'd2) & (dst_V_keep_V_1_vld_in == 1'b1)))) begin
            dst_V_keep_V_1_state <= 2'd3;
        end else begin
            dst_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_last_V_1_ack_out == 1'b1) & (dst_V_last_V_1_vld_out == 1'b1))) begin
            dst_V_last_V_1_sel_rd <= ~dst_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_last_V_1_ack_in == 1'b1) & (dst_V_last_V_1_vld_in == 1'b1))) begin
            dst_V_last_V_1_sel_wr <= ~dst_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_last_V_1_state == 2'd2) & (dst_V_last_V_1_vld_in == 1'b0)) | ((dst_V_last_V_1_state == 2'd3) & (dst_V_last_V_1_vld_in == 1'b0) & (dst_V_last_V_1_ack_out == 1'b1)))) begin
            dst_V_last_V_1_state <= 2'd2;
        end else if ((((dst_V_last_V_1_state == 2'd1) & (dst_V_last_V_1_ack_out == 1'b0)) | ((dst_V_last_V_1_state == 2'd3) & (dst_V_last_V_1_ack_out == 1'b0) & (dst_V_last_V_1_vld_in == 1'b1)))) begin
            dst_V_last_V_1_state <= 2'd1;
        end else if (((~((dst_V_last_V_1_vld_in == 1'b0) & (dst_V_last_V_1_ack_out == 1'b1)) & ~((dst_V_last_V_1_ack_out == 1'b0) & (dst_V_last_V_1_vld_in == 1'b1)) & (dst_V_last_V_1_state == 2'd3)) | ((dst_V_last_V_1_state == 2'd1) & (dst_V_last_V_1_ack_out == 1'b1)) | ((dst_V_last_V_1_state == 2'd2) & (dst_V_last_V_1_vld_in == 1'b1)))) begin
            dst_V_last_V_1_state <= 2'd3;
        end else begin
            dst_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_strb_V_1_ack_out == 1'b1) & (dst_V_strb_V_1_vld_out == 1'b1))) begin
            dst_V_strb_V_1_sel_rd <= ~dst_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_strb_V_1_ack_in == 1'b1) & (dst_V_strb_V_1_vld_in == 1'b1))) begin
            dst_V_strb_V_1_sel_wr <= ~dst_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_strb_V_1_state == 2'd2) & (dst_V_strb_V_1_vld_in == 1'b0)) | ((dst_V_strb_V_1_state == 2'd3) & (dst_V_strb_V_1_vld_in == 1'b0) & (dst_V_strb_V_1_ack_out == 1'b1)))) begin
            dst_V_strb_V_1_state <= 2'd2;
        end else if ((((dst_V_strb_V_1_state == 2'd1) & (dst_V_strb_V_1_ack_out == 1'b0)) | ((dst_V_strb_V_1_state == 2'd3) & (dst_V_strb_V_1_ack_out == 1'b0) & (dst_V_strb_V_1_vld_in == 1'b1)))) begin
            dst_V_strb_V_1_state <= 2'd1;
        end else if (((~((dst_V_strb_V_1_vld_in == 1'b0) & (dst_V_strb_V_1_ack_out == 1'b1)) & ~((dst_V_strb_V_1_ack_out == 1'b0) & (dst_V_strb_V_1_vld_in == 1'b1)) & (dst_V_strb_V_1_state == 2'd3)) | ((dst_V_strb_V_1_state == 2'd1) & (dst_V_strb_V_1_ack_out == 1'b1)) | ((dst_V_strb_V_1_state == 2'd2) & (dst_V_strb_V_1_vld_in == 1'b1)))) begin
            dst_V_strb_V_1_state <= 2'd3;
        end else begin
            dst_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_user_V_1_ack_out == 1'b1) & (dst_V_user_V_1_vld_out == 1'b1))) begin
            dst_V_user_V_1_sel_rd <= ~dst_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_user_V_1_ack_in == 1'b1) & (dst_V_user_V_1_vld_in == 1'b1))) begin
            dst_V_user_V_1_sel_wr <= ~dst_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_user_V_1_state == 2'd2) & (dst_V_user_V_1_vld_in == 1'b0)) | ((dst_V_user_V_1_state == 2'd3) & (dst_V_user_V_1_vld_in == 1'b0) & (dst_V_user_V_1_ack_out == 1'b1)))) begin
            dst_V_user_V_1_state <= 2'd2;
        end else if ((((dst_V_user_V_1_state == 2'd1) & (dst_V_user_V_1_ack_out == 1'b0)) | ((dst_V_user_V_1_state == 2'd3) & (dst_V_user_V_1_ack_out == 1'b0) & (dst_V_user_V_1_vld_in == 1'b1)))) begin
            dst_V_user_V_1_state <= 2'd1;
        end else if (((~((dst_V_user_V_1_vld_in == 1'b0) & (dst_V_user_V_1_ack_out == 1'b1)) & ~((dst_V_user_V_1_ack_out == 1'b0) & (dst_V_user_V_1_vld_in == 1'b1)) & (dst_V_user_V_1_state == 2'd3)) | ((dst_V_user_V_1_state == 2'd1) & (dst_V_user_V_1_ack_out == 1'b1)) | ((dst_V_user_V_1_state == 2'd2) & (dst_V_user_V_1_vld_in == 1'b1)))) begin
            dst_V_user_V_1_state <= 2'd3;
        end else begin
            dst_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_data_V_0_ack_out == 1'b1) & (src_V_data_V_0_vld_out == 1'b1))) begin
            src_V_data_V_0_sel_rd <= ~src_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_data_V_0_ack_in == 1'b1) & (src_V_data_V_0_vld_in == 1'b1))) begin
            src_V_data_V_0_sel_wr <= ~src_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_data_V_0_vld_in == 1'b0) & (src_V_data_V_0_state == 2'd2)) | ((src_V_data_V_0_vld_in == 1'b0) & (src_V_data_V_0_state == 2'd3) & (src_V_data_V_0_ack_out == 1'b1)))) begin
            src_V_data_V_0_state <= 2'd2;
        end else if ((((src_V_data_V_0_ack_out == 1'b0) & (src_V_data_V_0_state == 2'd1)) | ((src_V_data_V_0_ack_out == 1'b0) & (src_V_data_V_0_state == 2'd3) & (src_V_data_V_0_vld_in == 1'b1)))) begin
            src_V_data_V_0_state <= 2'd1;
        end else if (((~((src_V_data_V_0_vld_in == 1'b0) & (src_V_data_V_0_ack_out == 1'b1)) & ~((src_V_data_V_0_ack_out == 1'b0) & (src_V_data_V_0_vld_in == 1'b1)) & (src_V_data_V_0_state == 2'd3)) | ((src_V_data_V_0_state == 2'd1) & (src_V_data_V_0_ack_out == 1'b1)) | ((src_V_data_V_0_state == 2'd2) & (src_V_data_V_0_vld_in == 1'b1)))) begin
            src_V_data_V_0_state <= 2'd3;
        end else begin
            src_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_dest_V_0_ack_out == 1'b1) & (src_V_dest_V_0_vld_out == 1'b1))) begin
            src_V_dest_V_0_sel_rd <= ~src_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_dest_V_0_ack_in == 1'b1) & (src_V_dest_V_0_vld_in == 1'b1))) begin
            src_V_dest_V_0_sel_wr <= ~src_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_dest_V_0_state == 2'd2) & (src_V_dest_V_0_vld_in == 1'b0)) | ((src_V_dest_V_0_state == 2'd3) & (src_V_dest_V_0_vld_in == 1'b0) & (src_V_dest_V_0_ack_out == 1'b1)))) begin
            src_V_dest_V_0_state <= 2'd2;
        end else if ((((src_V_dest_V_0_state == 2'd1) & (src_V_dest_V_0_ack_out == 1'b0)) | ((src_V_dest_V_0_state == 2'd3) & (src_V_dest_V_0_ack_out == 1'b0) & (src_V_dest_V_0_vld_in == 1'b1)))) begin
            src_V_dest_V_0_state <= 2'd1;
        end else if (((~((src_V_dest_V_0_vld_in == 1'b0) & (src_V_dest_V_0_ack_out == 1'b1)) & ~((src_V_dest_V_0_ack_out == 1'b0) & (src_V_dest_V_0_vld_in == 1'b1)) & (src_V_dest_V_0_state == 2'd3)) | ((src_V_dest_V_0_state == 2'd1) & (src_V_dest_V_0_ack_out == 1'b1)) | ((src_V_dest_V_0_state == 2'd2) & (src_V_dest_V_0_vld_in == 1'b1)))) begin
            src_V_dest_V_0_state <= 2'd3;
        end else begin
            src_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_id_V_0_ack_out == 1'b1) & (src_V_id_V_0_vld_out == 1'b1))) begin
            src_V_id_V_0_sel_rd <= ~src_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_id_V_0_ack_in == 1'b1) & (src_V_id_V_0_vld_in == 1'b1))) begin
            src_V_id_V_0_sel_wr <= ~src_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_id_V_0_state == 2'd2) & (src_V_id_V_0_vld_in == 1'b0)) | ((src_V_id_V_0_state == 2'd3) & (src_V_id_V_0_vld_in == 1'b0) & (src_V_id_V_0_ack_out == 1'b1)))) begin
            src_V_id_V_0_state <= 2'd2;
        end else if ((((src_V_id_V_0_state == 2'd1) & (src_V_id_V_0_ack_out == 1'b0)) | ((src_V_id_V_0_state == 2'd3) & (src_V_id_V_0_ack_out == 1'b0) & (src_V_id_V_0_vld_in == 1'b1)))) begin
            src_V_id_V_0_state <= 2'd1;
        end else if (((~((src_V_id_V_0_vld_in == 1'b0) & (src_V_id_V_0_ack_out == 1'b1)) & ~((src_V_id_V_0_ack_out == 1'b0) & (src_V_id_V_0_vld_in == 1'b1)) & (src_V_id_V_0_state == 2'd3)) | ((src_V_id_V_0_state == 2'd1) & (src_V_id_V_0_ack_out == 1'b1)) | ((src_V_id_V_0_state == 2'd2) & (src_V_id_V_0_vld_in == 1'b1)))) begin
            src_V_id_V_0_state <= 2'd3;
        end else begin
            src_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_keep_V_0_ack_out == 1'b1) & (src_V_keep_V_0_vld_out == 1'b1))) begin
            src_V_keep_V_0_sel_rd <= ~src_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_keep_V_0_ack_in == 1'b1) & (src_V_keep_V_0_vld_in == 1'b1))) begin
            src_V_keep_V_0_sel_wr <= ~src_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_keep_V_0_state == 2'd2) & (src_V_keep_V_0_vld_in == 1'b0)) | ((src_V_keep_V_0_state == 2'd3) & (src_V_keep_V_0_vld_in == 1'b0) & (src_V_keep_V_0_ack_out == 1'b1)))) begin
            src_V_keep_V_0_state <= 2'd2;
        end else if ((((src_V_keep_V_0_state == 2'd3) & (src_V_keep_V_0_ack_out == 1'b0) & (src_V_keep_V_0_vld_in == 1'b1)) | ((src_V_keep_V_0_state == 2'd1) & (src_V_keep_V_0_ack_out == 1'b0)))) begin
            src_V_keep_V_0_state <= 2'd1;
        end else if ((((src_V_keep_V_0_state == 2'd2) & (src_V_keep_V_0_vld_in == 1'b1)) | (~((src_V_keep_V_0_vld_in == 1'b0) & (src_V_keep_V_0_ack_out == 1'b1)) & ~((src_V_keep_V_0_ack_out == 1'b0) & (src_V_keep_V_0_vld_in == 1'b1)) & (src_V_keep_V_0_state == 2'd3)) | ((src_V_keep_V_0_state == 2'd1) & (src_V_keep_V_0_ack_out == 1'b1)))) begin
            src_V_keep_V_0_state <= 2'd3;
        end else begin
            src_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_last_V_0_ack_out == 1'b1) & (src_V_last_V_0_vld_out == 1'b1))) begin
            src_V_last_V_0_sel_rd <= ~src_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_last_V_0_ack_in == 1'b1) & (src_V_last_V_0_vld_in == 1'b1))) begin
            src_V_last_V_0_sel_wr <= ~src_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_last_V_0_state == 2'd2) & (src_V_last_V_0_vld_in == 1'b0)) | ((src_V_last_V_0_state == 2'd3) & (src_V_last_V_0_vld_in == 1'b0) & (src_V_last_V_0_ack_out == 1'b1)))) begin
            src_V_last_V_0_state <= 2'd2;
        end else if ((((src_V_last_V_0_state == 2'd1) & (src_V_last_V_0_ack_out == 1'b0)) | ((src_V_last_V_0_state == 2'd3) & (src_V_last_V_0_ack_out == 1'b0) & (src_V_last_V_0_vld_in == 1'b1)))) begin
            src_V_last_V_0_state <= 2'd1;
        end else if (((~((src_V_last_V_0_vld_in == 1'b0) & (src_V_last_V_0_ack_out == 1'b1)) & ~((src_V_last_V_0_ack_out == 1'b0) & (src_V_last_V_0_vld_in == 1'b1)) & (src_V_last_V_0_state == 2'd3)) | ((src_V_last_V_0_state == 2'd1) & (src_V_last_V_0_ack_out == 1'b1)) | ((src_V_last_V_0_state == 2'd2) & (src_V_last_V_0_vld_in == 1'b1)))) begin
            src_V_last_V_0_state <= 2'd3;
        end else begin
            src_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_strb_V_0_ack_out == 1'b1) & (src_V_strb_V_0_vld_out == 1'b1))) begin
            src_V_strb_V_0_sel_rd <= ~src_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_strb_V_0_ack_in == 1'b1) & (src_V_strb_V_0_vld_in == 1'b1))) begin
            src_V_strb_V_0_sel_wr <= ~src_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_strb_V_0_state == 2'd2) & (src_V_strb_V_0_vld_in == 1'b0)) | ((src_V_strb_V_0_state == 2'd3) & (src_V_strb_V_0_vld_in == 1'b0) & (src_V_strb_V_0_ack_out == 1'b1)))) begin
            src_V_strb_V_0_state <= 2'd2;
        end else if ((((src_V_strb_V_0_state == 2'd1) & (src_V_strb_V_0_ack_out == 1'b0)) | ((src_V_strb_V_0_state == 2'd3) & (src_V_strb_V_0_ack_out == 1'b0) & (src_V_strb_V_0_vld_in == 1'b1)))) begin
            src_V_strb_V_0_state <= 2'd1;
        end else if (((~((src_V_strb_V_0_vld_in == 1'b0) & (src_V_strb_V_0_ack_out == 1'b1)) & ~((src_V_strb_V_0_ack_out == 1'b0) & (src_V_strb_V_0_vld_in == 1'b1)) & (src_V_strb_V_0_state == 2'd3)) | ((src_V_strb_V_0_state == 2'd1) & (src_V_strb_V_0_ack_out == 1'b1)) | ((src_V_strb_V_0_state == 2'd2) & (src_V_strb_V_0_vld_in == 1'b1)))) begin
            src_V_strb_V_0_state <= 2'd3;
        end else begin
            src_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_user_V_0_ack_out == 1'b1) & (src_V_user_V_0_vld_out == 1'b1))) begin
            src_V_user_V_0_sel_rd <= ~src_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_user_V_0_ack_in == 1'b1) & (src_V_user_V_0_vld_in == 1'b1))) begin
            src_V_user_V_0_sel_wr <= ~src_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_user_V_0_state == 2'd2) & (src_V_user_V_0_vld_in == 1'b0)) | ((src_V_user_V_0_state == 2'd3) & (src_V_user_V_0_vld_in == 1'b0) & (src_V_user_V_0_ack_out == 1'b1)))) begin
            src_V_user_V_0_state <= 2'd2;
        end else if ((((src_V_user_V_0_state == 2'd1) & (src_V_user_V_0_ack_out == 1'b0)) | ((src_V_user_V_0_state == 2'd3) & (src_V_user_V_0_ack_out == 1'b0) & (src_V_user_V_0_vld_in == 1'b1)))) begin
            src_V_user_V_0_state <= 2'd1;
        end else if (((~((src_V_user_V_0_vld_in == 1'b0) & (src_V_user_V_0_ack_out == 1'b1)) & ~((src_V_user_V_0_ack_out == 1'b0) & (src_V_user_V_0_vld_in == 1'b1)) & (src_V_user_V_0_state == 2'd3)) | ((src_V_user_V_0_state == 2'd1) & (src_V_user_V_0_ack_out == 1'b1)) | ((src_V_user_V_0_state == 2'd2) & (src_V_user_V_0_vld_in == 1'b1)))) begin
            src_V_user_V_0_state <= 2'd3;
        end else begin
            src_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        cols_reg_441 <= cols_1_reg_872;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        cols_reg_441 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_fu_506_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixels_reg_453 <= pixels_1_fu_512_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        pixels_reg_453 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        rows_reg_429 <= rows_1_reg_867;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        rows_reg_429 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_tmp_2_reg_748 <= tmp_2_reg_748;
        tmp_2_reg_748 <= tmp_2_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_lb_val_1_data_V_add_reg_809 <= lb_val_1_data_V_add_reg_809;
        ap_reg_pp0_iter2_tmp_2_reg_748 <= ap_reg_pp0_iter1_tmp_2_reg_748;
        ap_reg_pp0_iter2_tmp_6_reg_799[15 : 0] <= tmp_6_reg_799[15 : 0];
        ap_reg_pp0_iter2_tmp_dest_V_reg_793 <= tmp_dest_V_reg_793;
        ap_reg_pp0_iter2_tmp_id_V_reg_787 <= tmp_id_V_reg_787;
        ap_reg_pp0_iter2_tmp_keep_V_reg_763 <= tmp_keep_V_reg_763;
        ap_reg_pp0_iter2_tmp_last_V_reg_781 <= tmp_last_V_reg_781;
        ap_reg_pp0_iter2_tmp_strb_V_reg_769 <= tmp_strb_V_reg_769;
        ap_reg_pp0_iter2_tmp_user_V_reg_775 <= tmp_user_V_reg_775;
        ap_reg_pp0_iter3_streamOut_data_V_3_reg_912 <= streamOut_data_V_3_reg_912;
        ap_reg_pp0_iter3_tmp_2_reg_748 <= ap_reg_pp0_iter2_tmp_2_reg_748;
        ap_reg_pp0_iter3_tmp_dest_V_reg_793 <= ap_reg_pp0_iter2_tmp_dest_V_reg_793;
        ap_reg_pp0_iter3_tmp_id_V_reg_787 <= ap_reg_pp0_iter2_tmp_id_V_reg_787;
        ap_reg_pp0_iter3_tmp_keep_V_reg_763 <= ap_reg_pp0_iter2_tmp_keep_V_reg_763;
        ap_reg_pp0_iter3_tmp_last_V_reg_781 <= ap_reg_pp0_iter2_tmp_last_V_reg_781;
        ap_reg_pp0_iter3_tmp_strb_V_reg_769 <= ap_reg_pp0_iter2_tmp_strb_V_reg_769;
        ap_reg_pp0_iter3_tmp_user_V_reg_775 <= ap_reg_pp0_iter2_tmp_user_V_reg_775;
        ap_reg_pp0_iter4_streamOut_data_V_3_reg_912 <= ap_reg_pp0_iter3_streamOut_data_V_3_reg_912;
        ap_reg_pp0_iter4_tmp_2_reg_748 <= ap_reg_pp0_iter3_tmp_2_reg_748;
        ap_reg_pp0_iter4_tmp_dest_V_reg_793 <= ap_reg_pp0_iter3_tmp_dest_V_reg_793;
        ap_reg_pp0_iter4_tmp_id_V_reg_787 <= ap_reg_pp0_iter3_tmp_id_V_reg_787;
        ap_reg_pp0_iter4_tmp_keep_V_reg_763 <= ap_reg_pp0_iter3_tmp_keep_V_reg_763;
        ap_reg_pp0_iter4_tmp_last_V_reg_781 <= ap_reg_pp0_iter3_tmp_last_V_reg_781;
        ap_reg_pp0_iter4_tmp_strb_V_reg_769 <= ap_reg_pp0_iter3_tmp_strb_V_reg_769;
        ap_reg_pp0_iter4_tmp_user_V_reg_775 <= ap_reg_pp0_iter3_tmp_user_V_reg_775;
        ap_reg_pp0_iter5_streamOut_data_V_3_reg_912 <= ap_reg_pp0_iter4_streamOut_data_V_3_reg_912;
        ap_reg_pp0_iter5_tmp_2_reg_748 <= ap_reg_pp0_iter4_tmp_2_reg_748;
        ap_reg_pp0_iter5_tmp_dest_V_reg_793 <= ap_reg_pp0_iter4_tmp_dest_V_reg_793;
        ap_reg_pp0_iter5_tmp_id_V_reg_787 <= ap_reg_pp0_iter4_tmp_id_V_reg_787;
        ap_reg_pp0_iter5_tmp_keep_V_reg_763 <= ap_reg_pp0_iter4_tmp_keep_V_reg_763;
        ap_reg_pp0_iter5_tmp_last_V_reg_781 <= ap_reg_pp0_iter4_tmp_last_V_reg_781;
        ap_reg_pp0_iter5_tmp_strb_V_reg_769 <= ap_reg_pp0_iter4_tmp_strb_V_reg_769;
        ap_reg_pp0_iter5_tmp_user_V_reg_775 <= ap_reg_pp0_iter4_tmp_user_V_reg_775;
        ap_reg_pp0_iter6_tmp_2_reg_748 <= ap_reg_pp0_iter5_tmp_2_reg_748;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        blurVal_data_V_2_reg_877 <= lb_val_0_data_V_q0;
        blurVal_dest_V_1_reg_907 <= lb_val_0_dest_V_q0;
        blurVal_id_V_1_reg_902 <= lb_val_0_id_V_q0;
        blurVal_keep_V_1_reg_882 <= lb_val_0_keep_V_q0;
        blurVal_last_V_1_reg_897 <= lb_val_0_last_V_q0;
        blurVal_strb_V_1_reg_887 <= lb_val_0_strb_V_q0;
        blurVal_user_V_1_reg_892 <= lb_val_0_user_V_q0;
        outputPxl_fu_118 <= streamOut_data_V_3_fu_645_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cols_1_reg_872 <= cols_1_fu_610_p3;
        rows_1_reg_867 <= rows_1_fu_602_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_data_V_1_load_A == 1'b1)) begin
        dst_V_data_V_1_payload_A <= tmp_data_V_2_fu_689_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_data_V_1_load_B == 1'b1)) begin
        dst_V_data_V_1_payload_B <= tmp_data_V_2_fu_689_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_dest_V_1_load_A == 1'b1)) begin
        dst_V_dest_V_1_payload_A <= ap_reg_pp0_iter5_tmp_dest_V_reg_793;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_dest_V_1_load_B == 1'b1)) begin
        dst_V_dest_V_1_payload_B <= ap_reg_pp0_iter5_tmp_dest_V_reg_793;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_id_V_1_load_A == 1'b1)) begin
        dst_V_id_V_1_payload_A <= ap_reg_pp0_iter5_tmp_id_V_reg_787;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_id_V_1_load_B == 1'b1)) begin
        dst_V_id_V_1_payload_B <= ap_reg_pp0_iter5_tmp_id_V_reg_787;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_keep_V_1_load_A == 1'b1)) begin
        dst_V_keep_V_1_payload_A <= ap_reg_pp0_iter5_tmp_keep_V_reg_763;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_keep_V_1_load_B == 1'b1)) begin
        dst_V_keep_V_1_payload_B <= ap_reg_pp0_iter5_tmp_keep_V_reg_763;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_last_V_1_load_A == 1'b1)) begin
        dst_V_last_V_1_payload_A <= ap_reg_pp0_iter5_tmp_last_V_reg_781;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_last_V_1_load_B == 1'b1)) begin
        dst_V_last_V_1_payload_B <= ap_reg_pp0_iter5_tmp_last_V_reg_781;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_strb_V_1_load_A == 1'b1)) begin
        dst_V_strb_V_1_payload_A <= ap_reg_pp0_iter5_tmp_strb_V_reg_769;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_strb_V_1_load_B == 1'b1)) begin
        dst_V_strb_V_1_payload_B <= ap_reg_pp0_iter5_tmp_strb_V_reg_769;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_user_V_1_load_A == 1'b1)) begin
        dst_V_user_V_1_payload_A <= ap_reg_pp0_iter5_tmp_user_V_reg_775;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_user_V_1_load_B == 1'b1)) begin
        dst_V_user_V_1_payload_B <= ap_reg_pp0_iter5_tmp_user_V_reg_775;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_748 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp5_reg_862 <= icmp5_fu_584_p2;
        icmp_reg_857 <= icmp_fu_568_p2;
        lb_val_0_data_V_add_reg_815 <= tmp_6_fu_546_p1;
        lb_val_0_dest_V_add_reg_851 <= tmp_6_fu_546_p1;
        lb_val_0_id_V_addr_reg_845 <= tmp_6_fu_546_p1;
        lb_val_0_keep_V_add_reg_821 <= tmp_6_fu_546_p1;
        lb_val_0_last_V_add_reg_839 <= tmp_6_fu_546_p1;
        lb_val_0_strb_V_add_reg_827 <= tmp_6_fu_546_p1;
        lb_val_0_user_V_add_reg_833 <= tmp_6_fu_546_p1;
        lb_val_1_data_V_add_reg_809 <= tmp_6_fu_546_p1;
        tmp_6_reg_799[15 : 0] <= tmp_6_fu_546_p1[15 : 0];
        tmp_data_V_4_reg_757 <= src_V_data_V_0_data_out;
        tmp_dest_V_reg_793 <= src_V_dest_V_0_data_out;
        tmp_id_V_reg_787 <= src_V_id_V_0_data_out;
        tmp_keep_V_reg_763 <= src_V_keep_V_0_data_out;
        tmp_last_V_reg_781 <= src_V_last_V_0_data_out;
        tmp_strb_V_reg_769 <= src_V_strb_V_0_data_out;
        tmp_user_V_reg_775 <= src_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_data_V_0_load_A == 1'b1)) begin
        src_V_data_V_0_payload_A <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_data_V_0_load_B == 1'b1)) begin
        src_V_data_V_0_payload_B <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_dest_V_0_load_A == 1'b1)) begin
        src_V_dest_V_0_payload_A <= src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_dest_V_0_load_B == 1'b1)) begin
        src_V_dest_V_0_payload_B <= src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_id_V_0_load_A == 1'b1)) begin
        src_V_id_V_0_payload_A <= src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_id_V_0_load_B == 1'b1)) begin
        src_V_id_V_0_payload_B <= src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_keep_V_0_load_A == 1'b1)) begin
        src_V_keep_V_0_payload_A <= src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_keep_V_0_load_B == 1'b1)) begin
        src_V_keep_V_0_payload_B <= src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_last_V_0_load_A == 1'b1)) begin
        src_V_last_V_0_payload_A <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_last_V_0_load_B == 1'b1)) begin
        src_V_last_V_0_payload_B <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_strb_V_0_load_A == 1'b1)) begin
        src_V_strb_V_0_payload_A <= src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_strb_V_0_load_B == 1'b1)) begin
        src_V_strb_V_0_payload_B <= src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_user_V_0_load_A == 1'b1)) begin
        src_V_user_V_0_payload_A <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_user_V_0_load_B == 1'b1)) begin
        src_V_user_V_0_payload_B <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_9_reg_733 == 1'd1) & (ap_reg_pp0_iter4_tmp_2_reg_748 == 1'd0) & (tmp_1_reg_743 == 1'd0) & (tmp_s_reg_738 == 1'd0))) begin
        streamOut_data_V_1_reg_925 <= grp_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0))) begin
        streamOut_data_V_3_reg_912 <= streamOut_data_V_3_fu_645_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter4_tmp_2_reg_748 == 1'd0) & (tmp_1_reg_743 == 1'd0))) begin
        streamOut_data_V_reg_919 <= grp_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_1_reg_743 <= tmp_1_fu_500_p2;
        tmp_3_reg_713 <= tmp_3_fu_464_p2;
        tmp_4_reg_718 <= tmp_4_fu_470_p2;
        tmp_5_reg_723 <= tmp_5_fu_476_p2;
        tmp_8_reg_728 <= tmp_8_fu_482_p2;
        tmp_9_reg_733 <= tmp_9_fu_488_p2;
        tmp_s_reg_738 <= tmp_s_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        tmp_data_V_fu_114 <= tmp_data_V_2_fu_689_p3;
    end
end

always @ (*) begin
    if ((tmp_2_fu_506_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_cols_phi_fu_445_p4 = cols_1_reg_872;
    end else begin
        ap_phi_mux_cols_phi_fu_445_p4 = cols_reg_441;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_rows_phi_fu_433_p4 = rows_1_reg_867;
    end else begin
        ap_phi_mux_rows_phi_fu_433_p4 = rows_reg_429;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter6_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
        dst_TDATA_blk_n = dst_V_data_V_1_state[1'd1];
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((dst_V_data_V_1_sel == 1'b1)) begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_B;
    end else begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_V_data_V_1_vld_in = 1'b1;
    end else begin
        dst_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_dest_V_1_sel == 1'b1)) begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_B;
    end else begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_V_dest_V_1_vld_in = 1'b1;
    end else begin
        dst_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_id_V_1_sel == 1'b1)) begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_B;
    end else begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_V_id_V_1_vld_in = 1'b1;
    end else begin
        dst_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_keep_V_1_sel == 1'b1)) begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_B;
    end else begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_V_keep_V_1_vld_in = 1'b1;
    end else begin
        dst_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_last_V_1_sel == 1'b1)) begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_B;
    end else begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_V_last_V_1_vld_in = 1'b1;
    end else begin
        dst_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_strb_V_1_sel == 1'b1)) begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_B;
    end else begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_V_strb_V_1_vld_in = 1'b1;
    end else begin
        dst_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_user_V_1_sel == 1'b1)) begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_B;
    end else begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        dst_V_user_V_1_vld_in = 1'b1;
    end else begin
        dst_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_658_ce = 1'b1;
    end else begin
        grp_fu_658_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_663_ce = 1'b1;
    end else begin
        grp_fu_663_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_val_0_data_V_ce0 = 1'b1;
    end else begin
        lb_val_0_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_data_V_ce1 = 1'b1;
    end else begin
        lb_val_0_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_data_V_we1 = 1'b1;
    end else begin
        lb_val_0_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_val_0_dest_V_ce0 = 1'b1;
    end else begin
        lb_val_0_dest_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_dest_V_ce1 = 1'b1;
    end else begin
        lb_val_0_dest_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_dest_V_we1 = 1'b1;
    end else begin
        lb_val_0_dest_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_val_0_id_V_ce0 = 1'b1;
    end else begin
        lb_val_0_id_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_id_V_ce1 = 1'b1;
    end else begin
        lb_val_0_id_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_id_V_we1 = 1'b1;
    end else begin
        lb_val_0_id_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_val_0_keep_V_ce0 = 1'b1;
    end else begin
        lb_val_0_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_keep_V_ce1 = 1'b1;
    end else begin
        lb_val_0_keep_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_keep_V_we1 = 1'b1;
    end else begin
        lb_val_0_keep_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_val_0_last_V_ce0 = 1'b1;
    end else begin
        lb_val_0_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_last_V_ce1 = 1'b1;
    end else begin
        lb_val_0_last_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_last_V_we1 = 1'b1;
    end else begin
        lb_val_0_last_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_val_0_strb_V_ce0 = 1'b1;
    end else begin
        lb_val_0_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_strb_V_ce1 = 1'b1;
    end else begin
        lb_val_0_strb_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_strb_V_we1 = 1'b1;
    end else begin
        lb_val_0_strb_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_val_0_user_V_ce0 = 1'b1;
    end else begin
        lb_val_0_user_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_user_V_ce1 = 1'b1;
    end else begin
        lb_val_0_user_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        lb_val_0_user_V_we1 = 1'b1;
    end else begin
        lb_val_0_user_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lb_val_1_data_V_ce0 = 1'b1;
    end else begin
        lb_val_1_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_data_V_ce1 = 1'b1;
    end else begin
        lb_val_1_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_data_V_we1 = 1'b1;
    end else begin
        lb_val_1_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_dest_V_ce1 = 1'b1;
    end else begin
        lb_val_1_dest_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_dest_V_we1 = 1'b1;
    end else begin
        lb_val_1_dest_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_id_V_ce1 = 1'b1;
    end else begin
        lb_val_1_id_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_id_V_we1 = 1'b1;
    end else begin
        lb_val_1_id_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_keep_V_ce1 = 1'b1;
    end else begin
        lb_val_1_keep_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_keep_V_we1 = 1'b1;
    end else begin
        lb_val_1_keep_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_last_V_ce1 = 1'b1;
    end else begin
        lb_val_1_last_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_last_V_we1 = 1'b1;
    end else begin
        lb_val_1_last_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_strb_V_ce1 = 1'b1;
    end else begin
        lb_val_1_strb_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_strb_V_we1 = 1'b1;
    end else begin
        lb_val_1_strb_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_user_V_ce1 = 1'b1;
    end else begin
        lb_val_1_user_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter2_tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        lb_val_1_user_V_we1 = 1'b1;
    end else begin
        lb_val_1_user_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_TDATA_blk_n = src_V_data_V_0_state[1'd0];
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_data_V_0_ack_out = 1'b1;
    end else begin
        src_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_data_V_0_sel == 1'b1)) begin
        src_V_data_V_0_data_out = src_V_data_V_0_payload_B;
    end else begin
        src_V_data_V_0_data_out = src_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_dest_V_0_ack_out = 1'b1;
    end else begin
        src_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_dest_V_0_sel == 1'b1)) begin
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_B;
    end else begin
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_id_V_0_ack_out = 1'b1;
    end else begin
        src_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_id_V_0_sel == 1'b1)) begin
        src_V_id_V_0_data_out = src_V_id_V_0_payload_B;
    end else begin
        src_V_id_V_0_data_out = src_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_keep_V_0_ack_out = 1'b1;
    end else begin
        src_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_keep_V_0_sel == 1'b1)) begin
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_B;
    end else begin
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_last_V_0_ack_out = 1'b1;
    end else begin
        src_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_last_V_0_sel == 1'b1)) begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_B;
    end else begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_strb_V_0_ack_out = 1'b1;
    end else begin
        src_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_strb_V_0_sel == 1'b1)) begin
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_B;
    end else begin
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_748 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_V_user_V_0_ack_out = 1'b1;
    end else begin
        src_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_user_V_0_sel == 1'b1)) begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_B;
    end else begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_2_fu_506_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_2_fu_506_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((dst_V_dest_V_1_ack_in == 1'b0) | (dst_V_id_V_1_ack_in == 1'b0) | (dst_V_last_V_1_ack_in == 1'b0) | (dst_V_user_V_1_ack_in == 1'b0) | (dst_V_strb_V_1_ack_in == 1'b0) | (dst_V_keep_V_1_ack_in == 1'b0) | (dst_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((tmp_2_reg_748 == 1'd0) & (src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_2_reg_748 == 1'd0) & (src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_2_reg_748 == 1'd0) & (src_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state10 = ((dst_V_dest_V_1_ack_in == 1'b0) | (dst_V_id_V_1_ack_in == 1'b0) | (dst_V_last_V_1_ack_in == 1'b0) | (dst_V_user_V_1_ack_in == 1'b0) | (dst_V_strb_V_1_ack_in == 1'b0) | (dst_V_keep_V_1_ack_in == 1'b0) | (dst_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((tmp_2_reg_748 == 1'd0) & (src_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((ap_reg_pp0_iter5_tmp_2_reg_748 == 1'd0) & (dst_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((ap_reg_pp0_iter6_tmp_2_reg_748 == 1'd0) & (dst_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign blurVal_data_V_1_blu_fu_631_p3 = ((tmp_4_reg_718[0:0] === 1'b1) ? lb_val_0_data_V_q0 : blurVal_data_V_blurV_fu_625_p3);

assign blurVal_data_V_blurV_fu_625_p3 = ((tmp_3_reg_713[0:0] === 1'b1) ? tmp_data_V_4_reg_757 : outputPxl_fu_118);

assign cols_1_fu_610_p3 = ((src_V_last_V_0_data_out[0:0] === 1'b1) ? 16'd0 : cols_2_fu_596_p2);

assign cols_2_fu_596_p2 = (ap_phi_mux_cols_phi_fu_445_p4 + 16'd1);

assign dst_TDATA = dst_V_data_V_1_data_out;

assign dst_TDEST = dst_V_dest_V_1_data_out;

assign dst_TID = dst_V_id_V_1_data_out;

assign dst_TKEEP = dst_V_keep_V_1_data_out;

assign dst_TLAST = dst_V_last_V_1_data_out;

assign dst_TSTRB = dst_V_strb_V_1_data_out;

assign dst_TUSER = dst_V_user_V_1_data_out;

assign dst_TVALID = dst_V_dest_V_1_state[1'd0];

assign dst_V_data_V_1_ack_in = dst_V_data_V_1_state[1'd1];

assign dst_V_data_V_1_ack_out = dst_TREADY;

assign dst_V_data_V_1_load_A = (~dst_V_data_V_1_sel_wr & dst_V_data_V_1_state_cmp_full);

assign dst_V_data_V_1_load_B = (dst_V_data_V_1_state_cmp_full & dst_V_data_V_1_sel_wr);

assign dst_V_data_V_1_sel = dst_V_data_V_1_sel_rd;

assign dst_V_data_V_1_state_cmp_full = ((dst_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_data_V_1_vld_out = dst_V_data_V_1_state[1'd0];

assign dst_V_dest_V_1_ack_in = dst_V_dest_V_1_state[1'd1];

assign dst_V_dest_V_1_ack_out = dst_TREADY;

assign dst_V_dest_V_1_load_A = (~dst_V_dest_V_1_sel_wr & dst_V_dest_V_1_state_cmp_full);

assign dst_V_dest_V_1_load_B = (dst_V_dest_V_1_state_cmp_full & dst_V_dest_V_1_sel_wr);

assign dst_V_dest_V_1_sel = dst_V_dest_V_1_sel_rd;

assign dst_V_dest_V_1_state_cmp_full = ((dst_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_dest_V_1_vld_out = dst_V_dest_V_1_state[1'd0];

assign dst_V_id_V_1_ack_in = dst_V_id_V_1_state[1'd1];

assign dst_V_id_V_1_ack_out = dst_TREADY;

assign dst_V_id_V_1_load_A = (~dst_V_id_V_1_sel_wr & dst_V_id_V_1_state_cmp_full);

assign dst_V_id_V_1_load_B = (dst_V_id_V_1_state_cmp_full & dst_V_id_V_1_sel_wr);

assign dst_V_id_V_1_sel = dst_V_id_V_1_sel_rd;

assign dst_V_id_V_1_state_cmp_full = ((dst_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_id_V_1_vld_out = dst_V_id_V_1_state[1'd0];

assign dst_V_keep_V_1_ack_in = dst_V_keep_V_1_state[1'd1];

assign dst_V_keep_V_1_ack_out = dst_TREADY;

assign dst_V_keep_V_1_load_A = (~dst_V_keep_V_1_sel_wr & dst_V_keep_V_1_state_cmp_full);

assign dst_V_keep_V_1_load_B = (dst_V_keep_V_1_state_cmp_full & dst_V_keep_V_1_sel_wr);

assign dst_V_keep_V_1_sel = dst_V_keep_V_1_sel_rd;

assign dst_V_keep_V_1_state_cmp_full = ((dst_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_keep_V_1_vld_out = dst_V_keep_V_1_state[1'd0];

assign dst_V_last_V_1_ack_in = dst_V_last_V_1_state[1'd1];

assign dst_V_last_V_1_ack_out = dst_TREADY;

assign dst_V_last_V_1_load_A = (~dst_V_last_V_1_sel_wr & dst_V_last_V_1_state_cmp_full);

assign dst_V_last_V_1_load_B = (dst_V_last_V_1_state_cmp_full & dst_V_last_V_1_sel_wr);

assign dst_V_last_V_1_sel = dst_V_last_V_1_sel_rd;

assign dst_V_last_V_1_state_cmp_full = ((dst_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_last_V_1_vld_out = dst_V_last_V_1_state[1'd0];

assign dst_V_strb_V_1_ack_in = dst_V_strb_V_1_state[1'd1];

assign dst_V_strb_V_1_ack_out = dst_TREADY;

assign dst_V_strb_V_1_load_A = (~dst_V_strb_V_1_sel_wr & dst_V_strb_V_1_state_cmp_full);

assign dst_V_strb_V_1_load_B = (dst_V_strb_V_1_state_cmp_full & dst_V_strb_V_1_sel_wr);

assign dst_V_strb_V_1_sel = dst_V_strb_V_1_sel_rd;

assign dst_V_strb_V_1_state_cmp_full = ((dst_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_strb_V_1_vld_out = dst_V_strb_V_1_state[1'd0];

assign dst_V_user_V_1_ack_in = dst_V_user_V_1_state[1'd1];

assign dst_V_user_V_1_ack_out = dst_TREADY;

assign dst_V_user_V_1_load_A = (~dst_V_user_V_1_sel_wr & dst_V_user_V_1_state_cmp_full);

assign dst_V_user_V_1_load_B = (dst_V_user_V_1_state_cmp_full & dst_V_user_V_1_sel_wr);

assign dst_V_user_V_1_sel = dst_V_user_V_1_sel_rd;

assign dst_V_user_V_1_state_cmp_full = ((dst_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_user_V_1_vld_out = dst_V_user_V_1_state[1'd0];

assign grp_fu_658_p1 = 32'd16843009;

assign grp_fu_663_p1 = 32'd65793;

assign icmp5_fu_584_p2 = ((tmp_10_fu_574_p4 != 15'd0) ? 1'b1 : 1'b0);

assign icmp_fu_568_p2 = ((tmp_7_fu_558_p4 != 15'd0) ? 1'b1 : 1'b0);

assign lb_val_0_data_V_address0 = tmp_6_fu_546_p1;

assign lb_val_0_dest_V_address0 = tmp_6_fu_546_p1;

assign lb_val_0_id_V_address0 = tmp_6_fu_546_p1;

assign lb_val_0_keep_V_address0 = tmp_6_fu_546_p1;

assign lb_val_0_last_V_address0 = tmp_6_fu_546_p1;

assign lb_val_0_strb_V_address0 = tmp_6_fu_546_p1;

assign lb_val_0_user_V_address0 = tmp_6_fu_546_p1;

assign lb_val_1_data_V_address0 = tmp_6_fu_546_p1;

assign lb_val_1_dest_V_address1 = ap_reg_pp0_iter2_tmp_6_reg_799;

assign lb_val_1_id_V_address1 = ap_reg_pp0_iter2_tmp_6_reg_799;

assign lb_val_1_keep_V_address1 = ap_reg_pp0_iter2_tmp_6_reg_799;

assign lb_val_1_last_V_address1 = ap_reg_pp0_iter2_tmp_6_reg_799;

assign lb_val_1_strb_V_address1 = ap_reg_pp0_iter2_tmp_6_reg_799;

assign lb_val_1_user_V_address1 = ap_reg_pp0_iter2_tmp_6_reg_799;

assign or_cond_fu_621_p2 = (icmp_reg_857 & icmp5_reg_862);

assign p_012_0_1_fu_671_p3 = ((tmp_8_reg_728[0:0] === 1'b1) ? streamOut_data_V_reg_919 : tmp_data_V_fu_114);

assign p_012_0_2_fu_677_p3 = ((tmp_9_reg_733[0:0] === 1'b1) ? streamOut_data_V_1_reg_925 : p_012_0_1_fu_671_p3);

assign p_012_0_3_fu_683_p3 = ((tmp_s_reg_738[0:0] === 1'b1) ? streamOut_data_V_reg_919 : p_012_0_2_fu_677_p3);

assign pixels_1_fu_512_p2 = (pixels_reg_453 + 20'd1);

assign rows_1_fu_602_p3 = ((src_V_last_V_0_data_out[0:0] === 1'b1) ? rows_2_fu_590_p2 : ap_phi_mux_rows_phi_fu_433_p4);

assign rows_2_fu_590_p2 = (ap_phi_mux_rows_phi_fu_433_p4 + 16'd1);

assign sel_SEBB_fu_638_p3 = ((tmp_5_reg_723[0:0] === 1'b1) ? lb_val_1_data_V_q0 : blurVal_data_V_1_blu_fu_631_p3);

assign src_TREADY = src_V_dest_V_0_state[1'd1];

assign src_V_data_V_0_ack_in = src_V_data_V_0_state[1'd1];

assign src_V_data_V_0_load_A = (src_V_data_V_0_state_cmp_full & ~src_V_data_V_0_sel_wr);

assign src_V_data_V_0_load_B = (src_V_data_V_0_state_cmp_full & src_V_data_V_0_sel_wr);

assign src_V_data_V_0_sel = src_V_data_V_0_sel_rd;

assign src_V_data_V_0_state_cmp_full = ((src_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_data_V_0_vld_in = src_TVALID;

assign src_V_data_V_0_vld_out = src_V_data_V_0_state[1'd0];

assign src_V_dest_V_0_ack_in = src_V_dest_V_0_state[1'd1];

assign src_V_dest_V_0_load_A = (src_V_dest_V_0_state_cmp_full & ~src_V_dest_V_0_sel_wr);

assign src_V_dest_V_0_load_B = (src_V_dest_V_0_state_cmp_full & src_V_dest_V_0_sel_wr);

assign src_V_dest_V_0_sel = src_V_dest_V_0_sel_rd;

assign src_V_dest_V_0_state_cmp_full = ((src_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_dest_V_0_vld_in = src_TVALID;

assign src_V_dest_V_0_vld_out = src_V_dest_V_0_state[1'd0];

assign src_V_id_V_0_ack_in = src_V_id_V_0_state[1'd1];

assign src_V_id_V_0_load_A = (src_V_id_V_0_state_cmp_full & ~src_V_id_V_0_sel_wr);

assign src_V_id_V_0_load_B = (src_V_id_V_0_state_cmp_full & src_V_id_V_0_sel_wr);

assign src_V_id_V_0_sel = src_V_id_V_0_sel_rd;

assign src_V_id_V_0_state_cmp_full = ((src_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_id_V_0_vld_in = src_TVALID;

assign src_V_id_V_0_vld_out = src_V_id_V_0_state[1'd0];

assign src_V_keep_V_0_ack_in = src_V_keep_V_0_state[1'd1];

assign src_V_keep_V_0_load_A = (src_V_keep_V_0_state_cmp_full & ~src_V_keep_V_0_sel_wr);

assign src_V_keep_V_0_load_B = (src_V_keep_V_0_state_cmp_full & src_V_keep_V_0_sel_wr);

assign src_V_keep_V_0_sel = src_V_keep_V_0_sel_rd;

assign src_V_keep_V_0_state_cmp_full = ((src_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_keep_V_0_vld_in = src_TVALID;

assign src_V_keep_V_0_vld_out = src_V_keep_V_0_state[1'd0];

assign src_V_last_V_0_ack_in = src_V_last_V_0_state[1'd1];

assign src_V_last_V_0_load_A = (src_V_last_V_0_state_cmp_full & ~src_V_last_V_0_sel_wr);

assign src_V_last_V_0_load_B = (src_V_last_V_0_state_cmp_full & src_V_last_V_0_sel_wr);

assign src_V_last_V_0_sel = src_V_last_V_0_sel_rd;

assign src_V_last_V_0_state_cmp_full = ((src_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_last_V_0_vld_in = src_TVALID;

assign src_V_last_V_0_vld_out = src_V_last_V_0_state[1'd0];

assign src_V_strb_V_0_ack_in = src_V_strb_V_0_state[1'd1];

assign src_V_strb_V_0_load_A = (src_V_strb_V_0_state_cmp_full & ~src_V_strb_V_0_sel_wr);

assign src_V_strb_V_0_load_B = (src_V_strb_V_0_state_cmp_full & src_V_strb_V_0_sel_wr);

assign src_V_strb_V_0_sel = src_V_strb_V_0_sel_rd;

assign src_V_strb_V_0_state_cmp_full = ((src_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_strb_V_0_vld_in = src_TVALID;

assign src_V_strb_V_0_vld_out = src_V_strb_V_0_state[1'd0];

assign src_V_user_V_0_ack_in = src_V_user_V_0_state[1'd1];

assign src_V_user_V_0_load_A = (src_V_user_V_0_state_cmp_full & ~src_V_user_V_0_sel_wr);

assign src_V_user_V_0_load_B = (src_V_user_V_0_state_cmp_full & src_V_user_V_0_sel_wr);

assign src_V_user_V_0_sel = src_V_user_V_0_sel_rd;

assign src_V_user_V_0_state_cmp_full = ((src_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_user_V_0_vld_in = src_TVALID;

assign src_V_user_V_0_vld_out = src_V_user_V_0_state[1'd0];

assign streamOut_data_V_3_fu_645_p3 = ((or_cond_fu_621_p2[0:0] === 1'b1) ? sel_SEBB_fu_638_p3 : outputPxl_fu_118);

assign tmp_10_fu_574_p4 = {{ap_phi_mux_cols_phi_fu_445_p4[15:1]}};

assign tmp_1_fu_500_p2 = ((channelselector == 8'd3) ? 1'b1 : 1'b0);

assign tmp_2_fu_506_p2 = ((pixels_reg_453 == 20'd921600) ? 1'b1 : 1'b0);

assign tmp_3_fu_464_p2 = ((kernelchc == 8'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_470_p2 = ((kernelchc == 8'd1) ? 1'b1 : 1'b0);

assign tmp_5_fu_476_p2 = ((kernelchc == 8'd2) ? 1'b1 : 1'b0);

assign tmp_6_fu_546_p1 = ap_phi_mux_cols_phi_fu_445_p4;

assign tmp_7_fu_558_p4 = {{ap_phi_mux_rows_phi_fu_433_p4[15:1]}};

assign tmp_8_fu_482_p2 = ((channelselector == 8'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_488_p2 = ((channelselector == 8'd1) ? 1'b1 : 1'b0);

assign tmp_data_V_2_fu_689_p3 = ((tmp_1_reg_743[0:0] === 1'b1) ? ap_reg_pp0_iter5_streamOut_data_V_3_reg_912 : p_012_0_3_fu_683_p3);

assign tmp_s_fu_494_p2 = ((channelselector == 8'd2) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_6_reg_799[63:16] <= 48'b000000000000000000000000000000000000000000000000;
    ap_reg_pp0_iter2_tmp_6_reg_799[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //stream
