-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC;
    dst_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "stream,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.730000,HLS_SYN_LAT=643,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=311,HLS_SYN_LUT=969}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal src_V_data_V_0_vld_in : STD_LOGIC;
    signal src_V_data_V_0_vld_out : STD_LOGIC;
    signal src_V_data_V_0_ack_out : STD_LOGIC;
    signal src_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_user_V_0_vld_in : STD_LOGIC;
    signal src_V_user_V_0_vld_out : STD_LOGIC;
    signal src_V_user_V_0_ack_in : STD_LOGIC;
    signal src_V_user_V_0_ack_out : STD_LOGIC;
    signal src_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_user_V_0_sel : STD_LOGIC;
    signal src_V_user_V_0_load_A : STD_LOGIC;
    signal src_V_user_V_0_load_B : STD_LOGIC;
    signal src_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal src_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_last_V_0_vld_in : STD_LOGIC;
    signal src_V_last_V_0_vld_out : STD_LOGIC;
    signal src_V_last_V_0_ack_in : STD_LOGIC;
    signal src_V_last_V_0_ack_out : STD_LOGIC;
    signal src_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_last_V_0_sel : STD_LOGIC;
    signal src_V_last_V_0_load_A : STD_LOGIC;
    signal src_V_last_V_0_load_B : STD_LOGIC;
    signal src_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal src_V_dest_V_0_vld_in : STD_LOGIC;
    signal src_V_dest_V_0_ack_out : STD_LOGIC;
    signal src_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_data_V_1_vld_in : STD_LOGIC;
    signal dst_V_data_V_1_vld_out : STD_LOGIC;
    signal dst_V_data_V_1_ack_in : STD_LOGIC;
    signal dst_V_data_V_1_ack_out : STD_LOGIC;
    signal dst_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_data_V_1_sel : STD_LOGIC;
    signal dst_V_data_V_1_load_A : STD_LOGIC;
    signal dst_V_data_V_1_load_B : STD_LOGIC;
    signal dst_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_keep_V_1_vld_in : STD_LOGIC;
    signal dst_V_keep_V_1_vld_out : STD_LOGIC;
    signal dst_V_keep_V_1_ack_in : STD_LOGIC;
    signal dst_V_keep_V_1_ack_out : STD_LOGIC;
    signal dst_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_keep_V_1_sel : STD_LOGIC;
    signal dst_V_keep_V_1_load_A : STD_LOGIC;
    signal dst_V_keep_V_1_load_B : STD_LOGIC;
    signal dst_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_strb_V_1_vld_in : STD_LOGIC;
    signal dst_V_strb_V_1_vld_out : STD_LOGIC;
    signal dst_V_strb_V_1_ack_in : STD_LOGIC;
    signal dst_V_strb_V_1_ack_out : STD_LOGIC;
    signal dst_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_strb_V_1_sel : STD_LOGIC;
    signal dst_V_strb_V_1_load_A : STD_LOGIC;
    signal dst_V_strb_V_1_load_B : STD_LOGIC;
    signal dst_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_user_V_1_vld_in : STD_LOGIC;
    signal dst_V_user_V_1_vld_out : STD_LOGIC;
    signal dst_V_user_V_1_ack_in : STD_LOGIC;
    signal dst_V_user_V_1_ack_out : STD_LOGIC;
    signal dst_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_user_V_1_sel : STD_LOGIC;
    signal dst_V_user_V_1_load_A : STD_LOGIC;
    signal dst_V_user_V_1_load_B : STD_LOGIC;
    signal dst_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_last_V_1_vld_in : STD_LOGIC;
    signal dst_V_last_V_1_vld_out : STD_LOGIC;
    signal dst_V_last_V_1_ack_in : STD_LOGIC;
    signal dst_V_last_V_1_ack_out : STD_LOGIC;
    signal dst_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_last_V_1_sel : STD_LOGIC;
    signal dst_V_last_V_1_load_A : STD_LOGIC;
    signal dst_V_last_V_1_load_B : STD_LOGIC;
    signal dst_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_id_V_1_vld_in : STD_LOGIC;
    signal dst_V_id_V_1_vld_out : STD_LOGIC;
    signal dst_V_id_V_1_ack_in : STD_LOGIC;
    signal dst_V_id_V_1_ack_out : STD_LOGIC;
    signal dst_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_id_V_1_sel : STD_LOGIC;
    signal dst_V_id_V_1_load_A : STD_LOGIC;
    signal dst_V_id_V_1_load_B : STD_LOGIC;
    signal dst_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_dest_V_1_vld_in : STD_LOGIC;
    signal dst_V_dest_V_1_vld_out : STD_LOGIC;
    signal dst_V_dest_V_1_ack_in : STD_LOGIC;
    signal dst_V_dest_V_1_ack_out : STD_LOGIC;
    signal dst_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_dest_V_1_sel : STD_LOGIC;
    signal dst_V_dest_V_1_load_A : STD_LOGIC;
    signal dst_V_dest_V_1_load_B : STD_LOGIC;
    signal dst_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal l : STD_LOGIC_VECTOR (7 downto 0);
    signal c : STD_LOGIC_VECTOR (7 downto 0);
    signal r : STD_LOGIC_VECTOR (7 downto 0);
    signal y : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal x : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dst_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_reg_300 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_2_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lb_val_2_keep_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal lb_val_2_strb_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_447 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_load_reg_461 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_y_load_fu_342_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_y_load_reg_466 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_373_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_s_reg_514 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_fu_379_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_519 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_2_user_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb_val_2_last_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb_val_2_id_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal lb_val_2_dest_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal lb_val_2_data_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_2_data_V_ce0 : STD_LOGIC;
    signal lb_val_2_keep_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_2_keep_V_ce0 : STD_LOGIC;
    signal lb_val_2_strb_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_2_strb_V_ce0 : STD_LOGIC;
    signal lb_val_2_user_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_2_user_V_ce0 : STD_LOGIC;
    signal lb_val_2_last_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_2_last_V_ce0 : STD_LOGIC;
    signal lb_val_2_id_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_2_id_V_ce0 : STD_LOGIC;
    signal lb_val_2_dest_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_2_dest_V_ce0 : STD_LOGIC;
    signal ap_phi_mux_col_assign_phi_fu_304_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_fu_362_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_1_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_new_1_fu_409_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7 : BOOLEAN;
    signal y_flag_1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_new_fu_427_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_9_fu_395_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_416_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_load_op_fu_400_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component stream_lb_val_2_dbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stream_lb_val_2_kcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component stream_lb_val_2_ueOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component stream_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        l : OUT STD_LOGIC_VECTOR (7 downto 0);
        c : OUT STD_LOGIC_VECTOR (7 downto 0);
        r : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    stream_AXILiteS_s_axi_U : component stream_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        l => l,
        c => c,
        r => r);

    lb_val_2_data_V_U : component stream_lb_val_2_dbkb
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lb_val_2_data_V_address0,
        ce0 => lb_val_2_data_V_ce0,
        q0 => lb_val_2_data_V_q0);

    lb_val_2_keep_V_U : component stream_lb_val_2_kcud
    generic map (
        DataWidth => 4,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lb_val_2_keep_V_address0,
        ce0 => lb_val_2_keep_V_ce0,
        q0 => lb_val_2_keep_V_q0);

    lb_val_2_strb_V_U : component stream_lb_val_2_kcud
    generic map (
        DataWidth => 4,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lb_val_2_strb_V_address0,
        ce0 => lb_val_2_strb_V_ce0,
        q0 => lb_val_2_strb_V_q0);

    lb_val_2_user_V_U : component stream_lb_val_2_ueOg
    generic map (
        DataWidth => 1,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lb_val_2_user_V_address0,
        ce0 => lb_val_2_user_V_ce0,
        q0 => lb_val_2_user_V_q0);

    lb_val_2_last_V_U : component stream_lb_val_2_ueOg
    generic map (
        DataWidth => 1,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lb_val_2_last_V_address0,
        ce0 => lb_val_2_last_V_ce0,
        q0 => lb_val_2_last_V_q0);

    lb_val_2_id_V_U : component stream_lb_val_2_ueOg
    generic map (
        DataWidth => 1,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lb_val_2_id_V_address0,
        ce0 => lb_val_2_id_V_ce0,
        q0 => lb_val_2_id_V_q0);

    lb_val_2_dest_V_U : component stream_lb_val_2_ueOg
    generic map (
        DataWidth => 1,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lb_val_2_dest_V_address0,
        ce0 => lb_val_2_dest_V_ce0,
        q0 => lb_val_2_dest_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = tmp_4_fu_350_p2) and (src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 xor ap_const_logic_1);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_lv1_1 = tmp_4_fu_350_p2) and (src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dst_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_data_V_1_ack_out) and (ap_const_logic_1 = dst_V_data_V_1_vld_out))) then 
                                        dst_V_data_V_1_sel_rd <= not(dst_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_data_V_1_ack_in) and (ap_const_logic_1 = dst_V_data_V_1_vld_in))) then 
                                        dst_V_data_V_1_sel_wr <= not(dst_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = dst_V_data_V_1_state) and (ap_const_logic_0 = dst_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = dst_V_data_V_1_state) and (ap_const_logic_0 = dst_V_data_V_1_vld_in) and (ap_const_logic_1 = dst_V_data_V_1_ack_out)))) then 
                    dst_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = dst_V_data_V_1_state) and (ap_const_logic_0 = dst_V_data_V_1_ack_out)) or ((ap_const_lv2_3 = dst_V_data_V_1_state) and (ap_const_logic_0 = dst_V_data_V_1_ack_out) and (ap_const_logic_1 = dst_V_data_V_1_vld_in)))) then 
                    dst_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = dst_V_data_V_1_vld_in) and (ap_const_logic_1 = dst_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = dst_V_data_V_1_ack_out) and (ap_const_logic_1 = dst_V_data_V_1_vld_in))) and (ap_const_lv2_3 = dst_V_data_V_1_state)) or ((ap_const_lv2_1 = dst_V_data_V_1_state) and (ap_const_logic_1 = dst_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = dst_V_data_V_1_state) and (ap_const_logic_1 = dst_V_data_V_1_vld_in)))) then 
                    dst_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_dest_V_1_ack_out) and (ap_const_logic_1 = dst_V_dest_V_1_vld_out))) then 
                                        dst_V_dest_V_1_sel_rd <= not(dst_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_dest_V_1_ack_in) and (ap_const_logic_1 = dst_V_dest_V_1_vld_in))) then 
                                        dst_V_dest_V_1_sel_wr <= not(dst_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = dst_V_dest_V_1_state) and (ap_const_logic_0 = dst_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = dst_V_dest_V_1_state) and (ap_const_logic_0 = dst_V_dest_V_1_vld_in) and (ap_const_logic_1 = dst_V_dest_V_1_ack_out)))) then 
                    dst_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = dst_V_dest_V_1_state) and (ap_const_logic_0 = dst_V_dest_V_1_ack_out)) or ((ap_const_lv2_3 = dst_V_dest_V_1_state) and (ap_const_logic_0 = dst_V_dest_V_1_ack_out) and (ap_const_logic_1 = dst_V_dest_V_1_vld_in)))) then 
                    dst_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = dst_V_dest_V_1_vld_in) and (ap_const_logic_1 = dst_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = dst_V_dest_V_1_ack_out) and (ap_const_logic_1 = dst_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = dst_V_dest_V_1_state)) or ((ap_const_lv2_1 = dst_V_dest_V_1_state) and (ap_const_logic_1 = dst_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = dst_V_dest_V_1_state) and (ap_const_logic_1 = dst_V_dest_V_1_vld_in)))) then 
                    dst_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_id_V_1_ack_out) and (ap_const_logic_1 = dst_V_id_V_1_vld_out))) then 
                                        dst_V_id_V_1_sel_rd <= not(dst_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_id_V_1_ack_in) and (ap_const_logic_1 = dst_V_id_V_1_vld_in))) then 
                                        dst_V_id_V_1_sel_wr <= not(dst_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = dst_V_id_V_1_state) and (ap_const_logic_0 = dst_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = dst_V_id_V_1_state) and (ap_const_logic_0 = dst_V_id_V_1_vld_in) and (ap_const_logic_1 = dst_V_id_V_1_ack_out)))) then 
                    dst_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = dst_V_id_V_1_state) and (ap_const_logic_0 = dst_V_id_V_1_ack_out)) or ((ap_const_lv2_3 = dst_V_id_V_1_state) and (ap_const_logic_0 = dst_V_id_V_1_ack_out) and (ap_const_logic_1 = dst_V_id_V_1_vld_in)))) then 
                    dst_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = dst_V_id_V_1_vld_in) and (ap_const_logic_1 = dst_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = dst_V_id_V_1_ack_out) and (ap_const_logic_1 = dst_V_id_V_1_vld_in))) and (ap_const_lv2_3 = dst_V_id_V_1_state)) or ((ap_const_lv2_1 = dst_V_id_V_1_state) and (ap_const_logic_1 = dst_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = dst_V_id_V_1_state) and (ap_const_logic_1 = dst_V_id_V_1_vld_in)))) then 
                    dst_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_keep_V_1_ack_out) and (ap_const_logic_1 = dst_V_keep_V_1_vld_out))) then 
                                        dst_V_keep_V_1_sel_rd <= not(dst_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_keep_V_1_ack_in) and (ap_const_logic_1 = dst_V_keep_V_1_vld_in))) then 
                                        dst_V_keep_V_1_sel_wr <= not(dst_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = dst_V_keep_V_1_state) and (ap_const_logic_0 = dst_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = dst_V_keep_V_1_state) and (ap_const_logic_0 = dst_V_keep_V_1_vld_in) and (ap_const_logic_1 = dst_V_keep_V_1_ack_out)))) then 
                    dst_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = dst_V_keep_V_1_state) and (ap_const_logic_0 = dst_V_keep_V_1_ack_out)) or ((ap_const_lv2_3 = dst_V_keep_V_1_state) and (ap_const_logic_0 = dst_V_keep_V_1_ack_out) and (ap_const_logic_1 = dst_V_keep_V_1_vld_in)))) then 
                    dst_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = dst_V_keep_V_1_vld_in) and (ap_const_logic_1 = dst_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = dst_V_keep_V_1_ack_out) and (ap_const_logic_1 = dst_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = dst_V_keep_V_1_state)) or ((ap_const_lv2_1 = dst_V_keep_V_1_state) and (ap_const_logic_1 = dst_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = dst_V_keep_V_1_state) and (ap_const_logic_1 = dst_V_keep_V_1_vld_in)))) then 
                    dst_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_last_V_1_ack_out) and (ap_const_logic_1 = dst_V_last_V_1_vld_out))) then 
                                        dst_V_last_V_1_sel_rd <= not(dst_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_last_V_1_ack_in) and (ap_const_logic_1 = dst_V_last_V_1_vld_in))) then 
                                        dst_V_last_V_1_sel_wr <= not(dst_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = dst_V_last_V_1_state) and (ap_const_logic_0 = dst_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = dst_V_last_V_1_state) and (ap_const_logic_0 = dst_V_last_V_1_vld_in) and (ap_const_logic_1 = dst_V_last_V_1_ack_out)))) then 
                    dst_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = dst_V_last_V_1_state) and (ap_const_logic_0 = dst_V_last_V_1_ack_out)) or ((ap_const_lv2_3 = dst_V_last_V_1_state) and (ap_const_logic_0 = dst_V_last_V_1_ack_out) and (ap_const_logic_1 = dst_V_last_V_1_vld_in)))) then 
                    dst_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = dst_V_last_V_1_vld_in) and (ap_const_logic_1 = dst_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = dst_V_last_V_1_ack_out) and (ap_const_logic_1 = dst_V_last_V_1_vld_in))) and (ap_const_lv2_3 = dst_V_last_V_1_state)) or ((ap_const_lv2_1 = dst_V_last_V_1_state) and (ap_const_logic_1 = dst_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = dst_V_last_V_1_state) and (ap_const_logic_1 = dst_V_last_V_1_vld_in)))) then 
                    dst_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_strb_V_1_ack_out) and (ap_const_logic_1 = dst_V_strb_V_1_vld_out))) then 
                                        dst_V_strb_V_1_sel_rd <= not(dst_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_strb_V_1_ack_in) and (ap_const_logic_1 = dst_V_strb_V_1_vld_in))) then 
                                        dst_V_strb_V_1_sel_wr <= not(dst_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = dst_V_strb_V_1_state) and (ap_const_logic_0 = dst_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = dst_V_strb_V_1_state) and (ap_const_logic_0 = dst_V_strb_V_1_vld_in) and (ap_const_logic_1 = dst_V_strb_V_1_ack_out)))) then 
                    dst_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = dst_V_strb_V_1_state) and (ap_const_logic_0 = dst_V_strb_V_1_ack_out)) or ((ap_const_lv2_3 = dst_V_strb_V_1_state) and (ap_const_logic_0 = dst_V_strb_V_1_ack_out) and (ap_const_logic_1 = dst_V_strb_V_1_vld_in)))) then 
                    dst_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = dst_V_strb_V_1_vld_in) and (ap_const_logic_1 = dst_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = dst_V_strb_V_1_ack_out) and (ap_const_logic_1 = dst_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = dst_V_strb_V_1_state)) or ((ap_const_lv2_1 = dst_V_strb_V_1_state) and (ap_const_logic_1 = dst_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = dst_V_strb_V_1_state) and (ap_const_logic_1 = dst_V_strb_V_1_vld_in)))) then 
                    dst_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_user_V_1_ack_out) and (ap_const_logic_1 = dst_V_user_V_1_vld_out))) then 
                                        dst_V_user_V_1_sel_rd <= not(dst_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = dst_V_user_V_1_ack_in) and (ap_const_logic_1 = dst_V_user_V_1_vld_in))) then 
                                        dst_V_user_V_1_sel_wr <= not(dst_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = dst_V_user_V_1_state) and (ap_const_logic_0 = dst_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = dst_V_user_V_1_state) and (ap_const_logic_0 = dst_V_user_V_1_vld_in) and (ap_const_logic_1 = dst_V_user_V_1_ack_out)))) then 
                    dst_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = dst_V_user_V_1_state) and (ap_const_logic_0 = dst_V_user_V_1_ack_out)) or ((ap_const_lv2_3 = dst_V_user_V_1_state) and (ap_const_logic_0 = dst_V_user_V_1_ack_out) and (ap_const_logic_1 = dst_V_user_V_1_vld_in)))) then 
                    dst_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = dst_V_user_V_1_vld_in) and (ap_const_logic_1 = dst_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = dst_V_user_V_1_ack_out) and (ap_const_logic_1 = dst_V_user_V_1_vld_in))) and (ap_const_lv2_3 = dst_V_user_V_1_state)) or ((ap_const_lv2_1 = dst_V_user_V_1_state) and (ap_const_logic_1 = dst_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = dst_V_user_V_1_state) and (ap_const_logic_1 = dst_V_user_V_1_vld_in)))) then 
                    dst_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_V_data_V_0_state = ap_const_lv2_2) and (ap_const_logic_0 = src_V_data_V_0_vld_in)) or ((src_V_data_V_0_state = ap_const_lv2_3) and (ap_const_logic_0 = src_V_data_V_0_vld_in) and (ap_const_logic_1 = src_V_data_V_0_ack_out)))) then 
                    src_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((src_V_data_V_0_state = ap_const_lv2_1) and (ap_const_logic_0 = src_V_data_V_0_ack_out)) or ((src_V_data_V_0_state = ap_const_lv2_3) and (ap_const_logic_0 = src_V_data_V_0_ack_out) and (ap_const_logic_1 = src_V_data_V_0_vld_in)))) then 
                    src_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = src_V_data_V_0_vld_in) and (ap_const_logic_1 = src_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = src_V_data_V_0_ack_out) and (ap_const_logic_1 = src_V_data_V_0_vld_in))) and (src_V_data_V_0_state = ap_const_lv2_3)) or ((src_V_data_V_0_state = ap_const_lv2_1) and (ap_const_logic_1 = src_V_data_V_0_ack_out)) or ((src_V_data_V_0_state = ap_const_lv2_2) and (ap_const_logic_1 = src_V_data_V_0_vld_in)))) then 
                    src_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = src_V_dest_V_0_state) and (ap_const_logic_0 = src_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = src_V_dest_V_0_state) and (ap_const_logic_0 = src_V_dest_V_0_vld_in) and (ap_const_logic_1 = src_V_dest_V_0_ack_out)))) then 
                    src_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = src_V_dest_V_0_state) and (ap_const_logic_0 = src_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = src_V_dest_V_0_state) and (ap_const_logic_0 = src_V_dest_V_0_ack_out) and (ap_const_logic_1 = src_V_dest_V_0_vld_in)))) then 
                    src_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = src_V_dest_V_0_vld_in) and (ap_const_logic_1 = src_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = src_V_dest_V_0_ack_out) and (ap_const_logic_1 = src_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = src_V_dest_V_0_state)) or ((ap_const_lv2_1 = src_V_dest_V_0_state) and (ap_const_logic_1 = src_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = src_V_dest_V_0_state) and (ap_const_logic_1 = src_V_dest_V_0_vld_in)))) then 
                    src_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = src_V_last_V_0_ack_out) and (ap_const_logic_1 = src_V_last_V_0_vld_out))) then 
                                        src_V_last_V_0_sel_rd <= not(src_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = src_V_last_V_0_ack_in) and (ap_const_logic_1 = src_V_last_V_0_vld_in))) then 
                                        src_V_last_V_0_sel_wr <= not(src_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = src_V_last_V_0_state) and (ap_const_logic_0 = src_V_last_V_0_vld_in)) or ((ap_const_lv2_3 = src_V_last_V_0_state) and (ap_const_logic_0 = src_V_last_V_0_vld_in) and (ap_const_logic_1 = src_V_last_V_0_ack_out)))) then 
                    src_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = src_V_last_V_0_state) and (ap_const_logic_0 = src_V_last_V_0_ack_out)) or ((ap_const_lv2_3 = src_V_last_V_0_state) and (ap_const_logic_0 = src_V_last_V_0_ack_out) and (ap_const_logic_1 = src_V_last_V_0_vld_in)))) then 
                    src_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = src_V_last_V_0_vld_in) and (ap_const_logic_1 = src_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = src_V_last_V_0_ack_out) and (ap_const_logic_1 = src_V_last_V_0_vld_in))) and (ap_const_lv2_3 = src_V_last_V_0_state)) or ((ap_const_lv2_1 = src_V_last_V_0_state) and (ap_const_logic_1 = src_V_last_V_0_ack_out)) or ((ap_const_lv2_2 = src_V_last_V_0_state) and (ap_const_logic_1 = src_V_last_V_0_vld_in)))) then 
                    src_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = src_V_user_V_0_ack_out) and (ap_const_logic_1 = src_V_user_V_0_vld_out))) then 
                                        src_V_user_V_0_sel_rd <= not(src_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = src_V_user_V_0_ack_in) and (ap_const_logic_1 = src_V_user_V_0_vld_in))) then 
                                        src_V_user_V_0_sel_wr <= not(src_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = src_V_user_V_0_state) and (ap_const_logic_0 = src_V_user_V_0_vld_in)) or ((ap_const_lv2_3 = src_V_user_V_0_state) and (ap_const_logic_0 = src_V_user_V_0_vld_in) and (ap_const_logic_1 = src_V_user_V_0_ack_out)))) then 
                    src_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = src_V_user_V_0_state) and (ap_const_logic_0 = src_V_user_V_0_ack_out)) or ((ap_const_lv2_3 = src_V_user_V_0_state) and (ap_const_logic_0 = src_V_user_V_0_ack_out) and (ap_const_logic_1 = src_V_user_V_0_vld_in)))) then 
                    src_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = src_V_user_V_0_vld_in) and (ap_const_logic_1 = src_V_user_V_0_ack_out))) and not(((ap_const_logic_0 = src_V_user_V_0_ack_out) and (ap_const_logic_1 = src_V_user_V_0_vld_in))) and (ap_const_lv2_3 = src_V_user_V_0_state)) or ((ap_const_lv2_1 = src_V_user_V_0_state) and (ap_const_logic_1 = src_V_user_V_0_ack_out)) or ((ap_const_lv2_2 = src_V_user_V_0_state) and (ap_const_logic_1 = src_V_user_V_0_vld_in)))) then 
                    src_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    col_assign_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = tmp_4_fu_350_p2) and (src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_assign_reg_300 <= ap_const_lv11_0;
            elsif (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                col_assign_reg_300 <= i_1_reg_519;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_reg_475 <= exitcond_reg_475;
                exitcond_reg_475 <= exitcond_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_data_V_1_load_A)) then
                dst_V_data_V_1_payload_A <= lb_val_2_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_data_V_1_load_B)) then
                dst_V_data_V_1_payload_B <= lb_val_2_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_dest_V_1_load_A)) then
                dst_V_dest_V_1_payload_A <= lb_val_2_dest_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_dest_V_1_load_B)) then
                dst_V_dest_V_1_payload_B <= lb_val_2_dest_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_id_V_1_load_A)) then
                dst_V_id_V_1_payload_A <= lb_val_2_id_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_id_V_1_load_B)) then
                dst_V_id_V_1_payload_B <= lb_val_2_id_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_keep_V_1_load_A)) then
                dst_V_keep_V_1_payload_A <= lb_val_2_keep_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_keep_V_1_load_B)) then
                dst_V_keep_V_1_payload_B <= lb_val_2_keep_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_last_V_1_load_A)) then
                dst_V_last_V_1_payload_A <= lb_val_2_last_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_last_V_1_load_B)) then
                dst_V_last_V_1_payload_B <= lb_val_2_last_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_strb_V_1_load_A)) then
                dst_V_strb_V_1_payload_A <= lb_val_2_strb_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_strb_V_1_load_B)) then
                dst_V_strb_V_1_payload_B <= lb_val_2_strb_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_user_V_1_load_A)) then
                dst_V_user_V_1_payload_A <= lb_val_2_user_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = dst_V_user_V_1_load_B)) then
                dst_V_user_V_1_payload_B <= lb_val_2_user_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_1_reg_519 <= i_1_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_s_reg_514(10 downto 1) <= i_s_fu_373_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_y_load_reg_466 <= p_y_load_fu_342_p3;
                tmp_last_V_reg_453 <= src_V_last_V_0_data_out;
                tmp_user_V_reg_447 <= src_V_user_V_0_data_out;
                x_load_reg_461 <= x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = src_V_last_V_0_load_A)) then
                src_V_last_V_0_payload_A <= src_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = src_V_last_V_0_load_B)) then
                src_V_last_V_0_payload_B <= src_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = src_V_user_V_0_load_A)) then
                src_V_user_V_0_payload_A <= src_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = src_V_user_V_0_load_B)) then
                src_V_user_V_0_payload_B <= src_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = dst_V_dest_V_1_ack_in) or (ap_const_logic_0 = dst_V_id_V_1_ack_in) or (ap_const_logic_0 = dst_V_last_V_1_ack_in) or (ap_const_logic_0 = dst_V_user_V_1_ack_in) or (ap_const_logic_0 = dst_V_strb_V_1_ack_in) or (ap_const_logic_0 = dst_V_keep_V_1_ack_in) or (ap_const_logic_0 = dst_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                x <= x_new_fu_427_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = dst_V_dest_V_1_ack_in) or (ap_const_logic_0 = dst_V_id_V_1_ack_in) or (ap_const_logic_0 = dst_V_last_V_1_ack_in) or (ap_const_logic_0 = dst_V_user_V_1_ack_in) or (ap_const_logic_0 = dst_V_strb_V_1_ack_in) or (ap_const_logic_0 = dst_V_keep_V_1_ack_in) or (ap_const_logic_0 = dst_V_data_V_1_ack_in))) and (ap_const_lv1_1 = y_flag_1_fu_405_p2) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                y <= y_new_1_fu_409_p3;
            end if;
        end if;
    end process;
    i_s_reg_514(0) <= '1';

    ap_NS_fsm_assign_proc : process (src_V_data_V_0_vld_out, dst_V_data_V_1_ack_in, dst_V_keep_V_1_ack_in, dst_V_strb_V_1_ack_in, dst_V_user_V_1_ack_in, dst_V_last_V_1_ack_in, dst_V_id_V_1_ack_in, dst_V_dest_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, tmp_4_fu_350_p2, exitcond_fu_356_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_1 = tmp_4_fu_350_p2) and (src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_lv1_0 = tmp_4_fu_350_p2) and (src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_lv1_1 = exitcond_fu_356_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0))) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_lv1_1 = exitcond_fu_356_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_subdone = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((ap_const_logic_0 = dst_V_dest_V_1_ack_in) or (ap_const_logic_0 = dst_V_id_V_1_ack_in) or (ap_const_logic_0 = dst_V_last_V_1_ack_in) or (ap_const_logic_0 = dst_V_user_V_1_ack_in) or (ap_const_logic_0 = dst_V_strb_V_1_ack_in) or (ap_const_logic_0 = dst_V_keep_V_1_ack_in) or (ap_const_logic_0 = dst_V_data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state5_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state4_io, ap_block_state6_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state4_io, ap_block_state6_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(dst_V_data_V_1_ack_in, exitcond_reg_475)
    begin
                ap_block_state4_io <= ((ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_0 = dst_V_data_V_1_ack_in));
    end process;

        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(dst_V_data_V_1_ack_in, exitcond_reg_475)
    begin
                ap_block_state5_io <= ((ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_0 = dst_V_data_V_1_ack_in));
    end process;

        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(dst_V_data_V_1_ack_in, ap_reg_pp0_iter1_exitcond_reg_475)
    begin
                ap_block_state6_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_reg_475) and (ap_const_logic_0 = dst_V_data_V_1_ack_in));
    end process;

        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_assign_proc : process(dst_V_data_V_1_ack_in, dst_V_keep_V_1_ack_in, dst_V_strb_V_1_ack_in, dst_V_user_V_1_ack_in, dst_V_last_V_1_ack_in, dst_V_id_V_1_ack_in, dst_V_dest_V_1_ack_in)
    begin
                ap_block_state7 <= ((ap_const_logic_0 = dst_V_dest_V_1_ack_in) or (ap_const_logic_0 = dst_V_id_V_1_ack_in) or (ap_const_logic_0 = dst_V_last_V_1_ack_in) or (ap_const_logic_0 = dst_V_user_V_1_ack_in) or (ap_const_logic_0 = dst_V_strb_V_1_ack_in) or (ap_const_logic_0 = dst_V_keep_V_1_ack_in) or (ap_const_logic_0 = dst_V_data_V_1_ack_in));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_356_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_fu_356_p2)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_col_assign_phi_fu_304_p4_assign_proc : process(exitcond_reg_475, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, col_assign_reg_300, i_1_reg_519)
    begin
        if (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_col_assign_phi_fu_304_p4 <= i_1_reg_519;
        else 
            ap_phi_mux_col_assign_phi_fu_304_p4 <= col_assign_reg_300;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dst_TDATA <= dst_V_data_V_1_data_out;

    dst_TDATA_blk_n_assign_proc : process(dst_V_data_V_1_state, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, exitcond_reg_475, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_reg_pp0_iter1_exitcond_reg_475)
    begin
        if ((((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_TDATA_blk_n <= dst_V_data_V_1_state(1);
        else 
            dst_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_TDEST <= dst_V_dest_V_1_data_out;
    dst_TID <= dst_V_id_V_1_data_out;
    dst_TKEEP <= dst_V_keep_V_1_data_out;
    dst_TLAST <= dst_V_last_V_1_data_out;
    dst_TSTRB <= dst_V_strb_V_1_data_out;
    dst_TUSER <= dst_V_user_V_1_data_out;
    dst_TVALID <= dst_V_dest_V_1_state(0);
    dst_V_data_V_1_ack_in <= dst_V_data_V_1_state(1);
    dst_V_data_V_1_ack_out <= dst_TREADY;

    dst_V_data_V_1_data_out_assign_proc : process(dst_V_data_V_1_payload_A, dst_V_data_V_1_payload_B, dst_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = dst_V_data_V_1_sel)) then 
            dst_V_data_V_1_data_out <= dst_V_data_V_1_payload_B;
        else 
            dst_V_data_V_1_data_out <= dst_V_data_V_1_payload_A;
        end if; 
    end process;

    dst_V_data_V_1_load_A <= (not(dst_V_data_V_1_sel_wr) and dst_V_data_V_1_state_cmp_full);
    dst_V_data_V_1_load_B <= (dst_V_data_V_1_state_cmp_full and dst_V_data_V_1_sel_wr);
    dst_V_data_V_1_sel <= dst_V_data_V_1_sel_rd;
    dst_V_data_V_1_state_cmp_full <= '0' when (dst_V_data_V_1_state = ap_const_lv2_1) else '1';

    dst_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_reg_475, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_data_V_1_vld_out <= dst_V_data_V_1_state(0);
    dst_V_dest_V_1_ack_in <= dst_V_dest_V_1_state(1);
    dst_V_dest_V_1_ack_out <= dst_TREADY;

    dst_V_dest_V_1_data_out_assign_proc : process(dst_V_dest_V_1_payload_A, dst_V_dest_V_1_payload_B, dst_V_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = dst_V_dest_V_1_sel)) then 
            dst_V_dest_V_1_data_out <= dst_V_dest_V_1_payload_B;
        else 
            dst_V_dest_V_1_data_out <= dst_V_dest_V_1_payload_A;
        end if; 
    end process;

    dst_V_dest_V_1_load_A <= (not(dst_V_dest_V_1_sel_wr) and dst_V_dest_V_1_state_cmp_full);
    dst_V_dest_V_1_load_B <= (dst_V_dest_V_1_state_cmp_full and dst_V_dest_V_1_sel_wr);
    dst_V_dest_V_1_sel <= dst_V_dest_V_1_sel_rd;
    dst_V_dest_V_1_state_cmp_full <= '0' when (dst_V_dest_V_1_state = ap_const_lv2_1) else '1';

    dst_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_reg_475, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_dest_V_1_vld_out <= dst_V_dest_V_1_state(0);
    dst_V_id_V_1_ack_in <= dst_V_id_V_1_state(1);
    dst_V_id_V_1_ack_out <= dst_TREADY;

    dst_V_id_V_1_data_out_assign_proc : process(dst_V_id_V_1_payload_A, dst_V_id_V_1_payload_B, dst_V_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = dst_V_id_V_1_sel)) then 
            dst_V_id_V_1_data_out <= dst_V_id_V_1_payload_B;
        else 
            dst_V_id_V_1_data_out <= dst_V_id_V_1_payload_A;
        end if; 
    end process;

    dst_V_id_V_1_load_A <= (not(dst_V_id_V_1_sel_wr) and dst_V_id_V_1_state_cmp_full);
    dst_V_id_V_1_load_B <= (dst_V_id_V_1_state_cmp_full and dst_V_id_V_1_sel_wr);
    dst_V_id_V_1_sel <= dst_V_id_V_1_sel_rd;
    dst_V_id_V_1_state_cmp_full <= '0' when (dst_V_id_V_1_state = ap_const_lv2_1) else '1';

    dst_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_reg_475, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_id_V_1_vld_out <= dst_V_id_V_1_state(0);
    dst_V_keep_V_1_ack_in <= dst_V_keep_V_1_state(1);
    dst_V_keep_V_1_ack_out <= dst_TREADY;

    dst_V_keep_V_1_data_out_assign_proc : process(dst_V_keep_V_1_payload_A, dst_V_keep_V_1_payload_B, dst_V_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = dst_V_keep_V_1_sel)) then 
            dst_V_keep_V_1_data_out <= dst_V_keep_V_1_payload_B;
        else 
            dst_V_keep_V_1_data_out <= dst_V_keep_V_1_payload_A;
        end if; 
    end process;

    dst_V_keep_V_1_load_A <= (not(dst_V_keep_V_1_sel_wr) and dst_V_keep_V_1_state_cmp_full);
    dst_V_keep_V_1_load_B <= (dst_V_keep_V_1_state_cmp_full and dst_V_keep_V_1_sel_wr);
    dst_V_keep_V_1_sel <= dst_V_keep_V_1_sel_rd;
    dst_V_keep_V_1_state_cmp_full <= '0' when (dst_V_keep_V_1_state = ap_const_lv2_1) else '1';

    dst_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_reg_475, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_keep_V_1_vld_out <= dst_V_keep_V_1_state(0);
    dst_V_last_V_1_ack_in <= dst_V_last_V_1_state(1);
    dst_V_last_V_1_ack_out <= dst_TREADY;

    dst_V_last_V_1_data_out_assign_proc : process(dst_V_last_V_1_payload_A, dst_V_last_V_1_payload_B, dst_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = dst_V_last_V_1_sel)) then 
            dst_V_last_V_1_data_out <= dst_V_last_V_1_payload_B;
        else 
            dst_V_last_V_1_data_out <= dst_V_last_V_1_payload_A;
        end if; 
    end process;

    dst_V_last_V_1_load_A <= (not(dst_V_last_V_1_sel_wr) and dst_V_last_V_1_state_cmp_full);
    dst_V_last_V_1_load_B <= (dst_V_last_V_1_state_cmp_full and dst_V_last_V_1_sel_wr);
    dst_V_last_V_1_sel <= dst_V_last_V_1_sel_rd;
    dst_V_last_V_1_state_cmp_full <= '0' when (dst_V_last_V_1_state = ap_const_lv2_1) else '1';

    dst_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_reg_475, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_last_V_1_vld_out <= dst_V_last_V_1_state(0);
    dst_V_strb_V_1_ack_in <= dst_V_strb_V_1_state(1);
    dst_V_strb_V_1_ack_out <= dst_TREADY;

    dst_V_strb_V_1_data_out_assign_proc : process(dst_V_strb_V_1_payload_A, dst_V_strb_V_1_payload_B, dst_V_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = dst_V_strb_V_1_sel)) then 
            dst_V_strb_V_1_data_out <= dst_V_strb_V_1_payload_B;
        else 
            dst_V_strb_V_1_data_out <= dst_V_strb_V_1_payload_A;
        end if; 
    end process;

    dst_V_strb_V_1_load_A <= (not(dst_V_strb_V_1_sel_wr) and dst_V_strb_V_1_state_cmp_full);
    dst_V_strb_V_1_load_B <= (dst_V_strb_V_1_state_cmp_full and dst_V_strb_V_1_sel_wr);
    dst_V_strb_V_1_sel <= dst_V_strb_V_1_sel_rd;
    dst_V_strb_V_1_state_cmp_full <= '0' when (dst_V_strb_V_1_state = ap_const_lv2_1) else '1';

    dst_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_reg_475, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_strb_V_1_vld_out <= dst_V_strb_V_1_state(0);
    dst_V_user_V_1_ack_in <= dst_V_user_V_1_state(1);
    dst_V_user_V_1_ack_out <= dst_TREADY;

    dst_V_user_V_1_data_out_assign_proc : process(dst_V_user_V_1_payload_A, dst_V_user_V_1_payload_B, dst_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = dst_V_user_V_1_sel)) then 
            dst_V_user_V_1_data_out <= dst_V_user_V_1_payload_B;
        else 
            dst_V_user_V_1_data_out <= dst_V_user_V_1_payload_A;
        end if; 
    end process;

    dst_V_user_V_1_load_A <= (not(dst_V_user_V_1_sel_wr) and dst_V_user_V_1_state_cmp_full);
    dst_V_user_V_1_load_B <= (dst_V_user_V_1_state_cmp_full and dst_V_user_V_1_sel_wr);
    dst_V_user_V_1_sel <= dst_V_user_V_1_sel_rd;
    dst_V_user_V_1_state_cmp_full <= '0' when (dst_V_user_V_1_state = ap_const_lv2_1) else '1';

    dst_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_reg_475, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_475) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dst_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_user_V_1_vld_out <= dst_V_user_V_1_state(0);
    exitcond_fu_356_p2 <= "1" when (ap_phi_mux_col_assign_phi_fu_304_p4 = ap_const_lv11_500) else "0";
    i_1_fu_379_p2 <= std_logic_vector(unsigned(ap_phi_mux_col_assign_phi_fu_304_p4) + unsigned(ap_const_lv11_2));
    i_s_fu_373_p2 <= (ap_phi_mux_col_assign_phi_fu_304_p4 or ap_const_lv11_1);

    lb_val_2_data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_8_fu_362_p1, tmp_8_1_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lb_val_2_data_V_address0 <= tmp_8_1_fu_385_p1(11 - 1 downto 0);
            elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lb_val_2_data_V_address0 <= tmp_8_fu_362_p1(11 - 1 downto 0);
            else 
                lb_val_2_data_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            lb_val_2_data_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    lb_val_2_data_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lb_val_2_data_V_ce0 <= ap_const_logic_1;
        else 
            lb_val_2_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb_val_2_dest_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_8_fu_362_p1, tmp_8_1_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lb_val_2_dest_V_address0 <= tmp_8_1_fu_385_p1(11 - 1 downto 0);
            elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lb_val_2_dest_V_address0 <= tmp_8_fu_362_p1(11 - 1 downto 0);
            else 
                lb_val_2_dest_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            lb_val_2_dest_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    lb_val_2_dest_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lb_val_2_dest_V_ce0 <= ap_const_logic_1;
        else 
            lb_val_2_dest_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb_val_2_id_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_8_fu_362_p1, tmp_8_1_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lb_val_2_id_V_address0 <= tmp_8_1_fu_385_p1(11 - 1 downto 0);
            elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lb_val_2_id_V_address0 <= tmp_8_fu_362_p1(11 - 1 downto 0);
            else 
                lb_val_2_id_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            lb_val_2_id_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    lb_val_2_id_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lb_val_2_id_V_ce0 <= ap_const_logic_1;
        else 
            lb_val_2_id_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb_val_2_keep_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_8_fu_362_p1, tmp_8_1_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lb_val_2_keep_V_address0 <= tmp_8_1_fu_385_p1(11 - 1 downto 0);
            elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lb_val_2_keep_V_address0 <= tmp_8_fu_362_p1(11 - 1 downto 0);
            else 
                lb_val_2_keep_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            lb_val_2_keep_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    lb_val_2_keep_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lb_val_2_keep_V_ce0 <= ap_const_logic_1;
        else 
            lb_val_2_keep_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb_val_2_last_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_8_fu_362_p1, tmp_8_1_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lb_val_2_last_V_address0 <= tmp_8_1_fu_385_p1(11 - 1 downto 0);
            elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lb_val_2_last_V_address0 <= tmp_8_fu_362_p1(11 - 1 downto 0);
            else 
                lb_val_2_last_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            lb_val_2_last_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    lb_val_2_last_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lb_val_2_last_V_ce0 <= ap_const_logic_1;
        else 
            lb_val_2_last_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb_val_2_strb_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_8_fu_362_p1, tmp_8_1_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lb_val_2_strb_V_address0 <= tmp_8_1_fu_385_p1(11 - 1 downto 0);
            elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lb_val_2_strb_V_address0 <= tmp_8_fu_362_p1(11 - 1 downto 0);
            else 
                lb_val_2_strb_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            lb_val_2_strb_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    lb_val_2_strb_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lb_val_2_strb_V_ce0 <= ap_const_logic_1;
        else 
            lb_val_2_strb_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb_val_2_user_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_8_fu_362_p1, tmp_8_1_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter0)) then
            if (((ap_block_pp0_stage1 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                lb_val_2_user_V_address0 <= tmp_8_1_fu_385_p1(11 - 1 downto 0);
            elsif (((ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                lb_val_2_user_V_address0 <= tmp_8_fu_362_p1(11 - 1 downto 0);
            else 
                lb_val_2_user_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            lb_val_2_user_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    lb_val_2_user_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_block_pp0_stage1_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            lb_val_2_user_V_ce0 <= ap_const_logic_1;
        else 
            lb_val_2_user_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_y_load_fu_342_p3 <= 
        ap_const_lv16_0 when (src_V_user_V_0_data_out(0) = '1') else 
        y;

    src_TDATA_blk_n_assign_proc : process(src_V_data_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_TDATA_blk_n <= src_V_data_V_0_state(0);
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_TREADY <= src_V_dest_V_0_state(1);

    src_V_data_V_0_ack_out_assign_proc : process(src_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            src_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    src_V_data_V_0_vld_in <= src_TVALID;
    src_V_data_V_0_vld_out <= src_V_data_V_0_state(0);

    src_V_dest_V_0_ack_out_assign_proc : process(src_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            src_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    src_V_dest_V_0_vld_in <= src_TVALID;
    src_V_last_V_0_ack_in <= src_V_last_V_0_state(1);

    src_V_last_V_0_ack_out_assign_proc : process(src_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            src_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_last_V_0_data_out_assign_proc : process(src_V_last_V_0_payload_A, src_V_last_V_0_payload_B, src_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = src_V_last_V_0_sel)) then 
            src_V_last_V_0_data_out <= src_V_last_V_0_payload_B;
        else 
            src_V_last_V_0_data_out <= src_V_last_V_0_payload_A;
        end if; 
    end process;

    src_V_last_V_0_load_A <= (src_V_last_V_0_state_cmp_full and not(src_V_last_V_0_sel_wr));
    src_V_last_V_0_load_B <= (src_V_last_V_0_state_cmp_full and src_V_last_V_0_sel_wr);
    src_V_last_V_0_sel <= src_V_last_V_0_sel_rd;
    src_V_last_V_0_state_cmp_full <= '0' when (src_V_last_V_0_state = ap_const_lv2_1) else '1';
    src_V_last_V_0_vld_in <= src_TVALID;
    src_V_last_V_0_vld_out <= src_V_last_V_0_state(0);
    src_V_user_V_0_ack_in <= src_V_user_V_0_state(1);

    src_V_user_V_0_ack_out_assign_proc : process(src_V_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((src_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            src_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_user_V_0_data_out_assign_proc : process(src_V_user_V_0_payload_A, src_V_user_V_0_payload_B, src_V_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = src_V_user_V_0_sel)) then 
            src_V_user_V_0_data_out <= src_V_user_V_0_payload_B;
        else 
            src_V_user_V_0_data_out <= src_V_user_V_0_payload_A;
        end if; 
    end process;

    src_V_user_V_0_load_A <= (src_V_user_V_0_state_cmp_full and not(src_V_user_V_0_sel_wr));
    src_V_user_V_0_load_B <= (src_V_user_V_0_state_cmp_full and src_V_user_V_0_sel_wr);
    src_V_user_V_0_sel <= src_V_user_V_0_sel_rd;
    src_V_user_V_0_state_cmp_full <= '0' when (src_V_user_V_0_state = ap_const_lv2_1) else '1';
    src_V_user_V_0_vld_in <= src_TVALID;
    src_V_user_V_0_vld_out <= src_V_user_V_0_state(0);
    tmp_1_fu_416_p3 <= 
        ap_const_lv16_0 when (tmp_last_V_reg_453(0) = '1') else 
        ap_const_lv16_1;
    tmp_2_fu_423_p2 <= (tmp_user_V_reg_447 or tmp_last_V_reg_453);
    tmp_4_fu_350_p2 <= "1" when (unsigned(p_y_load_fu_342_p3) > unsigned(ap_const_lv16_2)) else "0";
    tmp_8_1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_s_reg_514),64));
    tmp_8_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_col_assign_phi_fu_304_p4),64));
    tmp_9_fu_395_p2 <= std_logic_vector(unsigned(p_y_load_reg_466) + unsigned(ap_const_lv16_1));
    x_load_op_fu_400_p2 <= std_logic_vector(unsigned(x_load_reg_461) + unsigned(ap_const_lv16_1));
    x_new_fu_427_p3 <= 
        tmp_1_fu_416_p3 when (tmp_2_fu_423_p2(0) = '1') else 
        x_load_op_fu_400_p2;
    y_flag_1_fu_405_p2 <= (tmp_user_V_reg_447 or tmp_last_V_reg_453);
    y_new_1_fu_409_p3 <= 
        tmp_9_fu_395_p2 when (tmp_last_V_reg_453(0) = '1') else 
        ap_const_lv16_0;
end behav;
