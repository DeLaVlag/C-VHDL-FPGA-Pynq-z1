-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stream is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    src_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC;
    dst_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    dst_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "stream,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.879000,HLS_SYN_LAT=921607,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=8,HLS_SYN_FF=1663,HLS_SYN_LUT=1885}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv20_E1000 : STD_LOGIC_VECTOR (19 downto 0) := "11100001000000000000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv32_1010101 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000010000000100000001";
    constant ap_const_lv32_10101 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000100000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal src_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal src_V_data_V_0_vld_in : STD_LOGIC;
    signal src_V_data_V_0_vld_out : STD_LOGIC;
    signal src_V_data_V_0_ack_in : STD_LOGIC;
    signal src_V_data_V_0_ack_out : STD_LOGIC;
    signal src_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal src_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal src_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_data_V_0_sel : STD_LOGIC;
    signal src_V_data_V_0_load_A : STD_LOGIC;
    signal src_V_data_V_0_load_B : STD_LOGIC;
    signal src_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal src_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal src_V_keep_V_0_vld_in : STD_LOGIC;
    signal src_V_keep_V_0_vld_out : STD_LOGIC;
    signal src_V_keep_V_0_ack_in : STD_LOGIC;
    signal src_V_keep_V_0_ack_out : STD_LOGIC;
    signal src_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal src_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal src_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_keep_V_0_sel : STD_LOGIC;
    signal src_V_keep_V_0_load_A : STD_LOGIC;
    signal src_V_keep_V_0_load_B : STD_LOGIC;
    signal src_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal src_V_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal src_V_strb_V_0_vld_in : STD_LOGIC;
    signal src_V_strb_V_0_vld_out : STD_LOGIC;
    signal src_V_strb_V_0_ack_in : STD_LOGIC;
    signal src_V_strb_V_0_ack_out : STD_LOGIC;
    signal src_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal src_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal src_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_strb_V_0_sel : STD_LOGIC;
    signal src_V_strb_V_0_load_A : STD_LOGIC;
    signal src_V_strb_V_0_load_B : STD_LOGIC;
    signal src_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal src_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_user_V_0_vld_in : STD_LOGIC;
    signal src_V_user_V_0_vld_out : STD_LOGIC;
    signal src_V_user_V_0_ack_in : STD_LOGIC;
    signal src_V_user_V_0_ack_out : STD_LOGIC;
    signal src_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_user_V_0_sel : STD_LOGIC;
    signal src_V_user_V_0_load_A : STD_LOGIC;
    signal src_V_user_V_0_load_B : STD_LOGIC;
    signal src_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal src_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_last_V_0_vld_in : STD_LOGIC;
    signal src_V_last_V_0_vld_out : STD_LOGIC;
    signal src_V_last_V_0_ack_in : STD_LOGIC;
    signal src_V_last_V_0_ack_out : STD_LOGIC;
    signal src_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_last_V_0_sel : STD_LOGIC;
    signal src_V_last_V_0_load_A : STD_LOGIC;
    signal src_V_last_V_0_load_B : STD_LOGIC;
    signal src_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal src_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_id_V_0_vld_in : STD_LOGIC;
    signal src_V_id_V_0_vld_out : STD_LOGIC;
    signal src_V_id_V_0_ack_in : STD_LOGIC;
    signal src_V_id_V_0_ack_out : STD_LOGIC;
    signal src_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_id_V_0_sel : STD_LOGIC;
    signal src_V_id_V_0_load_A : STD_LOGIC;
    signal src_V_id_V_0_load_B : STD_LOGIC;
    signal src_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal src_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_dest_V_0_vld_in : STD_LOGIC;
    signal src_V_dest_V_0_vld_out : STD_LOGIC;
    signal src_V_dest_V_0_ack_in : STD_LOGIC;
    signal src_V_dest_V_0_ack_out : STD_LOGIC;
    signal src_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal src_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal src_V_dest_V_0_sel : STD_LOGIC;
    signal src_V_dest_V_0_load_A : STD_LOGIC;
    signal src_V_dest_V_0_load_B : STD_LOGIC;
    signal src_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal dst_V_data_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_data_V_1_vld_in : STD_LOGIC;
    signal dst_V_data_V_1_vld_out : STD_LOGIC;
    signal dst_V_data_V_1_ack_in : STD_LOGIC;
    signal dst_V_data_V_1_ack_out : STD_LOGIC;
    signal dst_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal dst_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_data_V_1_sel : STD_LOGIC;
    signal dst_V_data_V_1_load_A : STD_LOGIC;
    signal dst_V_data_V_1_load_B : STD_LOGIC;
    signal dst_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_keep_V_1_data_in : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_keep_V_1_vld_in : STD_LOGIC;
    signal dst_V_keep_V_1_vld_out : STD_LOGIC;
    signal dst_V_keep_V_1_ack_in : STD_LOGIC;
    signal dst_V_keep_V_1_ack_out : STD_LOGIC;
    signal dst_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_keep_V_1_sel : STD_LOGIC;
    signal dst_V_keep_V_1_load_A : STD_LOGIC;
    signal dst_V_keep_V_1_load_B : STD_LOGIC;
    signal dst_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_strb_V_1_data_in : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_strb_V_1_vld_in : STD_LOGIC;
    signal dst_V_strb_V_1_vld_out : STD_LOGIC;
    signal dst_V_strb_V_1_ack_in : STD_LOGIC;
    signal dst_V_strb_V_1_ack_out : STD_LOGIC;
    signal dst_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal dst_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_strb_V_1_sel : STD_LOGIC;
    signal dst_V_strb_V_1_load_A : STD_LOGIC;
    signal dst_V_strb_V_1_load_B : STD_LOGIC;
    signal dst_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_user_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_user_V_1_vld_in : STD_LOGIC;
    signal dst_V_user_V_1_vld_out : STD_LOGIC;
    signal dst_V_user_V_1_ack_in : STD_LOGIC;
    signal dst_V_user_V_1_ack_out : STD_LOGIC;
    signal dst_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_user_V_1_sel : STD_LOGIC;
    signal dst_V_user_V_1_load_A : STD_LOGIC;
    signal dst_V_user_V_1_load_B : STD_LOGIC;
    signal dst_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_last_V_1_vld_in : STD_LOGIC;
    signal dst_V_last_V_1_vld_out : STD_LOGIC;
    signal dst_V_last_V_1_ack_in : STD_LOGIC;
    signal dst_V_last_V_1_ack_out : STD_LOGIC;
    signal dst_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_last_V_1_sel : STD_LOGIC;
    signal dst_V_last_V_1_load_A : STD_LOGIC;
    signal dst_V_last_V_1_load_B : STD_LOGIC;
    signal dst_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_id_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_id_V_1_vld_in : STD_LOGIC;
    signal dst_V_id_V_1_vld_out : STD_LOGIC;
    signal dst_V_id_V_1_ack_in : STD_LOGIC;
    signal dst_V_id_V_1_ack_out : STD_LOGIC;
    signal dst_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_id_V_1_sel : STD_LOGIC;
    signal dst_V_id_V_1_load_A : STD_LOGIC;
    signal dst_V_id_V_1_load_B : STD_LOGIC;
    signal dst_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal dst_V_dest_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_dest_V_1_vld_in : STD_LOGIC;
    signal dst_V_dest_V_1_vld_out : STD_LOGIC;
    signal dst_V_dest_V_1_ack_in : STD_LOGIC;
    signal dst_V_dest_V_1_ack_out : STD_LOGIC;
    signal dst_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal dst_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal dst_V_dest_V_1_sel : STD_LOGIC;
    signal dst_V_dest_V_1_load_A : STD_LOGIC;
    signal dst_V_dest_V_1_load_B : STD_LOGIC;
    signal dst_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dst_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal kernelchc : STD_LOGIC_VECTOR (7 downto 0);
    signal normalfactor : STD_LOGIC_VECTOR (7 downto 0);
    signal channelselector : STD_LOGIC_VECTOR (7 downto 0);
    signal src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter3_exitcond1_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_448 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter4_exitcond1_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter5_exitcond1_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixels_reg_203 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_s_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_452 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_457 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_predicate_op88_write_state6 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_predicate_op93_write_state7 : BOOLEAN;
    signal ap_predicate_op99_write_state7 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_predicate_op105_write_state8 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond1_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond1_reg_482 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixels_1_fu_319_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_data_V_2_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter2_tmp_data_V_2_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter3_tmp_data_V_2_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_keep_V_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter2_tmp_keep_V_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter3_tmp_keep_V_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter4_tmp_keep_V_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_strb_V_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter2_tmp_strb_V_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter3_tmp_strb_V_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp0_iter4_tmp_strb_V_reg_507 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_user_V_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_user_V_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_user_V_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_last_V_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_last_V_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_last_V_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_id_V_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_id_V_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_id_V_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_id_V_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_dest_V_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_dest_V_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_dest_V_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_dest_V_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal streamOut_data_V_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal streamOut_data_V_1_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal streamOut_data_V_2_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal streamOut_data_V_2_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_548 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter4_tmp_s_reg_548 : STD_LOGIC_VECTOR (63 downto 0);
    signal lb_val_0_addr_reg_553 : STD_LOGIC_VECTOR (10 downto 0);
    signal streamOut_data_V_9_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb_val_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal lb_val_0_load_reg_565 : STD_LOGIC_VECTOR (31 downto 0);
    signal streamOut_data_V_10_fu_432_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter4_state6 : STD_LOGIC;
    signal lb_val_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_0_ce0 : STD_LOGIC;
    signal lb_val_0_ce1 : STD_LOGIC;
    signal lb_val_0_we1 : STD_LOGIC;
    signal lb_val_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lb_val_1_ce1 : STD_LOGIC;
    signal lb_val_1_we1 : STD_LOGIC;
    signal ap_phi_mux_p_0146_0_s_phi_fu_240_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_s_phi_fu_218_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_0146_0_6_phi_fu_229_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0146_0_6_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_p_0146_0_6_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_p_0146_0_6_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_p_0146_0_6_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_p_0146_0_6_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_p_0146_0_6_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_p_0146_0_s_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_1_fu_389_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp2_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_359_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_fu_365_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal streamOut_data_V_4_fu_401_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal streamOut_data_V_5_fu_407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal streamOut_data_V_6_fu_413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal streamOut_data_V_10_s_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_ce : STD_LOGIC;
    signal grp_fu_359_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1132 : BOOLEAN;

    component stream_mul_26ns_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (25 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stream_mul_18ns_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stream_lb_val_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stream_lb_val_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stream_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        kernelchc : OUT STD_LOGIC_VECTOR (7 downto 0);
        normalfactor : OUT STD_LOGIC_VECTOR (7 downto 0);
        channelselector : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    stream_AXILiteS_s_axi_U : component stream_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        kernelchc => kernelchc,
        normalfactor => normalfactor,
        channelselector => channelselector);

    lb_val_0_U : component stream_lb_val_0
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lb_val_0_address0,
        ce0 => lb_val_0_ce0,
        q0 => lb_val_0_q0,
        address1 => lb_val_0_addr_reg_553,
        ce1 => lb_val_0_ce1,
        we1 => lb_val_0_we1,
        d1 => ap_reg_pp0_iter3_tmp_data_V_2_reg_491);

    lb_val_1_U : component stream_lb_val_1
    generic map (
        DataWidth => 32,
        AddressRange => 1280,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address1 => lb_val_1_address1,
        ce1 => lb_val_1_ce1,
        we1 => lb_val_1_we1,
        d1 => lb_val_0_load_reg_565);

    stream_mul_26ns_3bkb_U1 : component stream_mul_26ns_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 26,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_353_p0,
        din1 => src_V_data_V_0_data_out,
        ce => grp_fu_353_ce,
        dout => grp_fu_353_p2);

    stream_mul_18ns_3cud_U2 : component stream_mul_18ns_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 18,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_359_p0,
        din1 => src_V_data_V_0_data_out,
        ce => grp_fu_359_ce,
        dout => grp_fu_359_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((exitcond1_fu_313_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter4_state6)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dst_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dst_V_data_V_1_ack_out = ap_const_logic_1) and (dst_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        dst_V_data_V_1_sel_rd <= not(dst_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dst_V_data_V_1_ack_in = ap_const_logic_1) and (dst_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        dst_V_data_V_1_sel_wr <= not(dst_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((dst_V_data_V_1_state = ap_const_lv2_2) and (dst_V_data_V_1_vld_in = ap_const_logic_0)) or ((dst_V_data_V_1_state = ap_const_lv2_3) and (dst_V_data_V_1_vld_in = ap_const_logic_0) and (dst_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    dst_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((dst_V_data_V_1_state = ap_const_lv2_1) and (dst_V_data_V_1_ack_out = ap_const_logic_0)) or ((dst_V_data_V_1_state = ap_const_lv2_3) and (dst_V_data_V_1_ack_out = ap_const_logic_0) and (dst_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dst_V_data_V_1_vld_in = ap_const_logic_0) and (dst_V_data_V_1_ack_out = ap_const_logic_1))) and not(((dst_V_data_V_1_ack_out = ap_const_logic_0) and (dst_V_data_V_1_vld_in = ap_const_logic_1))) and (dst_V_data_V_1_state = ap_const_lv2_3)) or ((dst_V_data_V_1_state = ap_const_lv2_1) and (dst_V_data_V_1_ack_out = ap_const_logic_1)) or ((dst_V_data_V_1_state = ap_const_lv2_2) and (dst_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dst_V_dest_V_1_ack_out = ap_const_logic_1) and (dst_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        dst_V_dest_V_1_sel_rd <= not(dst_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dst_V_dest_V_1_ack_in = ap_const_logic_1) and (dst_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        dst_V_dest_V_1_sel_wr <= not(dst_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((dst_V_dest_V_1_state = ap_const_lv2_2) and (dst_V_dest_V_1_vld_in = ap_const_logic_0)) or ((dst_V_dest_V_1_state = ap_const_lv2_3) and (dst_V_dest_V_1_vld_in = ap_const_logic_0) and (dst_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    dst_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((dst_V_dest_V_1_state = ap_const_lv2_1) and (dst_V_dest_V_1_ack_out = ap_const_logic_0)) or ((dst_V_dest_V_1_state = ap_const_lv2_3) and (dst_V_dest_V_1_ack_out = ap_const_logic_0) and (dst_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dst_V_dest_V_1_vld_in = ap_const_logic_0) and (dst_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((dst_V_dest_V_1_ack_out = ap_const_logic_0) and (dst_V_dest_V_1_vld_in = ap_const_logic_1))) and (dst_V_dest_V_1_state = ap_const_lv2_3)) or ((dst_V_dest_V_1_state = ap_const_lv2_1) and (dst_V_dest_V_1_ack_out = ap_const_logic_1)) or ((dst_V_dest_V_1_state = ap_const_lv2_2) and (dst_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dst_V_id_V_1_ack_out = ap_const_logic_1) and (dst_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        dst_V_id_V_1_sel_rd <= not(dst_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dst_V_id_V_1_ack_in = ap_const_logic_1) and (dst_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        dst_V_id_V_1_sel_wr <= not(dst_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((dst_V_id_V_1_state = ap_const_lv2_2) and (dst_V_id_V_1_vld_in = ap_const_logic_0)) or ((dst_V_id_V_1_state = ap_const_lv2_3) and (dst_V_id_V_1_vld_in = ap_const_logic_0) and (dst_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    dst_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((dst_V_id_V_1_state = ap_const_lv2_1) and (dst_V_id_V_1_ack_out = ap_const_logic_0)) or ((dst_V_id_V_1_state = ap_const_lv2_3) and (dst_V_id_V_1_ack_out = ap_const_logic_0) and (dst_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dst_V_id_V_1_vld_in = ap_const_logic_0) and (dst_V_id_V_1_ack_out = ap_const_logic_1))) and not(((dst_V_id_V_1_ack_out = ap_const_logic_0) and (dst_V_id_V_1_vld_in = ap_const_logic_1))) and (dst_V_id_V_1_state = ap_const_lv2_3)) or ((dst_V_id_V_1_state = ap_const_lv2_1) and (dst_V_id_V_1_ack_out = ap_const_logic_1)) or ((dst_V_id_V_1_state = ap_const_lv2_2) and (dst_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dst_V_keep_V_1_ack_out = ap_const_logic_1) and (dst_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        dst_V_keep_V_1_sel_rd <= not(dst_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dst_V_keep_V_1_ack_in = ap_const_logic_1) and (dst_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        dst_V_keep_V_1_sel_wr <= not(dst_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((dst_V_keep_V_1_state = ap_const_lv2_2) and (dst_V_keep_V_1_vld_in = ap_const_logic_0)) or ((dst_V_keep_V_1_state = ap_const_lv2_3) and (dst_V_keep_V_1_vld_in = ap_const_logic_0) and (dst_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    dst_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((dst_V_keep_V_1_state = ap_const_lv2_1) and (dst_V_keep_V_1_ack_out = ap_const_logic_0)) or ((dst_V_keep_V_1_state = ap_const_lv2_3) and (dst_V_keep_V_1_ack_out = ap_const_logic_0) and (dst_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dst_V_keep_V_1_vld_in = ap_const_logic_0) and (dst_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((dst_V_keep_V_1_ack_out = ap_const_logic_0) and (dst_V_keep_V_1_vld_in = ap_const_logic_1))) and (dst_V_keep_V_1_state = ap_const_lv2_3)) or ((dst_V_keep_V_1_state = ap_const_lv2_1) and (dst_V_keep_V_1_ack_out = ap_const_logic_1)) or ((dst_V_keep_V_1_state = ap_const_lv2_2) and (dst_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dst_V_last_V_1_ack_out = ap_const_logic_1) and (dst_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        dst_V_last_V_1_sel_rd <= not(dst_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dst_V_last_V_1_ack_in = ap_const_logic_1) and (dst_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        dst_V_last_V_1_sel_wr <= not(dst_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((dst_V_last_V_1_state = ap_const_lv2_2) and (dst_V_last_V_1_vld_in = ap_const_logic_0)) or ((dst_V_last_V_1_state = ap_const_lv2_3) and (dst_V_last_V_1_vld_in = ap_const_logic_0) and (dst_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    dst_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((dst_V_last_V_1_state = ap_const_lv2_1) and (dst_V_last_V_1_ack_out = ap_const_logic_0)) or ((dst_V_last_V_1_state = ap_const_lv2_3) and (dst_V_last_V_1_ack_out = ap_const_logic_0) and (dst_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dst_V_last_V_1_vld_in = ap_const_logic_0) and (dst_V_last_V_1_ack_out = ap_const_logic_1))) and not(((dst_V_last_V_1_ack_out = ap_const_logic_0) and (dst_V_last_V_1_vld_in = ap_const_logic_1))) and (dst_V_last_V_1_state = ap_const_lv2_3)) or ((dst_V_last_V_1_state = ap_const_lv2_1) and (dst_V_last_V_1_ack_out = ap_const_logic_1)) or ((dst_V_last_V_1_state = ap_const_lv2_2) and (dst_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dst_V_strb_V_1_ack_out = ap_const_logic_1) and (dst_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        dst_V_strb_V_1_sel_rd <= not(dst_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dst_V_strb_V_1_ack_in = ap_const_logic_1) and (dst_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        dst_V_strb_V_1_sel_wr <= not(dst_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((dst_V_strb_V_1_state = ap_const_lv2_2) and (dst_V_strb_V_1_vld_in = ap_const_logic_0)) or ((dst_V_strb_V_1_state = ap_const_lv2_3) and (dst_V_strb_V_1_vld_in = ap_const_logic_0) and (dst_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    dst_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((dst_V_strb_V_1_state = ap_const_lv2_1) and (dst_V_strb_V_1_ack_out = ap_const_logic_0)) or ((dst_V_strb_V_1_state = ap_const_lv2_3) and (dst_V_strb_V_1_ack_out = ap_const_logic_0) and (dst_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dst_V_strb_V_1_vld_in = ap_const_logic_0) and (dst_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((dst_V_strb_V_1_ack_out = ap_const_logic_0) and (dst_V_strb_V_1_vld_in = ap_const_logic_1))) and (dst_V_strb_V_1_state = ap_const_lv2_3)) or ((dst_V_strb_V_1_state = ap_const_lv2_1) and (dst_V_strb_V_1_ack_out = ap_const_logic_1)) or ((dst_V_strb_V_1_state = ap_const_lv2_2) and (dst_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dst_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dst_V_user_V_1_ack_out = ap_const_logic_1) and (dst_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        dst_V_user_V_1_sel_rd <= not(dst_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dst_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dst_V_user_V_1_ack_in = ap_const_logic_1) and (dst_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        dst_V_user_V_1_sel_wr <= not(dst_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dst_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dst_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((dst_V_user_V_1_state = ap_const_lv2_2) and (dst_V_user_V_1_vld_in = ap_const_logic_0)) or ((dst_V_user_V_1_state = ap_const_lv2_3) and (dst_V_user_V_1_vld_in = ap_const_logic_0) and (dst_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    dst_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((dst_V_user_V_1_state = ap_const_lv2_1) and (dst_V_user_V_1_ack_out = ap_const_logic_0)) or ((dst_V_user_V_1_state = ap_const_lv2_3) and (dst_V_user_V_1_ack_out = ap_const_logic_0) and (dst_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dst_V_user_V_1_vld_in = ap_const_logic_0) and (dst_V_user_V_1_ack_out = ap_const_logic_1))) and not(((dst_V_user_V_1_ack_out = ap_const_logic_0) and (dst_V_user_V_1_vld_in = ap_const_logic_1))) and (dst_V_user_V_1_state = ap_const_lv2_3)) or ((dst_V_user_V_1_state = ap_const_lv2_1) and (dst_V_user_V_1_ack_out = ap_const_logic_1)) or ((dst_V_user_V_1_state = ap_const_lv2_2) and (dst_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    dst_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    dst_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_V_data_V_0_ack_out = ap_const_logic_1) and (src_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        src_V_data_V_0_sel_rd <= not(src_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_V_data_V_0_ack_in = ap_const_logic_1) and (src_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        src_V_data_V_0_sel_wr <= not(src_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_V_data_V_0_state = ap_const_lv2_2) and (src_V_data_V_0_vld_in = ap_const_logic_0)) or ((src_V_data_V_0_state = ap_const_lv2_3) and (src_V_data_V_0_vld_in = ap_const_logic_0) and (src_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    src_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((src_V_data_V_0_state = ap_const_lv2_1) and (src_V_data_V_0_ack_out = ap_const_logic_0)) or ((src_V_data_V_0_state = ap_const_lv2_3) and (src_V_data_V_0_ack_out = ap_const_logic_0) and (src_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_V_data_V_0_vld_in = ap_const_logic_0) and (src_V_data_V_0_ack_out = ap_const_logic_1))) and not(((src_V_data_V_0_ack_out = ap_const_logic_0) and (src_V_data_V_0_vld_in = ap_const_logic_1))) and (src_V_data_V_0_state = ap_const_lv2_3)) or ((src_V_data_V_0_state = ap_const_lv2_1) and (src_V_data_V_0_ack_out = ap_const_logic_1)) or ((src_V_data_V_0_state = ap_const_lv2_2) and (src_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_V_dest_V_0_ack_out = ap_const_logic_1) and (src_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        src_V_dest_V_0_sel_rd <= not(src_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_V_dest_V_0_ack_in = ap_const_logic_1) and (src_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        src_V_dest_V_0_sel_wr <= not(src_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_V_dest_V_0_state = ap_const_lv2_2) and (src_V_dest_V_0_vld_in = ap_const_logic_0)) or ((src_V_dest_V_0_state = ap_const_lv2_3) and (src_V_dest_V_0_vld_in = ap_const_logic_0) and (src_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    src_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((src_V_dest_V_0_state = ap_const_lv2_1) and (src_V_dest_V_0_ack_out = ap_const_logic_0)) or ((src_V_dest_V_0_state = ap_const_lv2_3) and (src_V_dest_V_0_ack_out = ap_const_logic_0) and (src_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_V_dest_V_0_vld_in = ap_const_logic_0) and (src_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((src_V_dest_V_0_ack_out = ap_const_logic_0) and (src_V_dest_V_0_vld_in = ap_const_logic_1))) and (src_V_dest_V_0_state = ap_const_lv2_3)) or ((src_V_dest_V_0_state = ap_const_lv2_1) and (src_V_dest_V_0_ack_out = ap_const_logic_1)) or ((src_V_dest_V_0_state = ap_const_lv2_2) and (src_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_V_id_V_0_ack_out = ap_const_logic_1) and (src_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        src_V_id_V_0_sel_rd <= not(src_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_V_id_V_0_ack_in = ap_const_logic_1) and (src_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        src_V_id_V_0_sel_wr <= not(src_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_V_id_V_0_state = ap_const_lv2_2) and (src_V_id_V_0_vld_in = ap_const_logic_0)) or ((src_V_id_V_0_state = ap_const_lv2_3) and (src_V_id_V_0_vld_in = ap_const_logic_0) and (src_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    src_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((src_V_id_V_0_state = ap_const_lv2_1) and (src_V_id_V_0_ack_out = ap_const_logic_0)) or ((src_V_id_V_0_state = ap_const_lv2_3) and (src_V_id_V_0_ack_out = ap_const_logic_0) and (src_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_V_id_V_0_vld_in = ap_const_logic_0) and (src_V_id_V_0_ack_out = ap_const_logic_1))) and not(((src_V_id_V_0_ack_out = ap_const_logic_0) and (src_V_id_V_0_vld_in = ap_const_logic_1))) and (src_V_id_V_0_state = ap_const_lv2_3)) or ((src_V_id_V_0_state = ap_const_lv2_1) and (src_V_id_V_0_ack_out = ap_const_logic_1)) or ((src_V_id_V_0_state = ap_const_lv2_2) and (src_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_V_keep_V_0_ack_out = ap_const_logic_1) and (src_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        src_V_keep_V_0_sel_rd <= not(src_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_V_keep_V_0_ack_in = ap_const_logic_1) and (src_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        src_V_keep_V_0_sel_wr <= not(src_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_V_keep_V_0_state = ap_const_lv2_2) and (src_V_keep_V_0_vld_in = ap_const_logic_0)) or ((src_V_keep_V_0_state = ap_const_lv2_3) and (src_V_keep_V_0_vld_in = ap_const_logic_0) and (src_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    src_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((src_V_keep_V_0_state = ap_const_lv2_1) and (src_V_keep_V_0_ack_out = ap_const_logic_0)) or ((src_V_keep_V_0_state = ap_const_lv2_3) and (src_V_keep_V_0_ack_out = ap_const_logic_0) and (src_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_V_keep_V_0_vld_in = ap_const_logic_0) and (src_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((src_V_keep_V_0_ack_out = ap_const_logic_0) and (src_V_keep_V_0_vld_in = ap_const_logic_1))) and (src_V_keep_V_0_state = ap_const_lv2_3)) or ((src_V_keep_V_0_state = ap_const_lv2_1) and (src_V_keep_V_0_ack_out = ap_const_logic_1)) or ((src_V_keep_V_0_state = ap_const_lv2_2) and (src_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_V_last_V_0_ack_out = ap_const_logic_1) and (src_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        src_V_last_V_0_sel_rd <= not(src_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_V_last_V_0_ack_in = ap_const_logic_1) and (src_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        src_V_last_V_0_sel_wr <= not(src_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_V_last_V_0_state = ap_const_lv2_2) and (src_V_last_V_0_vld_in = ap_const_logic_0)) or ((src_V_last_V_0_state = ap_const_lv2_3) and (src_V_last_V_0_vld_in = ap_const_logic_0) and (src_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    src_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((src_V_last_V_0_state = ap_const_lv2_1) and (src_V_last_V_0_ack_out = ap_const_logic_0)) or ((src_V_last_V_0_state = ap_const_lv2_3) and (src_V_last_V_0_ack_out = ap_const_logic_0) and (src_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_V_last_V_0_vld_in = ap_const_logic_0) and (src_V_last_V_0_ack_out = ap_const_logic_1))) and not(((src_V_last_V_0_ack_out = ap_const_logic_0) and (src_V_last_V_0_vld_in = ap_const_logic_1))) and (src_V_last_V_0_state = ap_const_lv2_3)) or ((src_V_last_V_0_state = ap_const_lv2_1) and (src_V_last_V_0_ack_out = ap_const_logic_1)) or ((src_V_last_V_0_state = ap_const_lv2_2) and (src_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_V_strb_V_0_ack_out = ap_const_logic_1) and (src_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        src_V_strb_V_0_sel_rd <= not(src_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_V_strb_V_0_ack_in = ap_const_logic_1) and (src_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        src_V_strb_V_0_sel_wr <= not(src_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_V_strb_V_0_state = ap_const_lv2_2) and (src_V_strb_V_0_vld_in = ap_const_logic_0)) or ((src_V_strb_V_0_state = ap_const_lv2_3) and (src_V_strb_V_0_vld_in = ap_const_logic_0) and (src_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    src_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((src_V_strb_V_0_state = ap_const_lv2_1) and (src_V_strb_V_0_ack_out = ap_const_logic_0)) or ((src_V_strb_V_0_state = ap_const_lv2_3) and (src_V_strb_V_0_ack_out = ap_const_logic_0) and (src_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_V_strb_V_0_vld_in = ap_const_logic_0) and (src_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((src_V_strb_V_0_ack_out = ap_const_logic_0) and (src_V_strb_V_0_vld_in = ap_const_logic_1))) and (src_V_strb_V_0_state = ap_const_lv2_3)) or ((src_V_strb_V_0_state = ap_const_lv2_1) and (src_V_strb_V_0_ack_out = ap_const_logic_1)) or ((src_V_strb_V_0_state = ap_const_lv2_2) and (src_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_V_user_V_0_ack_out = ap_const_logic_1) and (src_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        src_V_user_V_0_sel_rd <= not(src_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_V_user_V_0_ack_in = ap_const_logic_1) and (src_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        src_V_user_V_0_sel_wr <= not(src_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_V_user_V_0_state = ap_const_lv2_2) and (src_V_user_V_0_vld_in = ap_const_logic_0)) or ((src_V_user_V_0_state = ap_const_lv2_3) and (src_V_user_V_0_vld_in = ap_const_logic_0) and (src_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    src_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((src_V_user_V_0_state = ap_const_lv2_1) and (src_V_user_V_0_ack_out = ap_const_logic_0)) or ((src_V_user_V_0_state = ap_const_lv2_3) and (src_V_user_V_0_ack_out = ap_const_logic_0) and (src_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_V_user_V_0_vld_in = ap_const_logic_0) and (src_V_user_V_0_ack_out = ap_const_logic_1))) and not(((src_V_user_V_0_ack_out = ap_const_logic_0) and (src_V_user_V_0_vld_in = ap_const_logic_1))) and (src_V_user_V_0_state = ap_const_lv2_3)) or ((src_V_user_V_0_state = ap_const_lv2_1) and (src_V_user_V_0_ack_out = ap_const_logic_1)) or ((src_V_user_V_0_state = ap_const_lv2_2) and (src_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    src_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    src_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter5_p_0146_0_6_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                if (((tmp_3_reg_448 = ap_const_lv1_1) and (ap_reg_pp0_iter3_exitcond1_reg_482 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter5_p_0146_0_6_reg_226 <= streamOut_data_V_9_fu_425_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_p_0146_0_6_reg_226 <= ap_phi_reg_pp0_iter4_p_0146_0_6_reg_226;
                end if;
            end if; 
        end if;
    end process;

    col_assign_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter2_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_3_reg_448 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                col_assign_fu_108 <= cols_1_fu_389_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_assign_fu_108 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    pixels_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_313_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                pixels_reg_203 <= pixels_1_fu_319_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                pixels_reg_203 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_p_0146_0_6_reg_226 <= ap_phi_reg_pp0_iter0_p_0146_0_6_reg_226;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_p_0146_0_6_reg_226 <= ap_phi_reg_pp0_iter1_p_0146_0_6_reg_226;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_p_0146_0_6_reg_226 <= ap_phi_reg_pp0_iter2_p_0146_0_6_reg_226;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_p_0146_0_6_reg_226 <= ap_phi_reg_pp0_iter3_p_0146_0_6_reg_226;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond1_reg_482 <= exitcond1_reg_482;
                exitcond1_reg_482 <= exitcond1_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_exitcond1_reg_482 <= ap_reg_pp0_iter1_exitcond1_reg_482;
                ap_reg_pp0_iter2_tmp_data_V_2_reg_491 <= tmp_data_V_2_reg_491;
                ap_reg_pp0_iter2_tmp_dest_V_reg_528 <= tmp_dest_V_reg_528;
                ap_reg_pp0_iter2_tmp_id_V_reg_523 <= tmp_id_V_reg_523;
                ap_reg_pp0_iter2_tmp_keep_V_reg_502 <= tmp_keep_V_reg_502;
                ap_reg_pp0_iter2_tmp_last_V_reg_517 <= tmp_last_V_reg_517;
                ap_reg_pp0_iter2_tmp_strb_V_reg_507 <= tmp_strb_V_reg_507;
                ap_reg_pp0_iter2_tmp_user_V_reg_512 <= tmp_user_V_reg_512;
                ap_reg_pp0_iter3_exitcond1_reg_482 <= ap_reg_pp0_iter2_exitcond1_reg_482;
                ap_reg_pp0_iter3_tmp_data_V_2_reg_491 <= ap_reg_pp0_iter2_tmp_data_V_2_reg_491;
                ap_reg_pp0_iter3_tmp_dest_V_reg_528 <= ap_reg_pp0_iter2_tmp_dest_V_reg_528;
                ap_reg_pp0_iter3_tmp_id_V_reg_523 <= ap_reg_pp0_iter2_tmp_id_V_reg_523;
                ap_reg_pp0_iter3_tmp_keep_V_reg_502 <= ap_reg_pp0_iter2_tmp_keep_V_reg_502;
                ap_reg_pp0_iter3_tmp_last_V_reg_517 <= ap_reg_pp0_iter2_tmp_last_V_reg_517;
                ap_reg_pp0_iter3_tmp_strb_V_reg_507 <= ap_reg_pp0_iter2_tmp_strb_V_reg_507;
                ap_reg_pp0_iter3_tmp_user_V_reg_512 <= ap_reg_pp0_iter2_tmp_user_V_reg_512;
                ap_reg_pp0_iter4_exitcond1_reg_482 <= ap_reg_pp0_iter3_exitcond1_reg_482;
                ap_reg_pp0_iter4_tmp_dest_V_reg_528 <= ap_reg_pp0_iter3_tmp_dest_V_reg_528;
                ap_reg_pp0_iter4_tmp_id_V_reg_523 <= ap_reg_pp0_iter3_tmp_id_V_reg_523;
                ap_reg_pp0_iter4_tmp_keep_V_reg_502 <= ap_reg_pp0_iter3_tmp_keep_V_reg_502;
                ap_reg_pp0_iter4_tmp_last_V_reg_517 <= ap_reg_pp0_iter3_tmp_last_V_reg_517;
                    ap_reg_pp0_iter4_tmp_s_reg_548(31 downto 0) <= tmp_s_reg_548(31 downto 0);
                ap_reg_pp0_iter4_tmp_strb_V_reg_507 <= ap_reg_pp0_iter3_tmp_strb_V_reg_507;
                ap_reg_pp0_iter4_tmp_user_V_reg_512 <= ap_reg_pp0_iter3_tmp_user_V_reg_512;
                ap_reg_pp0_iter5_exitcond1_reg_482 <= ap_reg_pp0_iter4_exitcond1_reg_482;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_data_V_1_load_A = ap_const_logic_1)) then
                dst_V_data_V_1_payload_A <= dst_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_data_V_1_load_B = ap_const_logic_1)) then
                dst_V_data_V_1_payload_B <= dst_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_dest_V_1_load_A = ap_const_logic_1)) then
                dst_V_dest_V_1_payload_A <= dst_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_dest_V_1_load_B = ap_const_logic_1)) then
                dst_V_dest_V_1_payload_B <= dst_V_dest_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_id_V_1_load_A = ap_const_logic_1)) then
                dst_V_id_V_1_payload_A <= dst_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_id_V_1_load_B = ap_const_logic_1)) then
                dst_V_id_V_1_payload_B <= dst_V_id_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_keep_V_1_load_A = ap_const_logic_1)) then
                dst_V_keep_V_1_payload_A <= dst_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_keep_V_1_load_B = ap_const_logic_1)) then
                dst_V_keep_V_1_payload_B <= dst_V_keep_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_last_V_1_load_A = ap_const_logic_1)) then
                dst_V_last_V_1_payload_A <= dst_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_last_V_1_load_B = ap_const_logic_1)) then
                dst_V_last_V_1_payload_B <= dst_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_strb_V_1_load_A = ap_const_logic_1)) then
                dst_V_strb_V_1_payload_A <= dst_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_strb_V_1_load_B = ap_const_logic_1)) then
                dst_V_strb_V_1_payload_B <= dst_V_strb_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_user_V_1_load_A = ap_const_logic_1)) then
                dst_V_user_V_1_payload_A <= dst_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dst_V_user_V_1_load_B = ap_const_logic_1)) then
                dst_V_user_V_1_payload_B <= dst_V_user_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter2_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_3_reg_448 = ap_const_lv1_0))) then
                lb_val_0_addr_reg_553 <= tmp_s_fu_378_p1(11 - 1 downto 0);
                    tmp_s_reg_548(31 downto 0) <= tmp_s_fu_378_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_448 = ap_const_lv1_0) and (ap_reg_pp0_iter3_exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                lb_val_0_load_reg_565 <= lb_val_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter4_exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                p_s_reg_214 <= ap_phi_mux_p_0146_0_s_phi_fu_240_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_data_V_0_load_A = ap_const_logic_1)) then
                src_V_data_V_0_payload_A <= src_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_data_V_0_load_B = ap_const_logic_1)) then
                src_V_data_V_0_payload_B <= src_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_dest_V_0_load_A = ap_const_logic_1)) then
                src_V_dest_V_0_payload_A <= src_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_dest_V_0_load_B = ap_const_logic_1)) then
                src_V_dest_V_0_payload_B <= src_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_id_V_0_load_A = ap_const_logic_1)) then
                src_V_id_V_0_payload_A <= src_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_id_V_0_load_B = ap_const_logic_1)) then
                src_V_id_V_0_payload_B <= src_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_keep_V_0_load_A = ap_const_logic_1)) then
                src_V_keep_V_0_payload_A <= src_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_keep_V_0_load_B = ap_const_logic_1)) then
                src_V_keep_V_0_payload_B <= src_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_last_V_0_load_A = ap_const_logic_1)) then
                src_V_last_V_0_payload_A <= src_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_last_V_0_load_B = ap_const_logic_1)) then
                src_V_last_V_0_payload_B <= src_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_strb_V_0_load_A = ap_const_logic_1)) then
                src_V_strb_V_0_payload_A <= src_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_strb_V_0_load_B = ap_const_logic_1)) then
                src_V_strb_V_0_payload_B <= src_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_user_V_0_load_A = ap_const_logic_1)) then
                src_V_user_V_0_payload_A <= src_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_V_user_V_0_load_B = ap_const_logic_1)) then
                src_V_user_V_0_payload_B <= src_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_457 = ap_const_lv1_1) and (tmp_3_reg_448 = ap_const_lv1_1) and (ap_reg_pp0_iter2_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_8_reg_472 = ap_const_lv1_0) and (tmp_7_reg_467 = ap_const_lv1_0) and (tmp_6_reg_462 = ap_const_lv1_0))) then
                streamOut_data_V_1_reg_538 <= grp_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_6_reg_462 = ap_const_lv1_1) and (tmp_3_reg_448 = ap_const_lv1_1) and (ap_reg_pp0_iter2_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_8_reg_472 = ap_const_lv1_0) and (tmp_7_reg_467 = ap_const_lv1_0))) then
                streamOut_data_V_2_reg_543 <= streamOut_data_V_2_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_4_reg_452 = ap_const_lv1_1) and (tmp_3_reg_448 = ap_const_lv1_1) and (ap_reg_pp0_iter2_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_8_reg_472 = ap_const_lv1_0) and (tmp_7_reg_467 = ap_const_lv1_0) and (tmp_6_reg_462 = ap_const_lv1_0) and (tmp_5_reg_457 = ap_const_lv1_0))) then
                streamOut_data_V_reg_533 <= grp_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_2_reg_477 <= tmp_2_fu_302_p2;
                tmp_3_reg_448 <= tmp_3_fu_248_p2;
                tmp_4_reg_452 <= tmp_4_fu_254_p2;
                tmp_5_reg_457 <= tmp_5_fu_260_p2;
                tmp_6_reg_462 <= tmp_6_fu_266_p2;
                tmp_7_reg_467 <= tmp_7_fu_272_p2;
                tmp_8_reg_472 <= tmp_8_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_482 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_data_V_2_reg_491 <= src_V_data_V_0_data_out;
                tmp_dest_V_reg_528 <= src_V_dest_V_0_data_out;
                tmp_id_V_reg_523 <= src_V_id_V_0_data_out;
                tmp_keep_V_reg_502 <= src_V_keep_V_0_data_out;
                tmp_last_V_reg_517 <= src_V_last_V_0_data_out;
                tmp_strb_V_reg_507 <= src_V_strb_V_0_data_out;
                tmp_user_V_reg_512 <= src_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    tmp_s_reg_548(63 downto 32) <= "00000000000000000000000000000000";
    ap_reg_pp0_iter4_tmp_s_reg_548(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, dst_V_data_V_1_ack_in, dst_V_keep_V_1_ack_in, dst_V_strb_V_1_ack_in, dst_V_user_V_1_ack_in, dst_V_last_V_1_ack_in, dst_V_id_V_1_ack_in, dst_V_dest_V_1_ack_in, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter3, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((dst_V_dest_V_1_ack_in = ap_const_logic_0) or (dst_V_id_V_1_ack_in = ap_const_logic_0) or (dst_V_last_V_1_ack_in = ap_const_logic_0) or (dst_V_user_V_1_ack_in = ap_const_logic_0) or (dst_V_strb_V_1_ack_in = ap_const_logic_0) or (dst_V_keep_V_1_ack_in = ap_const_logic_0) or (dst_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(src_V_data_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond1_reg_482)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond1_reg_482 = ap_const_lv1_0) and (src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(src_V_data_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond1_reg_482, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_state6_io, ap_block_state7_io, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond1_reg_482 = ap_const_lv1_0) and (src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_V_data_V_0_vld_out, ap_enable_reg_pp0_iter1, exitcond1_reg_482, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_state6_io, ap_block_state7_io, ap_block_state8_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((exitcond1_reg_482 = ap_const_lv1_0) and (src_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(src_V_data_V_0_vld_out, exitcond1_reg_482)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond1_reg_482 = ap_const_lv1_0) and (src_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(dst_V_data_V_1_ack_in, ap_predicate_op88_write_state6)
    begin
                ap_block_state6_io <= ((dst_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op88_write_state6 = ap_const_boolean_1));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(dst_V_data_V_1_ack_in, ap_predicate_op93_write_state7, ap_predicate_op99_write_state7)
    begin
                ap_block_state7_io <= (((dst_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op99_write_state7 = ap_const_boolean_1)) or ((dst_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op93_write_state7 = ap_const_boolean_1)));
    end process;

        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(dst_V_data_V_1_ack_in, ap_predicate_op105_write_state8)
    begin
                ap_block_state8_io <= ((dst_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op105_write_state8 = ap_const_boolean_1));
    end process;

        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_assign_proc : process(dst_V_data_V_1_ack_in, dst_V_keep_V_1_ack_in, dst_V_strb_V_1_ack_in, dst_V_user_V_1_ack_in, dst_V_last_V_1_ack_in, dst_V_id_V_1_ack_in, dst_V_dest_V_1_ack_in)
    begin
                ap_block_state9 <= ((dst_V_dest_V_1_ack_in = ap_const_logic_0) or (dst_V_id_V_1_ack_in = ap_const_logic_0) or (dst_V_last_V_1_ack_in = ap_const_logic_0) or (dst_V_user_V_1_ack_in = ap_const_logic_0) or (dst_V_strb_V_1_ack_in = ap_const_logic_0) or (dst_V_keep_V_1_ack_in = ap_const_logic_0) or (dst_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_1132_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond1_reg_482)
    begin
                ap_condition_1132 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter4_exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter4_state6_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter4_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter4_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(dst_V_data_V_1_ack_in, dst_V_keep_V_1_ack_in, dst_V_strb_V_1_ack_in, dst_V_user_V_1_ack_in, dst_V_last_V_1_ack_in, dst_V_id_V_1_ack_in, dst_V_dest_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if ((not(((dst_V_dest_V_1_ack_in = ap_const_logic_0) or (dst_V_id_V_1_ack_in = ap_const_logic_0) or (dst_V_last_V_1_ack_in = ap_const_logic_0) or (dst_V_user_V_1_ack_in = ap_const_logic_0) or (dst_V_strb_V_1_ack_in = ap_const_logic_0) or (dst_V_keep_V_1_ack_in = ap_const_logic_0) or (dst_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0146_0_6_phi_fu_229_p4_assign_proc : process(ap_block_pp0_stage0, tmp_3_reg_448, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond1_reg_482, p_s_reg_214, ap_phi_reg_pp0_iter5_p_0146_0_6_reg_226)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter4_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_3_reg_448 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_phi_mux_p_0146_0_6_phi_fu_229_p4 <= p_s_reg_214;
        else 
            ap_phi_mux_p_0146_0_6_phi_fu_229_p4 <= ap_phi_reg_pp0_iter5_p_0146_0_6_reg_226;
        end if; 
    end process;


    ap_phi_mux_p_0146_0_s_phi_fu_240_p4_assign_proc : process(tmp_3_reg_448, streamOut_data_V_10_fu_432_p3, ap_phi_mux_p_0146_0_6_phi_fu_229_p4, ap_phi_reg_pp0_iter5_p_0146_0_s_reg_236, ap_condition_1132)
    begin
        if ((ap_const_boolean_1 = ap_condition_1132)) then
            if ((tmp_3_reg_448 = ap_const_lv1_1)) then 
                ap_phi_mux_p_0146_0_s_phi_fu_240_p4 <= ap_phi_mux_p_0146_0_6_phi_fu_229_p4;
            elsif ((tmp_3_reg_448 = ap_const_lv1_0)) then 
                ap_phi_mux_p_0146_0_s_phi_fu_240_p4 <= streamOut_data_V_10_fu_432_p3;
            else 
                ap_phi_mux_p_0146_0_s_phi_fu_240_p4 <= ap_phi_reg_pp0_iter5_p_0146_0_s_reg_236;
            end if;
        else 
            ap_phi_mux_p_0146_0_s_phi_fu_240_p4 <= ap_phi_reg_pp0_iter5_p_0146_0_s_reg_236;
        end if; 
    end process;


    ap_phi_mux_p_s_phi_fu_218_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond1_reg_482, p_s_reg_214, ap_phi_mux_p_0146_0_s_phi_fu_240_p4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter4_exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_phi_mux_p_s_phi_fu_218_p4 <= ap_phi_mux_p_0146_0_s_phi_fu_240_p4;
        else 
            ap_phi_mux_p_s_phi_fu_218_p4 <= p_s_reg_214;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_0146_0_6_reg_226 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter5_p_0146_0_s_reg_236 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op105_write_state8_assign_proc : process(tmp_3_reg_448, ap_reg_pp0_iter5_exitcond1_reg_482)
    begin
                ap_predicate_op105_write_state8 <= ((ap_reg_pp0_iter5_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_3_reg_448 = ap_const_lv1_0));
    end process;


    ap_predicate_op88_write_state6_assign_proc : process(ap_reg_pp0_iter3_exitcond1_reg_482, tmp_3_reg_448)
    begin
                ap_predicate_op88_write_state6 <= ((tmp_3_reg_448 = ap_const_lv1_1) and (ap_reg_pp0_iter3_exitcond1_reg_482 = ap_const_lv1_0));
    end process;


    ap_predicate_op93_write_state7_assign_proc : process(tmp_3_reg_448, ap_reg_pp0_iter4_exitcond1_reg_482)
    begin
                ap_predicate_op93_write_state7 <= ((tmp_3_reg_448 = ap_const_lv1_1) and (ap_reg_pp0_iter4_exitcond1_reg_482 = ap_const_lv1_0));
    end process;


    ap_predicate_op99_write_state7_assign_proc : process(tmp_3_reg_448, ap_reg_pp0_iter4_exitcond1_reg_482)
    begin
                ap_predicate_op99_write_state7 <= ((ap_reg_pp0_iter4_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_3_reg_448 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(dst_V_data_V_1_ack_in, dst_V_keep_V_1_ack_in, dst_V_strb_V_1_ack_in, dst_V_user_V_1_ack_in, dst_V_last_V_1_ack_in, dst_V_id_V_1_ack_in, dst_V_dest_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if ((not(((dst_V_dest_V_1_ack_in = ap_const_logic_0) or (dst_V_id_V_1_ack_in = ap_const_logic_0) or (dst_V_last_V_1_ack_in = ap_const_logic_0) or (dst_V_user_V_1_ack_in = ap_const_logic_0) or (dst_V_strb_V_1_ack_in = ap_const_logic_0) or (dst_V_keep_V_1_ack_in = ap_const_logic_0) or (dst_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cols_1_fu_389_p3 <= 
        ap_const_lv32_0 when (ap_reg_pp0_iter2_tmp_last_V_reg_517(0) = '1') else 
        cols_fu_383_p2;
    cols_fu_383_p2 <= std_logic_vector(unsigned(col_assign_fu_108) + unsigned(ap_const_lv32_1));
    dst_TDATA <= dst_V_data_V_1_data_out;

    dst_TDATA_blk_n_assign_proc : process(dst_V_data_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond1_reg_482, tmp_3_reg_448, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_exitcond1_reg_482, ap_enable_reg_pp0_iter6, ap_reg_pp0_iter5_exitcond1_reg_482)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter5_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_3_reg_448 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_reg_pp0_iter4_exitcond1_reg_482 = ap_const_lv1_0) and (tmp_3_reg_448 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_448 = ap_const_lv1_1) and (ap_reg_pp0_iter4_exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_448 = ap_const_lv1_1) and (ap_reg_pp0_iter3_exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dst_TDATA_blk_n <= dst_V_data_V_1_state(1);
        else 
            dst_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_TDEST <= dst_V_dest_V_1_data_out;
    dst_TID <= dst_V_id_V_1_data_out;
    dst_TKEEP <= dst_V_keep_V_1_data_out;
    dst_TLAST <= dst_V_last_V_1_data_out;
    dst_TSTRB <= dst_V_strb_V_1_data_out;
    dst_TUSER <= dst_V_user_V_1_data_out;
    dst_TVALID <= dst_V_dest_V_1_state(0);
    dst_V_data_V_1_ack_in <= dst_V_data_V_1_state(1);
    dst_V_data_V_1_ack_out <= dst_TREADY;

    dst_V_data_V_1_data_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, streamOut_data_V_9_fu_425_p3, streamOut_data_V_10_fu_432_p3, ap_block_pp0_stage0_01001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_01001)) then
            if (((ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                dst_V_data_V_1_data_in <= streamOut_data_V_10_fu_432_p3;
            elsif (((ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                dst_V_data_V_1_data_in <= streamOut_data_V_9_fu_425_p3;
            else 
                dst_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dst_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dst_V_data_V_1_data_out_assign_proc : process(dst_V_data_V_1_payload_A, dst_V_data_V_1_payload_B, dst_V_data_V_1_sel)
    begin
        if ((dst_V_data_V_1_sel = ap_const_logic_1)) then 
            dst_V_data_V_1_data_out <= dst_V_data_V_1_payload_B;
        else 
            dst_V_data_V_1_data_out <= dst_V_data_V_1_payload_A;
        end if; 
    end process;

    dst_V_data_V_1_load_A <= (not(dst_V_data_V_1_sel_wr) and dst_V_data_V_1_state_cmp_full);
    dst_V_data_V_1_load_B <= (dst_V_data_V_1_state_cmp_full and dst_V_data_V_1_sel_wr);
    dst_V_data_V_1_sel <= dst_V_data_V_1_sel_rd;
    dst_V_data_V_1_state_cmp_full <= '0' when (dst_V_data_V_1_state = ap_const_lv2_1) else '1';

    dst_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dst_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_data_V_1_vld_out <= dst_V_data_V_1_state(0);
    dst_V_dest_V_1_ack_in <= dst_V_dest_V_1_state(1);
    dst_V_dest_V_1_ack_out <= dst_TREADY;

    dst_V_dest_V_1_data_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_reg_pp0_iter3_tmp_dest_V_reg_528, ap_reg_pp0_iter4_tmp_dest_V_reg_528, ap_block_pp0_stage0_01001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_01001)) then
            if (((ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                dst_V_dest_V_1_data_in <= ap_reg_pp0_iter4_tmp_dest_V_reg_528;
            elsif (((ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                dst_V_dest_V_1_data_in <= ap_reg_pp0_iter3_tmp_dest_V_reg_528;
            else 
                dst_V_dest_V_1_data_in <= "X";
            end if;
        else 
            dst_V_dest_V_1_data_in <= "X";
        end if; 
    end process;


    dst_V_dest_V_1_data_out_assign_proc : process(dst_V_dest_V_1_payload_A, dst_V_dest_V_1_payload_B, dst_V_dest_V_1_sel)
    begin
        if ((dst_V_dest_V_1_sel = ap_const_logic_1)) then 
            dst_V_dest_V_1_data_out <= dst_V_dest_V_1_payload_B;
        else 
            dst_V_dest_V_1_data_out <= dst_V_dest_V_1_payload_A;
        end if; 
    end process;

    dst_V_dest_V_1_load_A <= (not(dst_V_dest_V_1_sel_wr) and dst_V_dest_V_1_state_cmp_full);
    dst_V_dest_V_1_load_B <= (dst_V_dest_V_1_state_cmp_full and dst_V_dest_V_1_sel_wr);
    dst_V_dest_V_1_sel <= dst_V_dest_V_1_sel_rd;
    dst_V_dest_V_1_state_cmp_full <= '0' when (dst_V_dest_V_1_state = ap_const_lv2_1) else '1';

    dst_V_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dst_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_dest_V_1_vld_out <= dst_V_dest_V_1_state(0);
    dst_V_id_V_1_ack_in <= dst_V_id_V_1_state(1);
    dst_V_id_V_1_ack_out <= dst_TREADY;

    dst_V_id_V_1_data_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_reg_pp0_iter3_tmp_id_V_reg_523, ap_reg_pp0_iter4_tmp_id_V_reg_523, ap_block_pp0_stage0_01001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_01001)) then
            if (((ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                dst_V_id_V_1_data_in <= ap_reg_pp0_iter4_tmp_id_V_reg_523;
            elsif (((ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                dst_V_id_V_1_data_in <= ap_reg_pp0_iter3_tmp_id_V_reg_523;
            else 
                dst_V_id_V_1_data_in <= "X";
            end if;
        else 
            dst_V_id_V_1_data_in <= "X";
        end if; 
    end process;


    dst_V_id_V_1_data_out_assign_proc : process(dst_V_id_V_1_payload_A, dst_V_id_V_1_payload_B, dst_V_id_V_1_sel)
    begin
        if ((dst_V_id_V_1_sel = ap_const_logic_1)) then 
            dst_V_id_V_1_data_out <= dst_V_id_V_1_payload_B;
        else 
            dst_V_id_V_1_data_out <= dst_V_id_V_1_payload_A;
        end if; 
    end process;

    dst_V_id_V_1_load_A <= (not(dst_V_id_V_1_sel_wr) and dst_V_id_V_1_state_cmp_full);
    dst_V_id_V_1_load_B <= (dst_V_id_V_1_state_cmp_full and dst_V_id_V_1_sel_wr);
    dst_V_id_V_1_sel <= dst_V_id_V_1_sel_rd;
    dst_V_id_V_1_state_cmp_full <= '0' when (dst_V_id_V_1_state = ap_const_lv2_1) else '1';

    dst_V_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dst_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_id_V_1_vld_out <= dst_V_id_V_1_state(0);
    dst_V_keep_V_1_ack_in <= dst_V_keep_V_1_state(1);
    dst_V_keep_V_1_ack_out <= dst_TREADY;

    dst_V_keep_V_1_data_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_reg_pp0_iter3_tmp_keep_V_reg_502, ap_reg_pp0_iter4_tmp_keep_V_reg_502, ap_block_pp0_stage0_01001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_01001)) then
            if (((ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                dst_V_keep_V_1_data_in <= ap_reg_pp0_iter4_tmp_keep_V_reg_502;
            elsif (((ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                dst_V_keep_V_1_data_in <= ap_reg_pp0_iter3_tmp_keep_V_reg_502;
            else 
                dst_V_keep_V_1_data_in <= "XXXX";
            end if;
        else 
            dst_V_keep_V_1_data_in <= "XXXX";
        end if; 
    end process;


    dst_V_keep_V_1_data_out_assign_proc : process(dst_V_keep_V_1_payload_A, dst_V_keep_V_1_payload_B, dst_V_keep_V_1_sel)
    begin
        if ((dst_V_keep_V_1_sel = ap_const_logic_1)) then 
            dst_V_keep_V_1_data_out <= dst_V_keep_V_1_payload_B;
        else 
            dst_V_keep_V_1_data_out <= dst_V_keep_V_1_payload_A;
        end if; 
    end process;

    dst_V_keep_V_1_load_A <= (not(dst_V_keep_V_1_sel_wr) and dst_V_keep_V_1_state_cmp_full);
    dst_V_keep_V_1_load_B <= (dst_V_keep_V_1_state_cmp_full and dst_V_keep_V_1_sel_wr);
    dst_V_keep_V_1_sel <= dst_V_keep_V_1_sel_rd;
    dst_V_keep_V_1_state_cmp_full <= '0' when (dst_V_keep_V_1_state = ap_const_lv2_1) else '1';

    dst_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dst_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_keep_V_1_vld_out <= dst_V_keep_V_1_state(0);
    dst_V_last_V_1_ack_in <= dst_V_last_V_1_state(1);
    dst_V_last_V_1_ack_out <= dst_TREADY;

    dst_V_last_V_1_data_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_reg_pp0_iter3_tmp_last_V_reg_517, ap_reg_pp0_iter4_tmp_last_V_reg_517, ap_block_pp0_stage0_01001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_01001)) then
            if (((ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                dst_V_last_V_1_data_in <= ap_reg_pp0_iter4_tmp_last_V_reg_517;
            elsif (((ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                dst_V_last_V_1_data_in <= ap_reg_pp0_iter3_tmp_last_V_reg_517;
            else 
                dst_V_last_V_1_data_in <= "X";
            end if;
        else 
            dst_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    dst_V_last_V_1_data_out_assign_proc : process(dst_V_last_V_1_payload_A, dst_V_last_V_1_payload_B, dst_V_last_V_1_sel)
    begin
        if ((dst_V_last_V_1_sel = ap_const_logic_1)) then 
            dst_V_last_V_1_data_out <= dst_V_last_V_1_payload_B;
        else 
            dst_V_last_V_1_data_out <= dst_V_last_V_1_payload_A;
        end if; 
    end process;

    dst_V_last_V_1_load_A <= (not(dst_V_last_V_1_sel_wr) and dst_V_last_V_1_state_cmp_full);
    dst_V_last_V_1_load_B <= (dst_V_last_V_1_state_cmp_full and dst_V_last_V_1_sel_wr);
    dst_V_last_V_1_sel <= dst_V_last_V_1_sel_rd;
    dst_V_last_V_1_state_cmp_full <= '0' when (dst_V_last_V_1_state = ap_const_lv2_1) else '1';

    dst_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dst_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_last_V_1_vld_out <= dst_V_last_V_1_state(0);
    dst_V_strb_V_1_ack_in <= dst_V_strb_V_1_state(1);
    dst_V_strb_V_1_ack_out <= dst_TREADY;

    dst_V_strb_V_1_data_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_reg_pp0_iter3_tmp_strb_V_reg_507, ap_reg_pp0_iter4_tmp_strb_V_reg_507, ap_block_pp0_stage0_01001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_01001)) then
            if (((ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                dst_V_strb_V_1_data_in <= ap_reg_pp0_iter4_tmp_strb_V_reg_507;
            elsif (((ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                dst_V_strb_V_1_data_in <= ap_reg_pp0_iter3_tmp_strb_V_reg_507;
            else 
                dst_V_strb_V_1_data_in <= "XXXX";
            end if;
        else 
            dst_V_strb_V_1_data_in <= "XXXX";
        end if; 
    end process;


    dst_V_strb_V_1_data_out_assign_proc : process(dst_V_strb_V_1_payload_A, dst_V_strb_V_1_payload_B, dst_V_strb_V_1_sel)
    begin
        if ((dst_V_strb_V_1_sel = ap_const_logic_1)) then 
            dst_V_strb_V_1_data_out <= dst_V_strb_V_1_payload_B;
        else 
            dst_V_strb_V_1_data_out <= dst_V_strb_V_1_payload_A;
        end if; 
    end process;

    dst_V_strb_V_1_load_A <= (not(dst_V_strb_V_1_sel_wr) and dst_V_strb_V_1_state_cmp_full);
    dst_V_strb_V_1_load_B <= (dst_V_strb_V_1_state_cmp_full and dst_V_strb_V_1_sel_wr);
    dst_V_strb_V_1_sel <= dst_V_strb_V_1_sel_rd;
    dst_V_strb_V_1_state_cmp_full <= '0' when (dst_V_strb_V_1_state = ap_const_lv2_1) else '1';

    dst_V_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dst_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_strb_V_1_vld_out <= dst_V_strb_V_1_state(0);
    dst_V_user_V_1_ack_in <= dst_V_user_V_1_state(1);
    dst_V_user_V_1_ack_out <= dst_TREADY;

    dst_V_user_V_1_data_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_reg_pp0_iter3_tmp_user_V_reg_512, ap_reg_pp0_iter4_tmp_user_V_reg_512, ap_block_pp0_stage0_01001)
    begin
        if ((ap_const_boolean_0 = ap_block_pp0_stage0_01001)) then
            if (((ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
                dst_V_user_V_1_data_in <= ap_reg_pp0_iter4_tmp_user_V_reg_512;
            elsif (((ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                dst_V_user_V_1_data_in <= ap_reg_pp0_iter3_tmp_user_V_reg_512;
            else 
                dst_V_user_V_1_data_in <= "X";
            end if;
        else 
            dst_V_user_V_1_data_in <= "X";
        end if; 
    end process;


    dst_V_user_V_1_data_out_assign_proc : process(dst_V_user_V_1_payload_A, dst_V_user_V_1_payload_B, dst_V_user_V_1_sel)
    begin
        if ((dst_V_user_V_1_sel = ap_const_logic_1)) then 
            dst_V_user_V_1_data_out <= dst_V_user_V_1_payload_B;
        else 
            dst_V_user_V_1_data_out <= dst_V_user_V_1_payload_A;
        end if; 
    end process;

    dst_V_user_V_1_load_A <= (not(dst_V_user_V_1_sel_wr) and dst_V_user_V_1_state_cmp_full);
    dst_V_user_V_1_load_B <= (dst_V_user_V_1_state_cmp_full and dst_V_user_V_1_sel_wr);
    dst_V_user_V_1_sel <= dst_V_user_V_1_sel_rd;
    dst_V_user_V_1_state_cmp_full <= '0' when (dst_V_user_V_1_state = ap_const_lv2_1) else '1';

    dst_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_predicate_op88_write_state6, ap_predicate_op99_write_state7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op88_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)))) then 
            dst_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            dst_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dst_V_user_V_1_vld_out <= dst_V_user_V_1_state(0);
    exitcond1_fu_313_p2 <= "1" when (pixels_reg_203 = ap_const_lv20_E1000) else "0";

    grp_fu_353_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_353_ce <= ap_const_logic_1;
        else 
            grp_fu_353_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_353_p0 <= ap_const_lv32_1010101(26 - 1 downto 0);

    grp_fu_359_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_359_ce <= ap_const_logic_1;
        else 
            grp_fu_359_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_359_p0 <= ap_const_lv32_10101(18 - 1 downto 0);
    lb_val_0_address0 <= tmp_s_fu_378_p1(11 - 1 downto 0);

    lb_val_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            lb_val_0_ce0 <= ap_const_logic_1;
        else 
            lb_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lb_val_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            lb_val_0_ce1 <= ap_const_logic_1;
        else 
            lb_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lb_val_0_we1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_exitcond1_reg_482, tmp_3_reg_448, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_reg_448 = ap_const_lv1_0) and (ap_reg_pp0_iter3_exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            lb_val_0_we1 <= ap_const_logic_1;
        else 
            lb_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lb_val_1_address1 <= ap_reg_pp0_iter4_tmp_s_reg_548(11 - 1 downto 0);

    lb_val_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            lb_val_1_ce1 <= ap_const_logic_1;
        else 
            lb_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lb_val_1_we1_assign_proc : process(ap_enable_reg_pp0_iter5, ap_predicate_op99_write_state7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op99_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            lb_val_1_we1 <= ap_const_logic_1;
        else 
            lb_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    pixels_1_fu_319_p2 <= std_logic_vector(unsigned(pixels_reg_203) + unsigned(ap_const_lv20_1));

    src_TDATA_blk_n_assign_proc : process(src_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond1_reg_482)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_TDATA_blk_n <= src_V_data_V_0_state(0);
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_TREADY <= src_V_dest_V_0_state(1);
    src_V_data_V_0_ack_in <= src_V_data_V_0_state(1);

    src_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_482, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_data_V_0_data_out_assign_proc : process(src_V_data_V_0_payload_A, src_V_data_V_0_payload_B, src_V_data_V_0_sel)
    begin
        if ((src_V_data_V_0_sel = ap_const_logic_1)) then 
            src_V_data_V_0_data_out <= src_V_data_V_0_payload_B;
        else 
            src_V_data_V_0_data_out <= src_V_data_V_0_payload_A;
        end if; 
    end process;

    src_V_data_V_0_load_A <= (src_V_data_V_0_state_cmp_full and not(src_V_data_V_0_sel_wr));
    src_V_data_V_0_load_B <= (src_V_data_V_0_state_cmp_full and src_V_data_V_0_sel_wr);
    src_V_data_V_0_sel <= src_V_data_V_0_sel_rd;
    src_V_data_V_0_state_cmp_full <= '0' when (src_V_data_V_0_state = ap_const_lv2_1) else '1';
    src_V_data_V_0_vld_in <= src_TVALID;
    src_V_data_V_0_vld_out <= src_V_data_V_0_state(0);
    src_V_dest_V_0_ack_in <= src_V_dest_V_0_state(1);

    src_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_482, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_dest_V_0_data_out_assign_proc : process(src_V_dest_V_0_payload_A, src_V_dest_V_0_payload_B, src_V_dest_V_0_sel)
    begin
        if ((src_V_dest_V_0_sel = ap_const_logic_1)) then 
            src_V_dest_V_0_data_out <= src_V_dest_V_0_payload_B;
        else 
            src_V_dest_V_0_data_out <= src_V_dest_V_0_payload_A;
        end if; 
    end process;

    src_V_dest_V_0_load_A <= (src_V_dest_V_0_state_cmp_full and not(src_V_dest_V_0_sel_wr));
    src_V_dest_V_0_load_B <= (src_V_dest_V_0_state_cmp_full and src_V_dest_V_0_sel_wr);
    src_V_dest_V_0_sel <= src_V_dest_V_0_sel_rd;
    src_V_dest_V_0_state_cmp_full <= '0' when (src_V_dest_V_0_state = ap_const_lv2_1) else '1';
    src_V_dest_V_0_vld_in <= src_TVALID;
    src_V_dest_V_0_vld_out <= src_V_dest_V_0_state(0);
    src_V_id_V_0_ack_in <= src_V_id_V_0_state(1);

    src_V_id_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_482, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_id_V_0_data_out_assign_proc : process(src_V_id_V_0_payload_A, src_V_id_V_0_payload_B, src_V_id_V_0_sel)
    begin
        if ((src_V_id_V_0_sel = ap_const_logic_1)) then 
            src_V_id_V_0_data_out <= src_V_id_V_0_payload_B;
        else 
            src_V_id_V_0_data_out <= src_V_id_V_0_payload_A;
        end if; 
    end process;

    src_V_id_V_0_load_A <= (src_V_id_V_0_state_cmp_full and not(src_V_id_V_0_sel_wr));
    src_V_id_V_0_load_B <= (src_V_id_V_0_state_cmp_full and src_V_id_V_0_sel_wr);
    src_V_id_V_0_sel <= src_V_id_V_0_sel_rd;
    src_V_id_V_0_state_cmp_full <= '0' when (src_V_id_V_0_state = ap_const_lv2_1) else '1';
    src_V_id_V_0_vld_in <= src_TVALID;
    src_V_id_V_0_vld_out <= src_V_id_V_0_state(0);
    src_V_keep_V_0_ack_in <= src_V_keep_V_0_state(1);

    src_V_keep_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_482, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_keep_V_0_data_out_assign_proc : process(src_V_keep_V_0_payload_A, src_V_keep_V_0_payload_B, src_V_keep_V_0_sel)
    begin
        if ((src_V_keep_V_0_sel = ap_const_logic_1)) then 
            src_V_keep_V_0_data_out <= src_V_keep_V_0_payload_B;
        else 
            src_V_keep_V_0_data_out <= src_V_keep_V_0_payload_A;
        end if; 
    end process;

    src_V_keep_V_0_load_A <= (src_V_keep_V_0_state_cmp_full and not(src_V_keep_V_0_sel_wr));
    src_V_keep_V_0_load_B <= (src_V_keep_V_0_state_cmp_full and src_V_keep_V_0_sel_wr);
    src_V_keep_V_0_sel <= src_V_keep_V_0_sel_rd;
    src_V_keep_V_0_state_cmp_full <= '0' when (src_V_keep_V_0_state = ap_const_lv2_1) else '1';
    src_V_keep_V_0_vld_in <= src_TVALID;
    src_V_keep_V_0_vld_out <= src_V_keep_V_0_state(0);
    src_V_last_V_0_ack_in <= src_V_last_V_0_state(1);

    src_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_482, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_last_V_0_data_out_assign_proc : process(src_V_last_V_0_payload_A, src_V_last_V_0_payload_B, src_V_last_V_0_sel)
    begin
        if ((src_V_last_V_0_sel = ap_const_logic_1)) then 
            src_V_last_V_0_data_out <= src_V_last_V_0_payload_B;
        else 
            src_V_last_V_0_data_out <= src_V_last_V_0_payload_A;
        end if; 
    end process;

    src_V_last_V_0_load_A <= (src_V_last_V_0_state_cmp_full and not(src_V_last_V_0_sel_wr));
    src_V_last_V_0_load_B <= (src_V_last_V_0_state_cmp_full and src_V_last_V_0_sel_wr);
    src_V_last_V_0_sel <= src_V_last_V_0_sel_rd;
    src_V_last_V_0_state_cmp_full <= '0' when (src_V_last_V_0_state = ap_const_lv2_1) else '1';
    src_V_last_V_0_vld_in <= src_TVALID;
    src_V_last_V_0_vld_out <= src_V_last_V_0_state(0);
    src_V_strb_V_0_ack_in <= src_V_strb_V_0_state(1);

    src_V_strb_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_482, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_strb_V_0_data_out_assign_proc : process(src_V_strb_V_0_payload_A, src_V_strb_V_0_payload_B, src_V_strb_V_0_sel)
    begin
        if ((src_V_strb_V_0_sel = ap_const_logic_1)) then 
            src_V_strb_V_0_data_out <= src_V_strb_V_0_payload_B;
        else 
            src_V_strb_V_0_data_out <= src_V_strb_V_0_payload_A;
        end if; 
    end process;

    src_V_strb_V_0_load_A <= (src_V_strb_V_0_state_cmp_full and not(src_V_strb_V_0_sel_wr));
    src_V_strb_V_0_load_B <= (src_V_strb_V_0_state_cmp_full and src_V_strb_V_0_sel_wr);
    src_V_strb_V_0_sel <= src_V_strb_V_0_sel_rd;
    src_V_strb_V_0_state_cmp_full <= '0' when (src_V_strb_V_0_state = ap_const_lv2_1) else '1';
    src_V_strb_V_0_vld_in <= src_TVALID;
    src_V_strb_V_0_vld_out <= src_V_strb_V_0_state(0);
    src_V_user_V_0_ack_in <= src_V_user_V_0_state(1);

    src_V_user_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond1_reg_482, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_482 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            src_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_V_user_V_0_data_out_assign_proc : process(src_V_user_V_0_payload_A, src_V_user_V_0_payload_B, src_V_user_V_0_sel)
    begin
        if ((src_V_user_V_0_sel = ap_const_logic_1)) then 
            src_V_user_V_0_data_out <= src_V_user_V_0_payload_B;
        else 
            src_V_user_V_0_data_out <= src_V_user_V_0_payload_A;
        end if; 
    end process;

    src_V_user_V_0_load_A <= (src_V_user_V_0_state_cmp_full and not(src_V_user_V_0_sel_wr));
    src_V_user_V_0_load_B <= (src_V_user_V_0_state_cmp_full and src_V_user_V_0_sel_wr);
    src_V_user_V_0_sel <= src_V_user_V_0_sel_rd;
    src_V_user_V_0_state_cmp_full <= '0' when (src_V_user_V_0_state = ap_const_lv2_1) else '1';
    src_V_user_V_0_vld_in <= src_TVALID;
    src_V_user_V_0_vld_out <= src_V_user_V_0_state(0);
    streamOut_data_V_10_fu_432_p3 <= 
        ap_const_lv32_0 when (tmp_2_reg_477(0) = '1') else 
        ap_phi_mux_p_0146_0_6_phi_fu_229_p4;
    streamOut_data_V_10_s_fu_419_p3 <= 
        ap_reg_pp0_iter3_tmp_data_V_2_reg_491 when (tmp_7_reg_467(0) = '1') else 
        streamOut_data_V_6_fu_413_p3;
    streamOut_data_V_2_fu_370_p2 <= std_logic_vector(signed(ap_reg_pp0_iter2_tmp_data_V_2_reg_491) + signed(tmp_9_fu_365_p2));
    streamOut_data_V_4_fu_401_p3 <= 
        streamOut_data_V_reg_533 when (tmp_4_reg_452(0) = '1') else 
        ap_phi_mux_p_s_phi_fu_218_p4;
    streamOut_data_V_5_fu_407_p3 <= 
        streamOut_data_V_1_reg_538 when (tmp_5_reg_457(0) = '1') else 
        streamOut_data_V_4_fu_401_p3;
    streamOut_data_V_6_fu_413_p3 <= 
        streamOut_data_V_2_reg_543 when (tmp_6_reg_462(0) = '1') else 
        streamOut_data_V_5_fu_407_p3;
    streamOut_data_V_9_fu_425_p3 <= 
        ap_reg_pp0_iter3_tmp_data_V_2_reg_491 when (tmp_8_reg_472(0) = '1') else 
        streamOut_data_V_10_s_fu_419_p3;
    tmp1_fu_284_p2 <= (tmp_8_fu_278_p2 or tmp_7_fu_272_p2);
    tmp2_fu_290_p2 <= (tmp_6_fu_266_p2 or tmp_5_fu_260_p2);
    tmp_1_fu_296_p2 <= (tmp2_fu_290_p2 or tmp1_fu_284_p2);
    tmp_2_fu_302_p2 <= (tmp_4_fu_254_p2 or tmp_1_fu_296_p2);
    tmp_3_fu_248_p2 <= "1" when (kernelchc = ap_const_lv8_4) else "0";
    tmp_4_fu_254_p2 <= "1" when (channelselector = ap_const_lv8_0) else "0";
    tmp_5_fu_260_p2 <= "1" when (channelselector = ap_const_lv8_1) else "0";
    tmp_6_fu_266_p2 <= "1" when (channelselector = ap_const_lv8_2) else "0";
    tmp_7_fu_272_p2 <= "1" when (channelselector = ap_const_lv8_3) else "0";
    tmp_8_fu_278_p2 <= "1" when (channelselector = ap_const_lv8_4) else "0";
    tmp_9_fu_365_p2 <= std_logic_vector(shift_left(unsigned(ap_reg_pp0_iter2_tmp_data_V_2_reg_491),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    tmp_s_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_fu_108),64));
end behav;
