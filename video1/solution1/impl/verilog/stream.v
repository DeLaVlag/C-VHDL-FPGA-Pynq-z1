// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stream,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.568000,HLS_SYN_LAT=5767,HLS_SYN_TPT=none,HLS_SYN_MEM=30,HLS_SYN_DSP=0,HLS_SYN_FF=742,HLS_SYN_LUT=1736}" *)

module stream (
        ap_clk,
        ap_rst_n,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        dst_TDATA,
        dst_TVALID,
        dst_TREADY,
        dst_TKEEP,
        dst_TSTRB,
        dst_TUSER,
        dst_TLAST,
        dst_TID,
        dst_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
input  [3:0] src_TKEEP;
input  [3:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
output  [31:0] dst_TDATA;
output   dst_TVALID;
input   dst_TREADY;
output  [3:0] dst_TKEEP;
output  [3:0] dst_TSTRB;
output  [0:0] dst_TUSER;
output  [0:0] dst_TLAST;
output  [0:0] dst_TID;
output  [0:0] dst_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] src_V_data_V_0_data_out;
wire    src_V_data_V_0_vld_in;
wire    src_V_data_V_0_vld_out;
wire    src_V_data_V_0_ack_in;
reg    src_V_data_V_0_ack_out;
reg   [31:0] src_V_data_V_0_payload_A;
reg   [31:0] src_V_data_V_0_payload_B;
reg    src_V_data_V_0_sel_rd;
reg    src_V_data_V_0_sel_wr;
wire    src_V_data_V_0_sel;
wire    src_V_data_V_0_load_A;
wire    src_V_data_V_0_load_B;
reg   [1:0] src_V_data_V_0_state;
wire    src_V_data_V_0_state_cmp_full;
reg   [3:0] src_V_keep_V_0_data_out;
wire    src_V_keep_V_0_vld_in;
wire    src_V_keep_V_0_vld_out;
wire    src_V_keep_V_0_ack_in;
reg    src_V_keep_V_0_ack_out;
reg   [3:0] src_V_keep_V_0_payload_A;
reg   [3:0] src_V_keep_V_0_payload_B;
reg    src_V_keep_V_0_sel_rd;
reg    src_V_keep_V_0_sel_wr;
wire    src_V_keep_V_0_sel;
wire    src_V_keep_V_0_load_A;
wire    src_V_keep_V_0_load_B;
reg   [1:0] src_V_keep_V_0_state;
wire    src_V_keep_V_0_state_cmp_full;
reg   [3:0] src_V_strb_V_0_data_out;
wire    src_V_strb_V_0_vld_in;
wire    src_V_strb_V_0_vld_out;
wire    src_V_strb_V_0_ack_in;
reg    src_V_strb_V_0_ack_out;
reg   [3:0] src_V_strb_V_0_payload_A;
reg   [3:0] src_V_strb_V_0_payload_B;
reg    src_V_strb_V_0_sel_rd;
reg    src_V_strb_V_0_sel_wr;
wire    src_V_strb_V_0_sel;
wire    src_V_strb_V_0_load_A;
wire    src_V_strb_V_0_load_B;
reg   [1:0] src_V_strb_V_0_state;
wire    src_V_strb_V_0_state_cmp_full;
reg   [0:0] src_V_user_V_0_data_out;
wire    src_V_user_V_0_vld_in;
wire    src_V_user_V_0_vld_out;
wire    src_V_user_V_0_ack_in;
reg    src_V_user_V_0_ack_out;
reg   [0:0] src_V_user_V_0_payload_A;
reg   [0:0] src_V_user_V_0_payload_B;
reg    src_V_user_V_0_sel_rd;
reg    src_V_user_V_0_sel_wr;
wire    src_V_user_V_0_sel;
wire    src_V_user_V_0_load_A;
wire    src_V_user_V_0_load_B;
reg   [1:0] src_V_user_V_0_state;
wire    src_V_user_V_0_state_cmp_full;
reg   [0:0] src_V_last_V_0_data_out;
wire    src_V_last_V_0_vld_in;
wire    src_V_last_V_0_vld_out;
wire    src_V_last_V_0_ack_in;
reg    src_V_last_V_0_ack_out;
reg   [0:0] src_V_last_V_0_payload_A;
reg   [0:0] src_V_last_V_0_payload_B;
reg    src_V_last_V_0_sel_rd;
reg    src_V_last_V_0_sel_wr;
wire    src_V_last_V_0_sel;
wire    src_V_last_V_0_load_A;
wire    src_V_last_V_0_load_B;
reg   [1:0] src_V_last_V_0_state;
wire    src_V_last_V_0_state_cmp_full;
reg   [0:0] src_V_id_V_0_data_out;
wire    src_V_id_V_0_vld_in;
wire    src_V_id_V_0_vld_out;
wire    src_V_id_V_0_ack_in;
reg    src_V_id_V_0_ack_out;
reg   [0:0] src_V_id_V_0_payload_A;
reg   [0:0] src_V_id_V_0_payload_B;
reg    src_V_id_V_0_sel_rd;
reg    src_V_id_V_0_sel_wr;
wire    src_V_id_V_0_sel;
wire    src_V_id_V_0_load_A;
wire    src_V_id_V_0_load_B;
reg   [1:0] src_V_id_V_0_state;
wire    src_V_id_V_0_state_cmp_full;
reg   [0:0] src_V_dest_V_0_data_out;
wire    src_V_dest_V_0_vld_in;
wire    src_V_dest_V_0_vld_out;
wire    src_V_dest_V_0_ack_in;
reg    src_V_dest_V_0_ack_out;
reg   [0:0] src_V_dest_V_0_payload_A;
reg   [0:0] src_V_dest_V_0_payload_B;
reg    src_V_dest_V_0_sel_rd;
reg    src_V_dest_V_0_sel_wr;
wire    src_V_dest_V_0_sel;
wire    src_V_dest_V_0_load_A;
wire    src_V_dest_V_0_load_B;
reg   [1:0] src_V_dest_V_0_state;
wire    src_V_dest_V_0_state_cmp_full;
reg   [31:0] dst_V_data_V_1_data_in;
reg   [31:0] dst_V_data_V_1_data_out;
reg    dst_V_data_V_1_vld_in;
wire    dst_V_data_V_1_vld_out;
wire    dst_V_data_V_1_ack_in;
wire    dst_V_data_V_1_ack_out;
reg   [31:0] dst_V_data_V_1_payload_A;
reg   [31:0] dst_V_data_V_1_payload_B;
reg    dst_V_data_V_1_sel_rd;
reg    dst_V_data_V_1_sel_wr;
wire    dst_V_data_V_1_sel;
wire    dst_V_data_V_1_load_A;
wire    dst_V_data_V_1_load_B;
reg   [1:0] dst_V_data_V_1_state;
wire    dst_V_data_V_1_state_cmp_full;
reg   [3:0] dst_V_keep_V_1_data_in;
reg   [3:0] dst_V_keep_V_1_data_out;
reg    dst_V_keep_V_1_vld_in;
wire    dst_V_keep_V_1_vld_out;
wire    dst_V_keep_V_1_ack_in;
wire    dst_V_keep_V_1_ack_out;
reg   [3:0] dst_V_keep_V_1_payload_A;
reg   [3:0] dst_V_keep_V_1_payload_B;
reg    dst_V_keep_V_1_sel_rd;
reg    dst_V_keep_V_1_sel_wr;
wire    dst_V_keep_V_1_sel;
wire    dst_V_keep_V_1_load_A;
wire    dst_V_keep_V_1_load_B;
reg   [1:0] dst_V_keep_V_1_state;
wire    dst_V_keep_V_1_state_cmp_full;
reg   [3:0] dst_V_strb_V_1_data_in;
reg   [3:0] dst_V_strb_V_1_data_out;
reg    dst_V_strb_V_1_vld_in;
wire    dst_V_strb_V_1_vld_out;
wire    dst_V_strb_V_1_ack_in;
wire    dst_V_strb_V_1_ack_out;
reg   [3:0] dst_V_strb_V_1_payload_A;
reg   [3:0] dst_V_strb_V_1_payload_B;
reg    dst_V_strb_V_1_sel_rd;
reg    dst_V_strb_V_1_sel_wr;
wire    dst_V_strb_V_1_sel;
wire    dst_V_strb_V_1_load_A;
wire    dst_V_strb_V_1_load_B;
reg   [1:0] dst_V_strb_V_1_state;
wire    dst_V_strb_V_1_state_cmp_full;
reg   [0:0] dst_V_user_V_1_data_in;
reg   [0:0] dst_V_user_V_1_data_out;
reg    dst_V_user_V_1_vld_in;
wire    dst_V_user_V_1_vld_out;
wire    dst_V_user_V_1_ack_in;
wire    dst_V_user_V_1_ack_out;
reg   [0:0] dst_V_user_V_1_payload_A;
reg   [0:0] dst_V_user_V_1_payload_B;
reg    dst_V_user_V_1_sel_rd;
reg    dst_V_user_V_1_sel_wr;
wire    dst_V_user_V_1_sel;
wire    dst_V_user_V_1_load_A;
wire    dst_V_user_V_1_load_B;
reg   [1:0] dst_V_user_V_1_state;
wire    dst_V_user_V_1_state_cmp_full;
reg   [0:0] dst_V_last_V_1_data_in;
reg   [0:0] dst_V_last_V_1_data_out;
reg    dst_V_last_V_1_vld_in;
wire    dst_V_last_V_1_vld_out;
wire    dst_V_last_V_1_ack_in;
wire    dst_V_last_V_1_ack_out;
reg   [0:0] dst_V_last_V_1_payload_A;
reg   [0:0] dst_V_last_V_1_payload_B;
reg    dst_V_last_V_1_sel_rd;
reg    dst_V_last_V_1_sel_wr;
wire    dst_V_last_V_1_sel;
wire    dst_V_last_V_1_load_A;
wire    dst_V_last_V_1_load_B;
reg   [1:0] dst_V_last_V_1_state;
wire    dst_V_last_V_1_state_cmp_full;
reg   [0:0] dst_V_id_V_1_data_in;
reg   [0:0] dst_V_id_V_1_data_out;
reg    dst_V_id_V_1_vld_in;
wire    dst_V_id_V_1_vld_out;
wire    dst_V_id_V_1_ack_in;
wire    dst_V_id_V_1_ack_out;
reg   [0:0] dst_V_id_V_1_payload_A;
reg   [0:0] dst_V_id_V_1_payload_B;
reg    dst_V_id_V_1_sel_rd;
reg    dst_V_id_V_1_sel_wr;
wire    dst_V_id_V_1_sel;
wire    dst_V_id_V_1_load_A;
wire    dst_V_id_V_1_load_B;
reg   [1:0] dst_V_id_V_1_state;
wire    dst_V_id_V_1_state_cmp_full;
reg   [0:0] dst_V_dest_V_1_data_in;
reg   [0:0] dst_V_dest_V_1_data_out;
reg    dst_V_dest_V_1_vld_in;
wire    dst_V_dest_V_1_vld_out;
wire    dst_V_dest_V_1_ack_in;
wire    dst_V_dest_V_1_ack_out;
reg   [0:0] dst_V_dest_V_1_payload_A;
reg   [0:0] dst_V_dest_V_1_payload_B;
reg    dst_V_dest_V_1_sel_rd;
reg    dst_V_dest_V_1_sel_wr;
wire    dst_V_dest_V_1_sel;
wire    dst_V_dest_V_1_load_A;
wire    dst_V_dest_V_1_load_B;
reg   [1:0] dst_V_dest_V_1_state;
wire    dst_V_dest_V_1_state_cmp_full;
wire   [7:0] l;
wire   [7:0] c;
wire   [7:0] r;
reg   [15:0] y;
reg   [15:0] x;
reg   [10:0] linebuf_val_data_V_0_address0;
reg    linebuf_val_data_V_0_ce0;
reg    linebuf_val_data_V_0_we0;
wire   [31:0] linebuf_val_data_V_0_q0;
reg   [10:0] linebuf_val_data_V_1_address0;
reg    linebuf_val_data_V_1_ce0;
reg    linebuf_val_data_V_1_we0;
wire   [31:0] linebuf_val_data_V_1_q0;
reg   [10:0] linebuf_val_data_V_2_address0;
reg    linebuf_val_data_V_2_ce0;
reg    linebuf_val_data_V_2_we0;
wire   [31:0] linebuf_val_data_V_2_q0;
reg   [10:0] linebuf_val_keep_V_0_address0;
reg    linebuf_val_keep_V_0_ce0;
reg    linebuf_val_keep_V_0_we0;
wire   [3:0] linebuf_val_keep_V_0_q0;
reg   [10:0] linebuf_val_keep_V_1_address0;
reg    linebuf_val_keep_V_1_ce0;
reg    linebuf_val_keep_V_1_we0;
wire   [3:0] linebuf_val_keep_V_1_q0;
reg   [10:0] linebuf_val_keep_V_2_address0;
reg    linebuf_val_keep_V_2_ce0;
reg    linebuf_val_keep_V_2_we0;
wire   [3:0] linebuf_val_keep_V_2_q0;
reg   [10:0] linebuf_val_strb_V_0_address0;
reg    linebuf_val_strb_V_0_ce0;
reg    linebuf_val_strb_V_0_we0;
wire   [3:0] linebuf_val_strb_V_0_q0;
reg   [10:0] linebuf_val_strb_V_1_address0;
reg    linebuf_val_strb_V_1_ce0;
reg    linebuf_val_strb_V_1_we0;
wire   [3:0] linebuf_val_strb_V_1_q0;
reg   [10:0] linebuf_val_strb_V_2_address0;
reg    linebuf_val_strb_V_2_ce0;
reg    linebuf_val_strb_V_2_we0;
wire   [3:0] linebuf_val_strb_V_2_q0;
reg   [10:0] linebuf_val_user_V_0_address0;
reg    linebuf_val_user_V_0_ce0;
reg    linebuf_val_user_V_0_we0;
wire   [0:0] linebuf_val_user_V_0_q0;
reg   [10:0] linebuf_val_user_V_1_address0;
reg    linebuf_val_user_V_1_ce0;
reg    linebuf_val_user_V_1_we0;
wire   [0:0] linebuf_val_user_V_1_q0;
reg   [10:0] linebuf_val_user_V_2_address0;
reg    linebuf_val_user_V_2_ce0;
reg    linebuf_val_user_V_2_we0;
wire   [0:0] linebuf_val_user_V_2_q0;
reg   [10:0] linebuf_val_last_V_0_address0;
reg    linebuf_val_last_V_0_ce0;
reg    linebuf_val_last_V_0_we0;
wire   [0:0] linebuf_val_last_V_0_q0;
reg   [10:0] linebuf_val_last_V_1_address0;
reg    linebuf_val_last_V_1_ce0;
reg    linebuf_val_last_V_1_we0;
wire   [0:0] linebuf_val_last_V_1_q0;
reg   [10:0] linebuf_val_last_V_2_address0;
reg    linebuf_val_last_V_2_ce0;
reg    linebuf_val_last_V_2_we0;
wire   [0:0] linebuf_val_last_V_2_q0;
reg   [10:0] linebuf_val_id_V_0_address0;
reg    linebuf_val_id_V_0_ce0;
reg    linebuf_val_id_V_0_we0;
wire   [0:0] linebuf_val_id_V_0_q0;
reg   [10:0] linebuf_val_id_V_1_address0;
reg    linebuf_val_id_V_1_ce0;
reg    linebuf_val_id_V_1_we0;
wire   [0:0] linebuf_val_id_V_1_q0;
reg   [10:0] linebuf_val_id_V_2_address0;
reg    linebuf_val_id_V_2_ce0;
reg    linebuf_val_id_V_2_we0;
wire   [0:0] linebuf_val_id_V_2_q0;
reg   [10:0] linebuf_val_dest_V_0_address0;
reg    linebuf_val_dest_V_0_ce0;
reg    linebuf_val_dest_V_0_we0;
wire   [0:0] linebuf_val_dest_V_0_q0;
reg   [10:0] linebuf_val_dest_V_1_address0;
reg    linebuf_val_dest_V_1_ce0;
reg    linebuf_val_dest_V_1_we0;
wire   [0:0] linebuf_val_dest_V_1_q0;
reg   [10:0] linebuf_val_dest_V_2_address0;
reg    linebuf_val_dest_V_2_ce0;
reg    linebuf_val_dest_V_2_we0;
wire   [0:0] linebuf_val_dest_V_2_q0;
reg    src_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    dst_TDATA_blk_n;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_s_fu_764_p2;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_s_reg_1167;
reg   [31:0] tmp_data_V_reg_956;
reg   [3:0] tmp_keep_V_reg_961;
reg   [3:0] tmp_strb_V_reg_966;
reg   [0:0] tmp_user_V_reg_971;
reg   [0:0] tmp_last_V_reg_979;
reg   [0:0] tmp_id_V_reg_984;
reg   [0:0] tmp_dest_V_reg_989;
wire   [15:0] p_y_load_fu_712_p3;
reg   [15:0] p_y_load_reg_994;
wire   [15:0] p_x_load_fu_720_p3;
reg   [15:0] p_x_load_reg_1000;
wire   [63:0] tmp_8_fu_746_p1;
reg   [63:0] tmp_8_reg_1009;
wire   [0:0] or_cond_fu_740_p2;
reg   [10:0] linebuf_val_data_V_1_2_reg_1020;
reg   [10:0] linebuf_val_keep_V_1_2_reg_1025;
reg   [10:0] linebuf_val_strb_V_1_2_reg_1030;
reg   [10:0] linebuf_val_user_V_1_2_reg_1035;
reg   [10:0] linebuf_val_last_V_1_2_reg_1040;
reg   [10:0] linebuf_val_id_V_1_a_1_reg_1045;
reg   [10:0] linebuf_val_dest_V_1_2_reg_1050;
reg   [10:0] linebuf_val_data_V_0_2_reg_1055;
reg   [10:0] linebuf_val_keep_V_0_2_reg_1060;
reg   [10:0] linebuf_val_strb_V_0_2_reg_1065;
reg   [10:0] linebuf_val_user_V_0_2_reg_1070;
reg   [10:0] linebuf_val_last_V_0_2_reg_1075;
reg   [10:0] linebuf_val_id_V_0_a_1_reg_1080;
reg   [10:0] linebuf_val_dest_V_0_2_reg_1085;
reg   [31:0] tmp_data_V_1_reg_1090;
wire    ap_CS_fsm_state3;
reg   [3:0] tmp_keep_V_1_reg_1096;
reg   [3:0] tmp_strb_V_1_reg_1102;
reg   [0:0] tmp_user_V_1_reg_1108;
reg   [0:0] tmp_last_V_1_reg_1114;
reg   [0:0] tmp_id_V_1_reg_1120;
reg   [0:0] tmp_dest_V_1_reg_1126;
reg   [31:0] linebuf_val_data_V_0_3_reg_1132;
reg   [3:0] linebuf_val_keep_V_0_3_reg_1137;
reg   [3:0] linebuf_val_strb_V_0_3_reg_1142;
reg   [0:0] linebuf_val_user_V_0_3_reg_1147;
reg   [0:0] linebuf_val_last_V_0_3_reg_1152;
reg   [0:0] linebuf_val_id_V_0_l_1_reg_1157;
reg   [0:0] linebuf_val_dest_V_0_3_reg_1162;
reg    ap_block_state4_io;
wire   [0:0] y_flag_1_fu_784_p2;
reg    ap_block_state5_io;
wire   [15:0] y_new_1_fu_789_p3;
wire   [15:0] x_new_1_fu_797_p3;
wire   [1:0] tmp_7_fu_813_p1;
reg   [1:0] tmp_7_reg_1189;
wire    ap_CS_fsm_state6;
wire   [0:0] tmp_fu_805_p3;
wire   [10:0] col_fu_823_p2;
reg   [10:0] col_reg_1203;
wire    ap_CS_fsm_state7;
wire   [0:0] exitcond_fu_817_p2;
wire   [2:0] row_fu_854_p2;
wire   [31:0] tmp_data_V_2_fu_860_p5;
wire   [3:0] tmp_keep_V_2_fu_872_p5;
wire   [3:0] tmp_strb_V_2_fu_884_p5;
wire   [0:0] tmp_user_V_2_fu_896_p5;
wire   [0:0] tmp_last_V_2_fu_908_p5;
wire   [0:0] tmp_id_V_2_fu_920_p5;
wire   [0:0] tmp_dest_V_2_fu_932_p5;
reg   [2:0] row_assign_reg_611;
reg   [10:0] col_assign_reg_623;
wire   [0:0] ap_phi_mux_y_flag_2_phi_fu_637_p4;
reg   [0:0] y_flag_2_reg_634;
reg   [15:0] y_new_2_reg_643;
wire   [0:0] ap_phi_mux_x_flag_2_phi_fu_658_p4;
reg   [0:0] x_flag_2_reg_654;
reg   [15:0] x_new_2_reg_665;
wire   [63:0] tmp_2_fu_829_p1;
wire    ap_CS_fsm_state10;
reg    ap_block_state10;
wire   [0:0] tmp_4_fu_728_p2;
wire   [0:0] tmp_5_fu_734_p2;
wire   [0:0] tmp_1_fu_769_p2;
wire   [15:0] tmp_3_fu_774_p2;
wire   [15:0] tmp_6_fu_779_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 src_V_data_V_0_sel_rd = 1'b0;
#0 src_V_data_V_0_sel_wr = 1'b0;
#0 src_V_data_V_0_state = 2'd0;
#0 src_V_keep_V_0_sel_rd = 1'b0;
#0 src_V_keep_V_0_sel_wr = 1'b0;
#0 src_V_keep_V_0_state = 2'd0;
#0 src_V_strb_V_0_sel_rd = 1'b0;
#0 src_V_strb_V_0_sel_wr = 1'b0;
#0 src_V_strb_V_0_state = 2'd0;
#0 src_V_user_V_0_sel_rd = 1'b0;
#0 src_V_user_V_0_sel_wr = 1'b0;
#0 src_V_user_V_0_state = 2'd0;
#0 src_V_last_V_0_sel_rd = 1'b0;
#0 src_V_last_V_0_sel_wr = 1'b0;
#0 src_V_last_V_0_state = 2'd0;
#0 src_V_id_V_0_sel_rd = 1'b0;
#0 src_V_id_V_0_sel_wr = 1'b0;
#0 src_V_id_V_0_state = 2'd0;
#0 src_V_dest_V_0_sel_rd = 1'b0;
#0 src_V_dest_V_0_sel_wr = 1'b0;
#0 src_V_dest_V_0_state = 2'd0;
#0 dst_V_data_V_1_sel_rd = 1'b0;
#0 dst_V_data_V_1_sel_wr = 1'b0;
#0 dst_V_data_V_1_state = 2'd0;
#0 dst_V_keep_V_1_sel_rd = 1'b0;
#0 dst_V_keep_V_1_sel_wr = 1'b0;
#0 dst_V_keep_V_1_state = 2'd0;
#0 dst_V_strb_V_1_sel_rd = 1'b0;
#0 dst_V_strb_V_1_sel_wr = 1'b0;
#0 dst_V_strb_V_1_state = 2'd0;
#0 dst_V_user_V_1_sel_rd = 1'b0;
#0 dst_V_user_V_1_sel_wr = 1'b0;
#0 dst_V_user_V_1_state = 2'd0;
#0 dst_V_last_V_1_sel_rd = 1'b0;
#0 dst_V_last_V_1_sel_wr = 1'b0;
#0 dst_V_last_V_1_state = 2'd0;
#0 dst_V_id_V_1_sel_rd = 1'b0;
#0 dst_V_id_V_1_sel_wr = 1'b0;
#0 dst_V_id_V_1_state = 2'd0;
#0 dst_V_dest_V_1_sel_rd = 1'b0;
#0 dst_V_dest_V_1_sel_wr = 1'b0;
#0 dst_V_dest_V_1_state = 2'd0;
#0 y = 16'd0;
#0 x = 16'd0;
#0 ap_CS_fsm = 10'd1;
end

stream_linebuf_vabkb #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_data_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_data_V_0_address0),
    .ce0(linebuf_val_data_V_0_ce0),
    .we0(linebuf_val_data_V_0_we0),
    .d0(tmp_data_V_reg_956),
    .q0(linebuf_val_data_V_0_q0)
);

stream_linebuf_vabkb #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_data_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_data_V_1_address0),
    .ce0(linebuf_val_data_V_1_ce0),
    .we0(linebuf_val_data_V_1_we0),
    .d0(linebuf_val_data_V_0_3_reg_1132),
    .q0(linebuf_val_data_V_1_q0)
);

stream_linebuf_vabkb #(
    .DataWidth( 32 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_data_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_data_V_2_address0),
    .ce0(linebuf_val_data_V_2_ce0),
    .we0(linebuf_val_data_V_2_we0),
    .d0(tmp_data_V_1_reg_1090),
    .q0(linebuf_val_data_V_2_q0)
);

stream_linebuf_vaeOg #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_keep_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_keep_V_0_address0),
    .ce0(linebuf_val_keep_V_0_ce0),
    .we0(linebuf_val_keep_V_0_we0),
    .d0(tmp_keep_V_reg_961),
    .q0(linebuf_val_keep_V_0_q0)
);

stream_linebuf_vaeOg #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_keep_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_keep_V_1_address0),
    .ce0(linebuf_val_keep_V_1_ce0),
    .we0(linebuf_val_keep_V_1_we0),
    .d0(linebuf_val_keep_V_0_3_reg_1137),
    .q0(linebuf_val_keep_V_1_q0)
);

stream_linebuf_vaeOg #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_keep_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_keep_V_2_address0),
    .ce0(linebuf_val_keep_V_2_ce0),
    .we0(linebuf_val_keep_V_2_we0),
    .d0(tmp_keep_V_1_reg_1096),
    .q0(linebuf_val_keep_V_2_q0)
);

stream_linebuf_vaeOg #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_strb_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_strb_V_0_address0),
    .ce0(linebuf_val_strb_V_0_ce0),
    .we0(linebuf_val_strb_V_0_we0),
    .d0(tmp_strb_V_reg_966),
    .q0(linebuf_val_strb_V_0_q0)
);

stream_linebuf_vaeOg #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_strb_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_strb_V_1_address0),
    .ce0(linebuf_val_strb_V_1_ce0),
    .we0(linebuf_val_strb_V_1_we0),
    .d0(linebuf_val_strb_V_0_3_reg_1142),
    .q0(linebuf_val_strb_V_1_q0)
);

stream_linebuf_vaeOg #(
    .DataWidth( 4 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_strb_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_strb_V_2_address0),
    .ce0(linebuf_val_strb_V_2_ce0),
    .we0(linebuf_val_strb_V_2_we0),
    .d0(tmp_strb_V_1_reg_1102),
    .q0(linebuf_val_strb_V_2_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_user_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_user_V_0_address0),
    .ce0(linebuf_val_user_V_0_ce0),
    .we0(linebuf_val_user_V_0_we0),
    .d0(tmp_user_V_reg_971),
    .q0(linebuf_val_user_V_0_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_user_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_user_V_1_address0),
    .ce0(linebuf_val_user_V_1_ce0),
    .we0(linebuf_val_user_V_1_we0),
    .d0(linebuf_val_user_V_0_3_reg_1147),
    .q0(linebuf_val_user_V_1_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_user_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_user_V_2_address0),
    .ce0(linebuf_val_user_V_2_ce0),
    .we0(linebuf_val_user_V_2_we0),
    .d0(tmp_user_V_1_reg_1108),
    .q0(linebuf_val_user_V_2_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_last_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_last_V_0_address0),
    .ce0(linebuf_val_last_V_0_ce0),
    .we0(linebuf_val_last_V_0_we0),
    .d0(tmp_last_V_reg_979),
    .q0(linebuf_val_last_V_0_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_last_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_last_V_1_address0),
    .ce0(linebuf_val_last_V_1_ce0),
    .we0(linebuf_val_last_V_1_we0),
    .d0(linebuf_val_last_V_0_3_reg_1152),
    .q0(linebuf_val_last_V_1_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_last_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_last_V_2_address0),
    .ce0(linebuf_val_last_V_2_ce0),
    .we0(linebuf_val_last_V_2_we0),
    .d0(tmp_last_V_1_reg_1114),
    .q0(linebuf_val_last_V_2_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_id_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_id_V_0_address0),
    .ce0(linebuf_val_id_V_0_ce0),
    .we0(linebuf_val_id_V_0_we0),
    .d0(tmp_id_V_reg_984),
    .q0(linebuf_val_id_V_0_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_id_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_id_V_1_address0),
    .ce0(linebuf_val_id_V_1_ce0),
    .we0(linebuf_val_id_V_1_we0),
    .d0(linebuf_val_id_V_0_l_1_reg_1157),
    .q0(linebuf_val_id_V_1_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_id_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_id_V_2_address0),
    .ce0(linebuf_val_id_V_2_ce0),
    .we0(linebuf_val_id_V_2_we0),
    .d0(tmp_id_V_1_reg_1120),
    .q0(linebuf_val_id_V_2_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_dest_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_dest_V_0_address0),
    .ce0(linebuf_val_dest_V_0_ce0),
    .we0(linebuf_val_dest_V_0_we0),
    .d0(tmp_dest_V_reg_989),
    .q0(linebuf_val_dest_V_0_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_dest_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_dest_V_1_address0),
    .ce0(linebuf_val_dest_V_1_ce0),
    .we0(linebuf_val_dest_V_1_we0),
    .d0(linebuf_val_dest_V_0_3_reg_1162),
    .q0(linebuf_val_dest_V_1_q0)
);

stream_linebuf_vakbM #(
    .DataWidth( 1 ),
    .AddressRange( 1280 ),
    .AddressWidth( 11 ))
linebuf_val_dest_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_val_dest_V_2_address0),
    .ce0(linebuf_val_dest_V_2_ce0),
    .we0(linebuf_val_dest_V_2_we0),
    .d0(tmp_dest_V_1_reg_1126),
    .q0(linebuf_val_dest_V_2_q0)
);

stream_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
stream_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .l(l),
    .c(c),
    .r(r)
);

stream_mux_32_32_wdI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
stream_mux_32_32_wdI_U1(
    .din1(linebuf_val_data_V_0_q0),
    .din2(linebuf_val_data_V_1_q0),
    .din3(linebuf_val_data_V_2_q0),
    .din4(tmp_7_reg_1189),
    .dout(tmp_data_V_2_fu_860_p5)
);

stream_mux_32_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
stream_mux_32_4_1_1_U2(
    .din1(linebuf_val_keep_V_0_q0),
    .din2(linebuf_val_keep_V_1_q0),
    .din3(linebuf_val_keep_V_2_q0),
    .din4(tmp_7_reg_1189),
    .dout(tmp_keep_V_2_fu_872_p5)
);

stream_mux_32_4_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
stream_mux_32_4_1_1_U3(
    .din1(linebuf_val_strb_V_0_q0),
    .din2(linebuf_val_strb_V_1_q0),
    .din3(linebuf_val_strb_V_2_q0),
    .din4(tmp_7_reg_1189),
    .dout(tmp_strb_V_2_fu_884_p5)
);

stream_mux_32_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
stream_mux_32_1_1_1_U4(
    .din1(linebuf_val_user_V_0_q0),
    .din2(linebuf_val_user_V_1_q0),
    .din3(linebuf_val_user_V_2_q0),
    .din4(tmp_7_reg_1189),
    .dout(tmp_user_V_2_fu_896_p5)
);

stream_mux_32_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
stream_mux_32_1_1_1_U5(
    .din1(linebuf_val_last_V_0_q0),
    .din2(linebuf_val_last_V_1_q0),
    .din3(linebuf_val_last_V_2_q0),
    .din4(tmp_7_reg_1189),
    .dout(tmp_last_V_2_fu_908_p5)
);

stream_mux_32_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
stream_mux_32_1_1_1_U6(
    .din1(linebuf_val_id_V_0_q0),
    .din2(linebuf_val_id_V_1_q0),
    .din3(linebuf_val_id_V_2_q0),
    .din4(tmp_7_reg_1189),
    .dout(tmp_id_V_2_fu_920_p5)
);

stream_mux_32_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
stream_mux_32_1_1_1_U7(
    .din1(linebuf_val_dest_V_0_q0),
    .din2(linebuf_val_dest_V_1_q0),
    .din3(linebuf_val_dest_V_2_q0),
    .din4(tmp_7_reg_1189),
    .dout(tmp_dest_V_2_fu_932_p5)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_data_V_1_ack_out) & (1'b1 == dst_V_data_V_1_vld_out))) begin
            dst_V_data_V_1_sel_rd <= ~dst_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_data_V_1_ack_in) & (1'b1 == dst_V_data_V_1_vld_in))) begin
            dst_V_data_V_1_sel_wr <= ~dst_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_data_V_1_state) & (1'b0 == dst_V_data_V_1_vld_in)) | ((2'd3 == dst_V_data_V_1_state) & (1'b0 == dst_V_data_V_1_vld_in) & (1'b1 == dst_V_data_V_1_ack_out)))) begin
            dst_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_data_V_1_state) & (1'b0 == dst_V_data_V_1_ack_out)) | ((2'd3 == dst_V_data_V_1_state) & (1'b0 == dst_V_data_V_1_ack_out) & (1'b1 == dst_V_data_V_1_vld_in)))) begin
            dst_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_data_V_1_vld_in) & (1'b1 == dst_V_data_V_1_ack_out)) & ~((1'b0 == dst_V_data_V_1_ack_out) & (1'b1 == dst_V_data_V_1_vld_in)) & (2'd3 == dst_V_data_V_1_state)) | ((2'd1 == dst_V_data_V_1_state) & (1'b1 == dst_V_data_V_1_ack_out)) | ((2'd2 == dst_V_data_V_1_state) & (1'b1 == dst_V_data_V_1_vld_in)))) begin
            dst_V_data_V_1_state <= 2'd3;
        end else begin
            dst_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_dest_V_1_ack_out) & (1'b1 == dst_V_dest_V_1_vld_out))) begin
            dst_V_dest_V_1_sel_rd <= ~dst_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_dest_V_1_ack_in) & (1'b1 == dst_V_dest_V_1_vld_in))) begin
            dst_V_dest_V_1_sel_wr <= ~dst_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_dest_V_1_state) & (1'b0 == dst_V_dest_V_1_vld_in)) | ((2'd3 == dst_V_dest_V_1_state) & (1'b0 == dst_V_dest_V_1_vld_in) & (1'b1 == dst_V_dest_V_1_ack_out)))) begin
            dst_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_dest_V_1_state) & (1'b0 == dst_V_dest_V_1_ack_out)) | ((2'd3 == dst_V_dest_V_1_state) & (1'b0 == dst_V_dest_V_1_ack_out) & (1'b1 == dst_V_dest_V_1_vld_in)))) begin
            dst_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_dest_V_1_vld_in) & (1'b1 == dst_V_dest_V_1_ack_out)) & ~((1'b0 == dst_V_dest_V_1_ack_out) & (1'b1 == dst_V_dest_V_1_vld_in)) & (2'd3 == dst_V_dest_V_1_state)) | ((2'd1 == dst_V_dest_V_1_state) & (1'b1 == dst_V_dest_V_1_ack_out)) | ((2'd2 == dst_V_dest_V_1_state) & (1'b1 == dst_V_dest_V_1_vld_in)))) begin
            dst_V_dest_V_1_state <= 2'd3;
        end else begin
            dst_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_id_V_1_ack_out) & (1'b1 == dst_V_id_V_1_vld_out))) begin
            dst_V_id_V_1_sel_rd <= ~dst_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_id_V_1_ack_in) & (1'b1 == dst_V_id_V_1_vld_in))) begin
            dst_V_id_V_1_sel_wr <= ~dst_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_id_V_1_state) & (1'b0 == dst_V_id_V_1_vld_in)) | ((2'd3 == dst_V_id_V_1_state) & (1'b0 == dst_V_id_V_1_vld_in) & (1'b1 == dst_V_id_V_1_ack_out)))) begin
            dst_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_id_V_1_state) & (1'b0 == dst_V_id_V_1_ack_out)) | ((2'd3 == dst_V_id_V_1_state) & (1'b0 == dst_V_id_V_1_ack_out) & (1'b1 == dst_V_id_V_1_vld_in)))) begin
            dst_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_id_V_1_vld_in) & (1'b1 == dst_V_id_V_1_ack_out)) & ~((1'b0 == dst_V_id_V_1_ack_out) & (1'b1 == dst_V_id_V_1_vld_in)) & (2'd3 == dst_V_id_V_1_state)) | ((2'd1 == dst_V_id_V_1_state) & (1'b1 == dst_V_id_V_1_ack_out)) | ((2'd2 == dst_V_id_V_1_state) & (1'b1 == dst_V_id_V_1_vld_in)))) begin
            dst_V_id_V_1_state <= 2'd3;
        end else begin
            dst_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_keep_V_1_ack_out) & (1'b1 == dst_V_keep_V_1_vld_out))) begin
            dst_V_keep_V_1_sel_rd <= ~dst_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_keep_V_1_ack_in) & (1'b1 == dst_V_keep_V_1_vld_in))) begin
            dst_V_keep_V_1_sel_wr <= ~dst_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_keep_V_1_state) & (1'b0 == dst_V_keep_V_1_vld_in)) | ((2'd3 == dst_V_keep_V_1_state) & (1'b0 == dst_V_keep_V_1_vld_in) & (1'b1 == dst_V_keep_V_1_ack_out)))) begin
            dst_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_keep_V_1_state) & (1'b0 == dst_V_keep_V_1_ack_out)) | ((2'd3 == dst_V_keep_V_1_state) & (1'b0 == dst_V_keep_V_1_ack_out) & (1'b1 == dst_V_keep_V_1_vld_in)))) begin
            dst_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_keep_V_1_vld_in) & (1'b1 == dst_V_keep_V_1_ack_out)) & ~((1'b0 == dst_V_keep_V_1_ack_out) & (1'b1 == dst_V_keep_V_1_vld_in)) & (2'd3 == dst_V_keep_V_1_state)) | ((2'd1 == dst_V_keep_V_1_state) & (1'b1 == dst_V_keep_V_1_ack_out)) | ((2'd2 == dst_V_keep_V_1_state) & (1'b1 == dst_V_keep_V_1_vld_in)))) begin
            dst_V_keep_V_1_state <= 2'd3;
        end else begin
            dst_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_last_V_1_ack_out) & (1'b1 == dst_V_last_V_1_vld_out))) begin
            dst_V_last_V_1_sel_rd <= ~dst_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_last_V_1_ack_in) & (1'b1 == dst_V_last_V_1_vld_in))) begin
            dst_V_last_V_1_sel_wr <= ~dst_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_last_V_1_state) & (1'b0 == dst_V_last_V_1_vld_in)) | ((2'd3 == dst_V_last_V_1_state) & (1'b0 == dst_V_last_V_1_vld_in) & (1'b1 == dst_V_last_V_1_ack_out)))) begin
            dst_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_last_V_1_state) & (1'b0 == dst_V_last_V_1_ack_out)) | ((2'd3 == dst_V_last_V_1_state) & (1'b0 == dst_V_last_V_1_ack_out) & (1'b1 == dst_V_last_V_1_vld_in)))) begin
            dst_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_last_V_1_vld_in) & (1'b1 == dst_V_last_V_1_ack_out)) & ~((1'b0 == dst_V_last_V_1_ack_out) & (1'b1 == dst_V_last_V_1_vld_in)) & (2'd3 == dst_V_last_V_1_state)) | ((2'd1 == dst_V_last_V_1_state) & (1'b1 == dst_V_last_V_1_ack_out)) | ((2'd2 == dst_V_last_V_1_state) & (1'b1 == dst_V_last_V_1_vld_in)))) begin
            dst_V_last_V_1_state <= 2'd3;
        end else begin
            dst_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_strb_V_1_ack_out) & (1'b1 == dst_V_strb_V_1_vld_out))) begin
            dst_V_strb_V_1_sel_rd <= ~dst_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_strb_V_1_ack_in) & (1'b1 == dst_V_strb_V_1_vld_in))) begin
            dst_V_strb_V_1_sel_wr <= ~dst_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_strb_V_1_state) & (1'b0 == dst_V_strb_V_1_vld_in)) | ((2'd3 == dst_V_strb_V_1_state) & (1'b0 == dst_V_strb_V_1_vld_in) & (1'b1 == dst_V_strb_V_1_ack_out)))) begin
            dst_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_strb_V_1_state) & (1'b0 == dst_V_strb_V_1_ack_out)) | ((2'd3 == dst_V_strb_V_1_state) & (1'b0 == dst_V_strb_V_1_ack_out) & (1'b1 == dst_V_strb_V_1_vld_in)))) begin
            dst_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_strb_V_1_vld_in) & (1'b1 == dst_V_strb_V_1_ack_out)) & ~((1'b0 == dst_V_strb_V_1_ack_out) & (1'b1 == dst_V_strb_V_1_vld_in)) & (2'd3 == dst_V_strb_V_1_state)) | ((2'd1 == dst_V_strb_V_1_state) & (1'b1 == dst_V_strb_V_1_ack_out)) | ((2'd2 == dst_V_strb_V_1_state) & (1'b1 == dst_V_strb_V_1_vld_in)))) begin
            dst_V_strb_V_1_state <= 2'd3;
        end else begin
            dst_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_user_V_1_ack_out) & (1'b1 == dst_V_user_V_1_vld_out))) begin
            dst_V_user_V_1_sel_rd <= ~dst_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == dst_V_user_V_1_ack_in) & (1'b1 == dst_V_user_V_1_vld_in))) begin
            dst_V_user_V_1_sel_wr <= ~dst_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == dst_V_user_V_1_state) & (1'b0 == dst_V_user_V_1_vld_in)) | ((2'd3 == dst_V_user_V_1_state) & (1'b0 == dst_V_user_V_1_vld_in) & (1'b1 == dst_V_user_V_1_ack_out)))) begin
            dst_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == dst_V_user_V_1_state) & (1'b0 == dst_V_user_V_1_ack_out)) | ((2'd3 == dst_V_user_V_1_state) & (1'b0 == dst_V_user_V_1_ack_out) & (1'b1 == dst_V_user_V_1_vld_in)))) begin
            dst_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == dst_V_user_V_1_vld_in) & (1'b1 == dst_V_user_V_1_ack_out)) & ~((1'b0 == dst_V_user_V_1_ack_out) & (1'b1 == dst_V_user_V_1_vld_in)) & (2'd3 == dst_V_user_V_1_state)) | ((2'd1 == dst_V_user_V_1_state) & (1'b1 == dst_V_user_V_1_ack_out)) | ((2'd2 == dst_V_user_V_1_state) & (1'b1 == dst_V_user_V_1_vld_in)))) begin
            dst_V_user_V_1_state <= 2'd3;
        end else begin
            dst_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_V_data_V_0_ack_out) & (1'b1 == src_V_data_V_0_vld_out))) begin
            src_V_data_V_0_sel_rd <= ~src_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_V_data_V_0_ack_in) & (1'b1 == src_V_data_V_0_vld_in))) begin
            src_V_data_V_0_sel_wr <= ~src_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_data_V_0_state == 2'd2) & (1'b0 == src_V_data_V_0_vld_in)) | ((src_V_data_V_0_state == 2'd3) & (1'b0 == src_V_data_V_0_vld_in) & (1'b1 == src_V_data_V_0_ack_out)))) begin
            src_V_data_V_0_state <= 2'd2;
        end else if ((((src_V_data_V_0_state == 2'd1) & (1'b0 == src_V_data_V_0_ack_out)) | ((src_V_data_V_0_state == 2'd3) & (1'b0 == src_V_data_V_0_ack_out) & (1'b1 == src_V_data_V_0_vld_in)))) begin
            src_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_data_V_0_vld_in) & (1'b1 == src_V_data_V_0_ack_out)) & ~((1'b0 == src_V_data_V_0_ack_out) & (1'b1 == src_V_data_V_0_vld_in)) & (src_V_data_V_0_state == 2'd3)) | ((src_V_data_V_0_state == 2'd1) & (1'b1 == src_V_data_V_0_ack_out)) | ((src_V_data_V_0_state == 2'd2) & (1'b1 == src_V_data_V_0_vld_in)))) begin
            src_V_data_V_0_state <= 2'd3;
        end else begin
            src_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_V_dest_V_0_ack_out) & (1'b1 == src_V_dest_V_0_vld_out))) begin
            src_V_dest_V_0_sel_rd <= ~src_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_V_dest_V_0_ack_in) & (1'b1 == src_V_dest_V_0_vld_in))) begin
            src_V_dest_V_0_sel_wr <= ~src_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == src_V_dest_V_0_state) & (1'b0 == src_V_dest_V_0_vld_in)) | ((2'd3 == src_V_dest_V_0_state) & (1'b0 == src_V_dest_V_0_vld_in) & (1'b1 == src_V_dest_V_0_ack_out)))) begin
            src_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == src_V_dest_V_0_state) & (1'b0 == src_V_dest_V_0_ack_out)) | ((2'd3 == src_V_dest_V_0_state) & (1'b0 == src_V_dest_V_0_ack_out) & (1'b1 == src_V_dest_V_0_vld_in)))) begin
            src_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_dest_V_0_vld_in) & (1'b1 == src_V_dest_V_0_ack_out)) & ~((1'b0 == src_V_dest_V_0_ack_out) & (1'b1 == src_V_dest_V_0_vld_in)) & (2'd3 == src_V_dest_V_0_state)) | ((2'd1 == src_V_dest_V_0_state) & (1'b1 == src_V_dest_V_0_ack_out)) | ((2'd2 == src_V_dest_V_0_state) & (1'b1 == src_V_dest_V_0_vld_in)))) begin
            src_V_dest_V_0_state <= 2'd3;
        end else begin
            src_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_V_id_V_0_ack_out) & (1'b1 == src_V_id_V_0_vld_out))) begin
            src_V_id_V_0_sel_rd <= ~src_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_V_id_V_0_ack_in) & (1'b1 == src_V_id_V_0_vld_in))) begin
            src_V_id_V_0_sel_wr <= ~src_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == src_V_id_V_0_state) & (1'b0 == src_V_id_V_0_vld_in)) | ((2'd3 == src_V_id_V_0_state) & (1'b0 == src_V_id_V_0_vld_in) & (1'b1 == src_V_id_V_0_ack_out)))) begin
            src_V_id_V_0_state <= 2'd2;
        end else if ((((2'd1 == src_V_id_V_0_state) & (1'b0 == src_V_id_V_0_ack_out)) | ((2'd3 == src_V_id_V_0_state) & (1'b0 == src_V_id_V_0_ack_out) & (1'b1 == src_V_id_V_0_vld_in)))) begin
            src_V_id_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_id_V_0_vld_in) & (1'b1 == src_V_id_V_0_ack_out)) & ~((1'b0 == src_V_id_V_0_ack_out) & (1'b1 == src_V_id_V_0_vld_in)) & (2'd3 == src_V_id_V_0_state)) | ((2'd1 == src_V_id_V_0_state) & (1'b1 == src_V_id_V_0_ack_out)) | ((2'd2 == src_V_id_V_0_state) & (1'b1 == src_V_id_V_0_vld_in)))) begin
            src_V_id_V_0_state <= 2'd3;
        end else begin
            src_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_V_keep_V_0_ack_out) & (1'b1 == src_V_keep_V_0_vld_out))) begin
            src_V_keep_V_0_sel_rd <= ~src_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_V_keep_V_0_ack_in) & (1'b1 == src_V_keep_V_0_vld_in))) begin
            src_V_keep_V_0_sel_wr <= ~src_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == src_V_keep_V_0_state) & (1'b0 == src_V_keep_V_0_vld_in)) | ((2'd3 == src_V_keep_V_0_state) & (1'b0 == src_V_keep_V_0_vld_in) & (1'b1 == src_V_keep_V_0_ack_out)))) begin
            src_V_keep_V_0_state <= 2'd2;
        end else if ((((2'd1 == src_V_keep_V_0_state) & (1'b0 == src_V_keep_V_0_ack_out)) | ((2'd3 == src_V_keep_V_0_state) & (1'b0 == src_V_keep_V_0_ack_out) & (1'b1 == src_V_keep_V_0_vld_in)))) begin
            src_V_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_keep_V_0_vld_in) & (1'b1 == src_V_keep_V_0_ack_out)) & ~((1'b0 == src_V_keep_V_0_ack_out) & (1'b1 == src_V_keep_V_0_vld_in)) & (2'd3 == src_V_keep_V_0_state)) | ((2'd1 == src_V_keep_V_0_state) & (1'b1 == src_V_keep_V_0_ack_out)) | ((2'd2 == src_V_keep_V_0_state) & (1'b1 == src_V_keep_V_0_vld_in)))) begin
            src_V_keep_V_0_state <= 2'd3;
        end else begin
            src_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_V_last_V_0_ack_out) & (1'b1 == src_V_last_V_0_vld_out))) begin
            src_V_last_V_0_sel_rd <= ~src_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_V_last_V_0_ack_in) & (1'b1 == src_V_last_V_0_vld_in))) begin
            src_V_last_V_0_sel_wr <= ~src_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == src_V_last_V_0_state) & (1'b0 == src_V_last_V_0_vld_in)) | ((2'd3 == src_V_last_V_0_state) & (1'b0 == src_V_last_V_0_vld_in) & (1'b1 == src_V_last_V_0_ack_out)))) begin
            src_V_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == src_V_last_V_0_state) & (1'b0 == src_V_last_V_0_ack_out)) | ((2'd3 == src_V_last_V_0_state) & (1'b0 == src_V_last_V_0_ack_out) & (1'b1 == src_V_last_V_0_vld_in)))) begin
            src_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_last_V_0_vld_in) & (1'b1 == src_V_last_V_0_ack_out)) & ~((1'b0 == src_V_last_V_0_ack_out) & (1'b1 == src_V_last_V_0_vld_in)) & (2'd3 == src_V_last_V_0_state)) | ((2'd1 == src_V_last_V_0_state) & (1'b1 == src_V_last_V_0_ack_out)) | ((2'd2 == src_V_last_V_0_state) & (1'b1 == src_V_last_V_0_vld_in)))) begin
            src_V_last_V_0_state <= 2'd3;
        end else begin
            src_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_V_strb_V_0_ack_out) & (1'b1 == src_V_strb_V_0_vld_out))) begin
            src_V_strb_V_0_sel_rd <= ~src_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_V_strb_V_0_ack_in) & (1'b1 == src_V_strb_V_0_vld_in))) begin
            src_V_strb_V_0_sel_wr <= ~src_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == src_V_strb_V_0_state) & (1'b0 == src_V_strb_V_0_vld_in)) | ((2'd3 == src_V_strb_V_0_state) & (1'b0 == src_V_strb_V_0_vld_in) & (1'b1 == src_V_strb_V_0_ack_out)))) begin
            src_V_strb_V_0_state <= 2'd2;
        end else if ((((2'd1 == src_V_strb_V_0_state) & (1'b0 == src_V_strb_V_0_ack_out)) | ((2'd3 == src_V_strb_V_0_state) & (1'b0 == src_V_strb_V_0_ack_out) & (1'b1 == src_V_strb_V_0_vld_in)))) begin
            src_V_strb_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_strb_V_0_vld_in) & (1'b1 == src_V_strb_V_0_ack_out)) & ~((1'b0 == src_V_strb_V_0_ack_out) & (1'b1 == src_V_strb_V_0_vld_in)) & (2'd3 == src_V_strb_V_0_state)) | ((2'd1 == src_V_strb_V_0_state) & (1'b1 == src_V_strb_V_0_ack_out)) | ((2'd2 == src_V_strb_V_0_state) & (1'b1 == src_V_strb_V_0_vld_in)))) begin
            src_V_strb_V_0_state <= 2'd3;
        end else begin
            src_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_V_user_V_0_ack_out) & (1'b1 == src_V_user_V_0_vld_out))) begin
            src_V_user_V_0_sel_rd <= ~src_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_V_user_V_0_ack_in) & (1'b1 == src_V_user_V_0_vld_in))) begin
            src_V_user_V_0_sel_wr <= ~src_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == src_V_user_V_0_state) & (1'b0 == src_V_user_V_0_vld_in)) | ((2'd3 == src_V_user_V_0_state) & (1'b0 == src_V_user_V_0_vld_in) & (1'b1 == src_V_user_V_0_ack_out)))) begin
            src_V_user_V_0_state <= 2'd2;
        end else if ((((2'd1 == src_V_user_V_0_state) & (1'b0 == src_V_user_V_0_ack_out)) | ((2'd3 == src_V_user_V_0_state) & (1'b0 == src_V_user_V_0_ack_out) & (1'b1 == src_V_user_V_0_vld_in)))) begin
            src_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == src_V_user_V_0_vld_in) & (1'b1 == src_V_user_V_0_ack_out)) & ~((1'b0 == src_V_user_V_0_ack_out) & (1'b1 == src_V_user_V_0_vld_in)) & (2'd3 == src_V_user_V_0_state)) | ((2'd1 == src_V_user_V_0_state) & (1'b1 == src_V_user_V_0_ack_out)) | ((2'd2 == src_V_user_V_0_state) & (1'b1 == src_V_user_V_0_vld_in)))) begin
            src_V_user_V_0_state <= 2'd3;
        end else begin
            src_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_fu_805_p3) & (1'b1 == ap_CS_fsm_state6))) begin
        col_assign_reg_623 <= 11'd0;
    end else if (((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        col_assign_reg_623 <= col_reg_1203;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == or_cond_fu_740_p2) & (src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        row_assign_reg_611 <= 3'd2;
    end else if (((1'd1 == exitcond_fu_817_p2) & (1'b1 == ap_CS_fsm_state7))) begin
        row_assign_reg_611 <= row_fu_854_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_fu_805_p3) & (1'b1 == ap_CS_fsm_state6))) begin
        x_flag_2_reg_654 <= tmp_user_V_reg_971;
    end else if (((1'b1 == ap_CS_fsm_state5) & (ap_block_state5_io == 1'b0))) begin
        x_flag_2_reg_654 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_fu_805_p3) & (1'b1 == ap_CS_fsm_state6))) begin
        x_new_2_reg_665 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (ap_block_state5_io == 1'b0))) begin
        x_new_2_reg_665 <= x_new_1_fu_797_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_fu_805_p3) & (1'b1 == ap_CS_fsm_state6))) begin
        y_flag_2_reg_634 <= tmp_user_V_reg_971;
    end else if (((1'b1 == ap_CS_fsm_state5) & (ap_block_state5_io == 1'b0))) begin
        y_flag_2_reg_634 <= y_flag_1_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_fu_805_p3) & (1'b1 == ap_CS_fsm_state6))) begin
        y_new_2_reg_643 <= 16'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (ap_block_state5_io == 1'b0))) begin
        y_new_2_reg_643 <= y_new_1_fu_789_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        col_reg_1203 <= col_fu_823_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_data_V_1_load_A)) begin
        dst_V_data_V_1_payload_A <= dst_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_data_V_1_load_B)) begin
        dst_V_data_V_1_payload_B <= dst_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_dest_V_1_load_A)) begin
        dst_V_dest_V_1_payload_A <= dst_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_dest_V_1_load_B)) begin
        dst_V_dest_V_1_payload_B <= dst_V_dest_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_id_V_1_load_A)) begin
        dst_V_id_V_1_payload_A <= dst_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_id_V_1_load_B)) begin
        dst_V_id_V_1_payload_B <= dst_V_id_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_keep_V_1_load_A)) begin
        dst_V_keep_V_1_payload_A <= dst_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_keep_V_1_load_B)) begin
        dst_V_keep_V_1_payload_B <= dst_V_keep_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_last_V_1_load_A)) begin
        dst_V_last_V_1_payload_A <= dst_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_last_V_1_load_B)) begin
        dst_V_last_V_1_payload_B <= dst_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_strb_V_1_load_A)) begin
        dst_V_strb_V_1_payload_A <= dst_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_strb_V_1_load_B)) begin
        dst_V_strb_V_1_payload_B <= dst_V_strb_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_user_V_1_load_A)) begin
        dst_V_user_V_1_payload_A <= dst_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == dst_V_user_V_1_load_B)) begin
        dst_V_user_V_1_payload_B <= dst_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == or_cond_fu_740_p2) & (src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        linebuf_val_data_V_0_2_reg_1055 <= tmp_8_fu_746_p1;
        linebuf_val_data_V_1_2_reg_1020 <= tmp_8_fu_746_p1;
        linebuf_val_dest_V_0_2_reg_1085 <= tmp_8_fu_746_p1;
        linebuf_val_dest_V_1_2_reg_1050 <= tmp_8_fu_746_p1;
        linebuf_val_id_V_0_a_1_reg_1080 <= tmp_8_fu_746_p1;
        linebuf_val_id_V_1_a_1_reg_1045 <= tmp_8_fu_746_p1;
        linebuf_val_keep_V_0_2_reg_1060 <= tmp_8_fu_746_p1;
        linebuf_val_keep_V_1_2_reg_1025 <= tmp_8_fu_746_p1;
        linebuf_val_last_V_0_2_reg_1075 <= tmp_8_fu_746_p1;
        linebuf_val_last_V_1_2_reg_1040 <= tmp_8_fu_746_p1;
        linebuf_val_strb_V_0_2_reg_1065 <= tmp_8_fu_746_p1;
        linebuf_val_strb_V_1_2_reg_1030 <= tmp_8_fu_746_p1;
        linebuf_val_user_V_0_2_reg_1070 <= tmp_8_fu_746_p1;
        linebuf_val_user_V_1_2_reg_1035 <= tmp_8_fu_746_p1;
        tmp_8_reg_1009[15 : 0] <= tmp_8_fu_746_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_data_V_0_3_reg_1132 <= linebuf_val_data_V_0_q0;
        linebuf_val_dest_V_0_3_reg_1162 <= linebuf_val_dest_V_0_q0;
        linebuf_val_id_V_0_l_1_reg_1157 <= linebuf_val_id_V_0_q0;
        linebuf_val_keep_V_0_3_reg_1137 <= linebuf_val_keep_V_0_q0;
        linebuf_val_last_V_0_3_reg_1152 <= linebuf_val_last_V_0_q0;
        linebuf_val_strb_V_0_3_reg_1142 <= linebuf_val_strb_V_0_q0;
        linebuf_val_user_V_0_3_reg_1147 <= linebuf_val_user_V_0_q0;
        tmp_data_V_1_reg_1090 <= linebuf_val_data_V_1_q0;
        tmp_dest_V_1_reg_1126 <= linebuf_val_dest_V_1_q0;
        tmp_id_V_1_reg_1120 <= linebuf_val_id_V_1_q0;
        tmp_keep_V_1_reg_1096 <= linebuf_val_keep_V_1_q0;
        tmp_last_V_1_reg_1114 <= linebuf_val_last_V_1_q0;
        tmp_strb_V_1_reg_1102 <= linebuf_val_strb_V_1_q0;
        tmp_user_V_1_reg_1108 <= linebuf_val_user_V_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_x_load_reg_1000 <= p_x_load_fu_720_p3;
        p_y_load_reg_994 <= p_y_load_fu_712_p3;
        tmp_data_V_reg_956 <= src_V_data_V_0_data_out;
        tmp_dest_V_reg_989 <= src_V_dest_V_0_data_out;
        tmp_id_V_reg_984 <= src_V_id_V_0_data_out;
        tmp_keep_V_reg_961 <= src_V_keep_V_0_data_out;
        tmp_last_V_reg_979 <= src_V_last_V_0_data_out;
        tmp_strb_V_reg_966 <= src_V_strb_V_0_data_out;
        tmp_user_V_reg_971 <= src_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_data_V_0_load_A)) begin
        src_V_data_V_0_payload_A <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_data_V_0_load_B)) begin
        src_V_data_V_0_payload_B <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_dest_V_0_load_A)) begin
        src_V_dest_V_0_payload_A <= src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_dest_V_0_load_B)) begin
        src_V_dest_V_0_payload_B <= src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_id_V_0_load_A)) begin
        src_V_id_V_0_payload_A <= src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_id_V_0_load_B)) begin
        src_V_id_V_0_payload_B <= src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_keep_V_0_load_A)) begin
        src_V_keep_V_0_payload_A <= src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_keep_V_0_load_B)) begin
        src_V_keep_V_0_payload_B <= src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_last_V_0_load_A)) begin
        src_V_last_V_0_payload_A <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_last_V_0_load_B)) begin
        src_V_last_V_0_payload_B <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_strb_V_0_load_A)) begin
        src_V_strb_V_0_payload_A <= src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_strb_V_0_load_B)) begin
        src_V_strb_V_0_payload_B <= src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_user_V_0_load_A)) begin
        src_V_user_V_0_payload_A <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_V_user_V_0_load_B)) begin
        src_V_user_V_0_payload_B <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == tmp_fu_805_p3) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_7_reg_1189 <= tmp_7_fu_813_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        tmp_s_reg_1167 <= tmp_s_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == dst_V_dest_V_1_ack_in) | (1'b0 == dst_V_id_V_1_ack_in) | (1'b0 == dst_V_last_V_1_ack_in) | (1'b0 == dst_V_user_V_1_ack_in) | (1'b0 == dst_V_strb_V_1_ack_in) | (1'b0 == dst_V_keep_V_1_ack_in) | (1'b0 == dst_V_data_V_1_ack_in)) & (1'd1 == ap_phi_mux_x_flag_2_phi_fu_658_p4) & (1'b1 == ap_CS_fsm_state10))) begin
        x <= x_new_2_reg_665;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == dst_V_dest_V_1_ack_in) | (1'b0 == dst_V_id_V_1_ack_in) | (1'b0 == dst_V_last_V_1_ack_in) | (1'b0 == dst_V_user_V_1_ack_in) | (1'b0 == dst_V_strb_V_1_ack_in) | (1'b0 == dst_V_keep_V_1_ack_in) | (1'b0 == dst_V_data_V_1_ack_in)) & (1'd1 == ap_phi_mux_y_flag_2_phi_fu_637_p4) & (1'b1 == ap_CS_fsm_state10))) begin
        y <= y_new_2_reg_643;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | ((1'd1 == tmp_s_reg_1167) & (1'b1 == ap_CS_fsm_state5)) | ((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4)))) begin
        dst_TDATA_blk_n = dst_V_data_V_1_state[1'd1];
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_V_data_V_1_data_in = tmp_data_V_2_fu_860_p5;
    end else if (((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_V_data_V_1_data_in = tmp_data_V_1_reg_1090;
    end else begin
        dst_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_data_V_1_sel)) begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_B;
    end else begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        dst_V_data_V_1_vld_in = 1'b1;
    end else begin
        dst_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_V_dest_V_1_data_in = tmp_dest_V_2_fu_932_p5;
    end else if (((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_V_dest_V_1_data_in = tmp_dest_V_1_reg_1126;
    end else begin
        dst_V_dest_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_dest_V_1_sel)) begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_B;
    end else begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        dst_V_dest_V_1_vld_in = 1'b1;
    end else begin
        dst_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_V_id_V_1_data_in = tmp_id_V_2_fu_920_p5;
    end else if (((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_V_id_V_1_data_in = tmp_id_V_1_reg_1120;
    end else begin
        dst_V_id_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_id_V_1_sel)) begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_B;
    end else begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        dst_V_id_V_1_vld_in = 1'b1;
    end else begin
        dst_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_V_keep_V_1_data_in = tmp_keep_V_2_fu_872_p5;
    end else if (((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_V_keep_V_1_data_in = tmp_keep_V_1_reg_1096;
    end else begin
        dst_V_keep_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_keep_V_1_sel)) begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_B;
    end else begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        dst_V_keep_V_1_vld_in = 1'b1;
    end else begin
        dst_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_V_last_V_1_data_in = tmp_last_V_2_fu_908_p5;
    end else if (((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_V_last_V_1_data_in = tmp_last_V_1_reg_1114;
    end else begin
        dst_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_last_V_1_sel)) begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_B;
    end else begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        dst_V_last_V_1_vld_in = 1'b1;
    end else begin
        dst_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_V_strb_V_1_data_in = tmp_strb_V_2_fu_884_p5;
    end else if (((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_V_strb_V_1_data_in = tmp_strb_V_1_reg_1102;
    end else begin
        dst_V_strb_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_strb_V_1_sel)) begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_B;
    end else begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        dst_V_strb_V_1_vld_in = 1'b1;
    end else begin
        dst_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dst_V_user_V_1_data_in = tmp_user_V_2_fu_896_p5;
    end else if (((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        dst_V_user_V_1_data_in = tmp_user_V_1_reg_1108;
    end else begin
        dst_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == dst_V_user_V_1_sel)) begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_B;
    end else begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_s_fu_764_p2) & (1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8)))) begin
        dst_V_user_V_1_vld_in = 1'b1;
    end else begin
        dst_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_data_V_0_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_data_V_0_address0 = linebuf_val_data_V_0_2_reg_1055;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_data_V_0_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_data_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_data_V_0_ce0 = 1'b1;
    end else begin
        linebuf_val_data_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_data_V_0_we0 = 1'b1;
    end else begin
        linebuf_val_data_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_data_V_1_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_data_V_1_address0 = linebuf_val_data_V_1_2_reg_1020;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_data_V_1_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_data_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_data_V_1_ce0 = 1'b1;
    end else begin
        linebuf_val_data_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_data_V_1_we0 = 1'b1;
    end else begin
        linebuf_val_data_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_data_V_2_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_data_V_2_address0 = tmp_8_reg_1009;
    end else begin
        linebuf_val_data_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)))) begin
        linebuf_val_data_V_2_ce0 = 1'b1;
    end else begin
        linebuf_val_data_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_data_V_2_we0 = 1'b1;
    end else begin
        linebuf_val_data_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_dest_V_0_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_dest_V_0_address0 = linebuf_val_dest_V_0_2_reg_1085;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_dest_V_0_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_dest_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_dest_V_0_ce0 = 1'b1;
    end else begin
        linebuf_val_dest_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_dest_V_0_we0 = 1'b1;
    end else begin
        linebuf_val_dest_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_dest_V_1_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_dest_V_1_address0 = linebuf_val_dest_V_1_2_reg_1050;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_dest_V_1_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_dest_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_dest_V_1_ce0 = 1'b1;
    end else begin
        linebuf_val_dest_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_dest_V_1_we0 = 1'b1;
    end else begin
        linebuf_val_dest_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_dest_V_2_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_dest_V_2_address0 = tmp_8_reg_1009;
    end else begin
        linebuf_val_dest_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)))) begin
        linebuf_val_dest_V_2_ce0 = 1'b1;
    end else begin
        linebuf_val_dest_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_dest_V_2_we0 = 1'b1;
    end else begin
        linebuf_val_dest_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_id_V_0_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_id_V_0_address0 = linebuf_val_id_V_0_a_1_reg_1080;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_id_V_0_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_id_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_id_V_0_ce0 = 1'b1;
    end else begin
        linebuf_val_id_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_id_V_0_we0 = 1'b1;
    end else begin
        linebuf_val_id_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_id_V_1_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_id_V_1_address0 = linebuf_val_id_V_1_a_1_reg_1045;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_id_V_1_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_id_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_id_V_1_ce0 = 1'b1;
    end else begin
        linebuf_val_id_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_id_V_1_we0 = 1'b1;
    end else begin
        linebuf_val_id_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_id_V_2_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_id_V_2_address0 = tmp_8_reg_1009;
    end else begin
        linebuf_val_id_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)))) begin
        linebuf_val_id_V_2_ce0 = 1'b1;
    end else begin
        linebuf_val_id_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_id_V_2_we0 = 1'b1;
    end else begin
        linebuf_val_id_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_keep_V_0_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_keep_V_0_address0 = linebuf_val_keep_V_0_2_reg_1060;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_keep_V_0_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_keep_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_keep_V_0_ce0 = 1'b1;
    end else begin
        linebuf_val_keep_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_keep_V_0_we0 = 1'b1;
    end else begin
        linebuf_val_keep_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_keep_V_1_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_keep_V_1_address0 = linebuf_val_keep_V_1_2_reg_1025;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_keep_V_1_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_keep_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_keep_V_1_ce0 = 1'b1;
    end else begin
        linebuf_val_keep_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_keep_V_1_we0 = 1'b1;
    end else begin
        linebuf_val_keep_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_keep_V_2_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_keep_V_2_address0 = tmp_8_reg_1009;
    end else begin
        linebuf_val_keep_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)))) begin
        linebuf_val_keep_V_2_ce0 = 1'b1;
    end else begin
        linebuf_val_keep_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_keep_V_2_we0 = 1'b1;
    end else begin
        linebuf_val_keep_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_last_V_0_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_last_V_0_address0 = linebuf_val_last_V_0_2_reg_1075;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_last_V_0_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_last_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_last_V_0_ce0 = 1'b1;
    end else begin
        linebuf_val_last_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_last_V_0_we0 = 1'b1;
    end else begin
        linebuf_val_last_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_last_V_1_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_last_V_1_address0 = linebuf_val_last_V_1_2_reg_1040;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_last_V_1_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_last_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_last_V_1_ce0 = 1'b1;
    end else begin
        linebuf_val_last_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_last_V_1_we0 = 1'b1;
    end else begin
        linebuf_val_last_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_last_V_2_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_last_V_2_address0 = tmp_8_reg_1009;
    end else begin
        linebuf_val_last_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)))) begin
        linebuf_val_last_V_2_ce0 = 1'b1;
    end else begin
        linebuf_val_last_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_last_V_2_we0 = 1'b1;
    end else begin
        linebuf_val_last_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_strb_V_0_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_strb_V_0_address0 = linebuf_val_strb_V_0_2_reg_1065;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_strb_V_0_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_strb_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_strb_V_0_ce0 = 1'b1;
    end else begin
        linebuf_val_strb_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_strb_V_0_we0 = 1'b1;
    end else begin
        linebuf_val_strb_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_strb_V_1_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_strb_V_1_address0 = linebuf_val_strb_V_1_2_reg_1030;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_strb_V_1_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_strb_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_strb_V_1_ce0 = 1'b1;
    end else begin
        linebuf_val_strb_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_strb_V_1_we0 = 1'b1;
    end else begin
        linebuf_val_strb_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_strb_V_2_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_strb_V_2_address0 = tmp_8_reg_1009;
    end else begin
        linebuf_val_strb_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)))) begin
        linebuf_val_strb_V_2_ce0 = 1'b1;
    end else begin
        linebuf_val_strb_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_strb_V_2_we0 = 1'b1;
    end else begin
        linebuf_val_strb_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_user_V_0_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_user_V_0_address0 = linebuf_val_user_V_0_2_reg_1070;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_user_V_0_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_user_V_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_user_V_0_ce0 = 1'b1;
    end else begin
        linebuf_val_user_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linebuf_val_user_V_0_we0 = 1'b1;
    end else begin
        linebuf_val_user_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_user_V_1_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_user_V_1_address0 = linebuf_val_user_V_1_2_reg_1035;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        linebuf_val_user_V_1_address0 = tmp_8_fu_746_p1;
    end else begin
        linebuf_val_user_V_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)) | ((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        linebuf_val_user_V_1_ce0 = 1'b1;
    end else begin
        linebuf_val_user_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_user_V_1_we0 = 1'b1;
    end else begin
        linebuf_val_user_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        linebuf_val_user_V_2_address0 = tmp_2_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        linebuf_val_user_V_2_address0 = tmp_8_reg_1009;
    end else begin
        linebuf_val_user_V_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0)))) begin
        linebuf_val_user_V_2_ce0 = 1'b1;
    end else begin
        linebuf_val_user_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
        linebuf_val_user_V_2_we0 = 1'b1;
    end else begin
        linebuf_val_user_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_TDATA_blk_n = src_V_data_V_0_state[1'd0];
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_data_V_0_ack_out = 1'b1;
    end else begin
        src_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_V_data_V_0_sel)) begin
        src_V_data_V_0_data_out = src_V_data_V_0_payload_B;
    end else begin
        src_V_data_V_0_data_out = src_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_dest_V_0_ack_out = 1'b1;
    end else begin
        src_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_V_dest_V_0_sel)) begin
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_B;
    end else begin
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_id_V_0_ack_out = 1'b1;
    end else begin
        src_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_V_id_V_0_sel)) begin
        src_V_id_V_0_data_out = src_V_id_V_0_payload_B;
    end else begin
        src_V_id_V_0_data_out = src_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_keep_V_0_ack_out = 1'b1;
    end else begin
        src_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_V_keep_V_0_sel)) begin
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_B;
    end else begin
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_last_V_0_ack_out = 1'b1;
    end else begin
        src_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_V_last_V_0_sel)) begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_B;
    end else begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_strb_V_0_ack_out = 1'b1;
    end else begin
        src_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_V_strb_V_0_sel)) begin
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_B;
    end else begin
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_V_user_V_0_ack_out = 1'b1;
    end else begin
        src_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_V_user_V_0_sel)) begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_B;
    end else begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'd1 == or_cond_fu_740_p2) & (src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((1'd0 == or_cond_fu_740_p2) & (src_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (ap_block_state4_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (ap_block_state5_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'd1 == tmp_fu_805_p3) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'd1 == exitcond_fu_817_p2) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((dst_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((1'b0 == dst_V_dest_V_1_ack_in) | (1'b0 == dst_V_id_V_1_ack_in) | (1'b0 == dst_V_last_V_1_ack_in) | (1'b0 == dst_V_user_V_1_ack_in) | (1'b0 == dst_V_strb_V_1_ack_in) | (1'b0 == dst_V_keep_V_1_ack_in) | (1'b0 == dst_V_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10 = ((1'b0 == dst_V_dest_V_1_ack_in) | (1'b0 == dst_V_id_V_1_ack_in) | (1'b0 == dst_V_last_V_1_ack_in) | (1'b0 == dst_V_user_V_1_ack_in) | (1'b0 == dst_V_strb_V_1_ack_in) | (1'b0 == dst_V_keep_V_1_ack_in) | (1'b0 == dst_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state4_io = ((1'd1 == tmp_s_fu_764_p2) & (1'b0 == dst_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state5_io = ((1'd1 == tmp_s_reg_1167) & (1'b0 == dst_V_data_V_1_ack_in));
end

assign ap_phi_mux_x_flag_2_phi_fu_658_p4 = x_flag_2_reg_654;

assign ap_phi_mux_y_flag_2_phi_fu_637_p4 = y_flag_2_reg_634;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_fu_823_p2 = (col_assign_reg_623 + 11'd1);

assign dst_TDATA = dst_V_data_V_1_data_out;

assign dst_TDEST = dst_V_dest_V_1_data_out;

assign dst_TID = dst_V_id_V_1_data_out;

assign dst_TKEEP = dst_V_keep_V_1_data_out;

assign dst_TLAST = dst_V_last_V_1_data_out;

assign dst_TSTRB = dst_V_strb_V_1_data_out;

assign dst_TUSER = dst_V_user_V_1_data_out;

assign dst_TVALID = dst_V_dest_V_1_state[1'd0];

assign dst_V_data_V_1_ack_in = dst_V_data_V_1_state[1'd1];

assign dst_V_data_V_1_ack_out = dst_TREADY;

assign dst_V_data_V_1_load_A = (~dst_V_data_V_1_sel_wr & dst_V_data_V_1_state_cmp_full);

assign dst_V_data_V_1_load_B = (dst_V_data_V_1_state_cmp_full & dst_V_data_V_1_sel_wr);

assign dst_V_data_V_1_sel = dst_V_data_V_1_sel_rd;

assign dst_V_data_V_1_state_cmp_full = ((dst_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_data_V_1_vld_out = dst_V_data_V_1_state[1'd0];

assign dst_V_dest_V_1_ack_in = dst_V_dest_V_1_state[1'd1];

assign dst_V_dest_V_1_ack_out = dst_TREADY;

assign dst_V_dest_V_1_load_A = (~dst_V_dest_V_1_sel_wr & dst_V_dest_V_1_state_cmp_full);

assign dst_V_dest_V_1_load_B = (dst_V_dest_V_1_state_cmp_full & dst_V_dest_V_1_sel_wr);

assign dst_V_dest_V_1_sel = dst_V_dest_V_1_sel_rd;

assign dst_V_dest_V_1_state_cmp_full = ((dst_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_dest_V_1_vld_out = dst_V_dest_V_1_state[1'd0];

assign dst_V_id_V_1_ack_in = dst_V_id_V_1_state[1'd1];

assign dst_V_id_V_1_ack_out = dst_TREADY;

assign dst_V_id_V_1_load_A = (~dst_V_id_V_1_sel_wr & dst_V_id_V_1_state_cmp_full);

assign dst_V_id_V_1_load_B = (dst_V_id_V_1_state_cmp_full & dst_V_id_V_1_sel_wr);

assign dst_V_id_V_1_sel = dst_V_id_V_1_sel_rd;

assign dst_V_id_V_1_state_cmp_full = ((dst_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_id_V_1_vld_out = dst_V_id_V_1_state[1'd0];

assign dst_V_keep_V_1_ack_in = dst_V_keep_V_1_state[1'd1];

assign dst_V_keep_V_1_ack_out = dst_TREADY;

assign dst_V_keep_V_1_load_A = (~dst_V_keep_V_1_sel_wr & dst_V_keep_V_1_state_cmp_full);

assign dst_V_keep_V_1_load_B = (dst_V_keep_V_1_state_cmp_full & dst_V_keep_V_1_sel_wr);

assign dst_V_keep_V_1_sel = dst_V_keep_V_1_sel_rd;

assign dst_V_keep_V_1_state_cmp_full = ((dst_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_keep_V_1_vld_out = dst_V_keep_V_1_state[1'd0];

assign dst_V_last_V_1_ack_in = dst_V_last_V_1_state[1'd1];

assign dst_V_last_V_1_ack_out = dst_TREADY;

assign dst_V_last_V_1_load_A = (~dst_V_last_V_1_sel_wr & dst_V_last_V_1_state_cmp_full);

assign dst_V_last_V_1_load_B = (dst_V_last_V_1_state_cmp_full & dst_V_last_V_1_sel_wr);

assign dst_V_last_V_1_sel = dst_V_last_V_1_sel_rd;

assign dst_V_last_V_1_state_cmp_full = ((dst_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_last_V_1_vld_out = dst_V_last_V_1_state[1'd0];

assign dst_V_strb_V_1_ack_in = dst_V_strb_V_1_state[1'd1];

assign dst_V_strb_V_1_ack_out = dst_TREADY;

assign dst_V_strb_V_1_load_A = (~dst_V_strb_V_1_sel_wr & dst_V_strb_V_1_state_cmp_full);

assign dst_V_strb_V_1_load_B = (dst_V_strb_V_1_state_cmp_full & dst_V_strb_V_1_sel_wr);

assign dst_V_strb_V_1_sel = dst_V_strb_V_1_sel_rd;

assign dst_V_strb_V_1_state_cmp_full = ((dst_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_strb_V_1_vld_out = dst_V_strb_V_1_state[1'd0];

assign dst_V_user_V_1_ack_in = dst_V_user_V_1_state[1'd1];

assign dst_V_user_V_1_ack_out = dst_TREADY;

assign dst_V_user_V_1_load_A = (~dst_V_user_V_1_sel_wr & dst_V_user_V_1_state_cmp_full);

assign dst_V_user_V_1_load_B = (dst_V_user_V_1_state_cmp_full & dst_V_user_V_1_sel_wr);

assign dst_V_user_V_1_sel = dst_V_user_V_1_sel_rd;

assign dst_V_user_V_1_state_cmp_full = ((dst_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_user_V_1_vld_out = dst_V_user_V_1_state[1'd0];

assign exitcond_fu_817_p2 = ((col_assign_reg_623 == 11'd1280) ? 1'b1 : 1'b0);

assign or_cond_fu_740_p2 = (tmp_5_fu_734_p2 & tmp_4_fu_728_p2);

assign p_x_load_fu_720_p3 = ((src_V_user_V_0_data_out[0:0] === 1'b1) ? 16'd0 : x);

assign p_y_load_fu_712_p3 = ((src_V_user_V_0_data_out[0:0] === 1'b1) ? 16'd0 : y);

assign row_fu_854_p2 = ($signed(row_assign_reg_611) + $signed(3'd7));

assign src_TREADY = src_V_dest_V_0_state[1'd1];

assign src_V_data_V_0_ack_in = src_V_data_V_0_state[1'd1];

assign src_V_data_V_0_load_A = (src_V_data_V_0_state_cmp_full & ~src_V_data_V_0_sel_wr);

assign src_V_data_V_0_load_B = (src_V_data_V_0_state_cmp_full & src_V_data_V_0_sel_wr);

assign src_V_data_V_0_sel = src_V_data_V_0_sel_rd;

assign src_V_data_V_0_state_cmp_full = ((src_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_data_V_0_vld_in = src_TVALID;

assign src_V_data_V_0_vld_out = src_V_data_V_0_state[1'd0];

assign src_V_dest_V_0_ack_in = src_V_dest_V_0_state[1'd1];

assign src_V_dest_V_0_load_A = (src_V_dest_V_0_state_cmp_full & ~src_V_dest_V_0_sel_wr);

assign src_V_dest_V_0_load_B = (src_V_dest_V_0_state_cmp_full & src_V_dest_V_0_sel_wr);

assign src_V_dest_V_0_sel = src_V_dest_V_0_sel_rd;

assign src_V_dest_V_0_state_cmp_full = ((src_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_dest_V_0_vld_in = src_TVALID;

assign src_V_dest_V_0_vld_out = src_V_dest_V_0_state[1'd0];

assign src_V_id_V_0_ack_in = src_V_id_V_0_state[1'd1];

assign src_V_id_V_0_load_A = (src_V_id_V_0_state_cmp_full & ~src_V_id_V_0_sel_wr);

assign src_V_id_V_0_load_B = (src_V_id_V_0_state_cmp_full & src_V_id_V_0_sel_wr);

assign src_V_id_V_0_sel = src_V_id_V_0_sel_rd;

assign src_V_id_V_0_state_cmp_full = ((src_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_id_V_0_vld_in = src_TVALID;

assign src_V_id_V_0_vld_out = src_V_id_V_0_state[1'd0];

assign src_V_keep_V_0_ack_in = src_V_keep_V_0_state[1'd1];

assign src_V_keep_V_0_load_A = (src_V_keep_V_0_state_cmp_full & ~src_V_keep_V_0_sel_wr);

assign src_V_keep_V_0_load_B = (src_V_keep_V_0_state_cmp_full & src_V_keep_V_0_sel_wr);

assign src_V_keep_V_0_sel = src_V_keep_V_0_sel_rd;

assign src_V_keep_V_0_state_cmp_full = ((src_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_keep_V_0_vld_in = src_TVALID;

assign src_V_keep_V_0_vld_out = src_V_keep_V_0_state[1'd0];

assign src_V_last_V_0_ack_in = src_V_last_V_0_state[1'd1];

assign src_V_last_V_0_load_A = (src_V_last_V_0_state_cmp_full & ~src_V_last_V_0_sel_wr);

assign src_V_last_V_0_load_B = (src_V_last_V_0_state_cmp_full & src_V_last_V_0_sel_wr);

assign src_V_last_V_0_sel = src_V_last_V_0_sel_rd;

assign src_V_last_V_0_state_cmp_full = ((src_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_last_V_0_vld_in = src_TVALID;

assign src_V_last_V_0_vld_out = src_V_last_V_0_state[1'd0];

assign src_V_strb_V_0_ack_in = src_V_strb_V_0_state[1'd1];

assign src_V_strb_V_0_load_A = (src_V_strb_V_0_state_cmp_full & ~src_V_strb_V_0_sel_wr);

assign src_V_strb_V_0_load_B = (src_V_strb_V_0_state_cmp_full & src_V_strb_V_0_sel_wr);

assign src_V_strb_V_0_sel = src_V_strb_V_0_sel_rd;

assign src_V_strb_V_0_state_cmp_full = ((src_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_strb_V_0_vld_in = src_TVALID;

assign src_V_strb_V_0_vld_out = src_V_strb_V_0_state[1'd0];

assign src_V_user_V_0_ack_in = src_V_user_V_0_state[1'd1];

assign src_V_user_V_0_load_A = (src_V_user_V_0_state_cmp_full & ~src_V_user_V_0_sel_wr);

assign src_V_user_V_0_load_B = (src_V_user_V_0_state_cmp_full & src_V_user_V_0_sel_wr);

assign src_V_user_V_0_sel = src_V_user_V_0_sel_rd;

assign src_V_user_V_0_state_cmp_full = ((src_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_user_V_0_vld_in = src_TVALID;

assign src_V_user_V_0_vld_out = src_V_user_V_0_state[1'd0];

assign tmp_1_fu_769_p2 = ((p_x_load_reg_1000 == 16'd1280) ? 1'b1 : 1'b0);

assign tmp_2_fu_829_p1 = col_assign_reg_623;

assign tmp_3_fu_774_p2 = (p_y_load_reg_994 + 16'd1);

assign tmp_4_fu_728_p2 = ((p_x_load_fu_720_p3 == 16'd1279) ? 1'b1 : 1'b0);

assign tmp_5_fu_734_p2 = ((p_y_load_fu_712_p3 == 16'd719) ? 1'b1 : 1'b0);

assign tmp_6_fu_779_p2 = (p_x_load_reg_1000 + 16'd1);

assign tmp_7_fu_813_p1 = row_assign_reg_611[1:0];

assign tmp_8_fu_746_p1 = p_x_load_fu_720_p3;

assign tmp_fu_805_p3 = row_assign_reg_611[32'd2];

assign tmp_s_fu_764_p2 = ((p_y_load_reg_994 > 16'd2) ? 1'b1 : 1'b0);

assign x_new_1_fu_797_p3 = ((tmp_1_fu_769_p2[0:0] === 1'b1) ? 16'd0 : tmp_6_fu_779_p2);

assign y_flag_1_fu_784_p2 = (tmp_user_V_reg_971 | tmp_1_fu_769_p2);

assign y_new_1_fu_789_p3 = ((tmp_1_fu_769_p2[0:0] === 1'b1) ? tmp_3_fu_774_p2 : 16'd0);

always @ (posedge ap_clk) begin
    tmp_8_reg_1009[63:16] <= 48'b000000000000000000000000000000000000000000000000;
end

endmodule //stream
