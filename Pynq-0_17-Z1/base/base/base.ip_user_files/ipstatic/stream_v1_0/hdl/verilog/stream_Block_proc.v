// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module stream_Block_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_V_TDATA,
        src_V_TVALID,
        src_V_TREADY,
        mask,
        dst_V_TDATA,
        dst_V_TVALID,
        dst_V_TREADY
);

parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] src_V_TDATA;
input   src_V_TVALID;
output   src_V_TREADY;
input  [31:0] mask;
output  [31:0] dst_V_TDATA;
output   dst_V_TVALID;
input   dst_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_V_TREADY;
reg dst_V_TVALID;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
reg    src_V_TDATA_blk_n;
reg    dst_V_TDATA_blk_n;
reg    ap_sig_41;
reg    ap_sig_ioackin_dst_V_TREADY;
reg    ap_reg_ioackin_dst_V_TREADY;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_72;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'b1;
#0 ap_reg_ioackin_dst_V_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_41 | (1'b0 == ap_sig_ioackin_dst_V_TREADY)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_dst_V_TREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
            if (~(ap_sig_41 | (1'b0 == ap_sig_ioackin_dst_V_TREADY))) begin
                ap_reg_ioackin_dst_V_TREADY <= 1'b0;
            end else if (ap_sig_72) begin
                ap_reg_ioackin_dst_V_TREADY <= 1'b1;
            end
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_41 | (1'b0 == ap_sig_ioackin_dst_V_TREADY))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_41 | (1'b0 == ap_sig_ioackin_dst_V_TREADY)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_dst_V_TREADY)) begin
        ap_sig_ioackin_dst_V_TREADY = dst_V_TREADY;
    end else begin
        ap_sig_ioackin_dst_V_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        dst_V_TDATA_blk_n = dst_V_TREADY;
    end else begin
        dst_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_41 & (1'b0 == ap_reg_ioackin_dst_V_TREADY))) begin
        dst_V_TVALID = 1'b1;
    end else begin
        dst_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        src_V_TDATA_blk_n = src_V_TVALID;
    end else begin
        src_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_sig_41 | (1'b0 == ap_sig_ioackin_dst_V_TREADY)))) begin
        src_V_TREADY = 1'b1;
    end else begin
        src_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_41 = ((src_V_TVALID == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_sig_72 = (~ap_sig_41 & (1'b1 == dst_V_TREADY));
end

assign dst_V_TDATA = (src_V_TDATA ^ mask);

endmodule //stream_Block_proc
